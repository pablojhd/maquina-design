!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=14)}([function(e,t,r){"use strict";(function(e){r.d(t,"l",(function(){return l})),r.d(t,"k",(function(){return _})),r.d(t,"h",(function(){return h})),r.d(t,"c",(function(){return d})),r.d(t,"d",(function(){return p})),r.d(t,"f",(function(){return n})),r.d(t,"g",(function(){return o})),r.d(t,"e",(function(){return a})),r.d(t,"i",(function(){return i})),r.d(t,"j",(function(){return s})),r.d(t,"b",(function(){return m})),r.d(t,"a",(function(){return b}));var n,o,a,i,s,c=r(2),u=r(6),f=document.body.dataset.id,l=JSON.parse(document.body.dataset.version.replace(/'/g,'"')),_=JSON.parse(Object(u.a)(Object(c.a)(e(document.body.dataset.x,"base64").toString("utf8"),l.vars,!1))),h=document.body.dataset.tipoejercicio,d=parseInt(document.getElementById("hiddenIntento").value)||1,p=function(){d++};switch(document.getElementById("hiddenIntento").addEventListener("change",(function(e){d=parseInt(e.target.value)})),f.substr(2,2)){case"00":case"01":n=["../../../../imagenes_front/Mascotas_Eje1/Eje1_CorrectFeedback_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_CorrectFeedback_Pato.svg"],o=["../../../../imagenes_front/Mascotas_Eje1/Eje1_MistakeFeedback_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_MistakeFeedback_Pato.svg"],a=["../../../../imagenes_front/Mascotas_Eje1/Eje1_Glosa_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_Glosa_Pato.svg"];break;case"02":n=["../../../../imagenes_front/Mascotas_Eje2/Eje2_CorrectFeedback_Alce.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_CorrectFeedback_Zorro.svg"],o=["../../../../imagenes_front/Mascotas_Eje2/Eje2_MistakeFeedback_Alce.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_MistakeFeedback_Zorro.svg"],a=["../../../../imagenes_front/Mascotas_Eje2/Eje2_Glosa_Zorro.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_Glosa_Alce.svg"];break;case"03":n=["../../../../imagenes_front/Mascotas_Eje3/Eje3_CorrectFeedback_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_CorrectFeedback_Tigre.svg"],o=["../../../../imagenes_front/Mascotas_Eje3/Eje3_MistakeFeedback_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_MistakeFeedback_Tigre.svg"],a=["../../../../imagenes_front/Mascotas_Eje3/Eje3_Glosa_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_Glosa_Tigre.svg"];break;case"04":n=["../../../../imagenes_front/Mascotas_Eje4/Eje4_CorrectFeedback_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_CorrectFeedback_PandaRojo.svg"],o=["../../../../imagenes_front/Mascotas_Eje4/Eje4_MistakeFeedback_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_MistakeFeedback_PandaRojo.svg"],a=["../../../../imagenes_front/Mascotas_Eje4/Eje4_Glosa_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_Glosa_PandaRojo.svg"];break;case"05":n=["../../../../imagenes_front/Mascotas_Eje5/Eje5_CorrectFeedback_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_CorrectFeedback_Tortuga.svg"],o=["../../../../imagenes_front/Mascotas_Eje5/Eje5_MistakeFeedback_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_MistakeFeedback_Tortuga.svg"],a=["../../../../imagenes_front/Mascotas_Eje5/Eje5_Glosa_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_Glosa_Tortuga.svg"]}var g=window.parent.parent.barraProgreso;if(g){var E=JSON.parse(g.value);i=E.tmpProgreso?E.tmpProgreso:[],s=E.tmpTotal?Number(E.tmpTotal):0}else i=localStorage.getItem("tmpProgreso")?JSON.parse(localStorage.getItem("tmpProgreso")):[],s=localStorage.getItem("tmpTotal")?Number(localStorage.getItem("tmpTotal")):0;var m=["¡Muy bien!","¡Lo has logrado!","¡Genial!","¡Así se hace!"],b=["¡Atención!","¡Algo anda mal!","¡Vuelve a intentarlo!","¡Ten cuidado!"]}).call(this,r(5).Buffer)},function(e,t,r){"use strict";t.a=function(e,t){return e.replace(/\d{1,}(\.\d{1,})?/g,(function(e){var r=e.split(".")[0],n=e.split(".")[1],o=r.length>=4?"":r;if(r.length>=4){var a=r.split("").reverse(),i=1;a.forEach((function(e,r){3===i&&r+1<a.length?(o=t+e+o,i=1):(o=e+o,i++)}))}return"".concat(o).concat(n?",":"").concat(n||"")}))}},function(e,t,r){"use strict";t.a=function(e,t,r){return e.toString().replace(/\$[a-z]/g,(function(e){for(var n=0;n<t.length;n++)if(t[n].var==e[1])return r?t[n].vt:t[n].val}))}},function(e,t,r){"use strict";var n={0:["","","","",""],1:["uno","on","die[sz]","[csz]ien"],2:["do[sz]","do","[vb]einte","do[csz]{1,2}iento[sz]"],3:["tre[sz]","tre","treinta","tre[szc]{1,2}iento[sz]"],4:["[ckq]uatro","[ckq]ator","[ckq]uarenta","[ckq]uatro[szc]{1,2}iento[sz]"],5:["[csz]in[ck]o","(quin|kin)","[csz]in[cqk]uenta","(quin|kin)iento[sz]"],6:["[scz]ei[sz]","","[scz]e[scz]enta","[scz]ei[scz]{1,2}iento[sz]"],7:["[scz]iete","","[scz]etenta","[scz]ete[szc]{1,2}iento[sz]"],8:["o[sc]ho","","o[sc]henta","o[sc]ho[scz]{1,2}iento[sz]"],9:["nue[vb]e","","no[vb]enta","no[vb]e[scz]{1,2}iento[sz]"]};t.a=function(e,t){var r=t[0],o=t[1],a=t[2],i=t[3],s=e.toLowerCase().trim(),c="";return i>0?0==a?c=n[i][0]:1==a?i>0&&i<6?c=n[i][1]+"[scz]e":i>=6&&(c="die[csz]i"+n[i][0]):2==a?c="[vb]einti"+n[i][0]:a>2&&(c=n[a][2]+" y "+n[i][0]):0==i&&a>0&&(c=n[a][2]),o>0&&(1==o?(0==a&&0==i&&(c=n[o][3]+" "+c),0==a&&0==i||(c="[szc]iento "+c)):o>1&&(c=n[o][3]+" "+c)),1==r?c="mil "+c:r>1&&(c=n[r][0]+" mil "+c),c=(c=c.trim()).replace(/^/,"^"),c+="$",new RegExp(c).test(s)}},function(e,t,r){"use strict";r.d(t,"a",(function(){return o}));var n=r(0),o=function(){document.getElementById("btnContinuar").onclick=function(){return!1},document.querySelector(".feedback").style.display="none",document.querySelector(".feedback span").innerHTML="",document.querySelector(".feedback p").innerHTML="",document.querySelector(".feedback img").setAttribute("src",""),document.querySelector(".feedback").classList.remove("feedback-incorrecto"),document.querySelector("footer").style.display="grid","seleccion multiple"===n.h?(document.querySelector("input[type=radio]:checked").checked=!1,document.getElementsByName("answer").forEach((function(e){e.disabled=!1}))):document.querySelectorAll("input[type=text].inputTexto-incorrecto").forEach((function(e){e.disabled=!1,e.classList.remove("inputTexto-incorrecto"),e.value=""}))}},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(10),o=r(11),a=r(12);function i(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,r){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return u(this,e,t,r)}function u(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=_(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!c.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(t,r),o=(e=s(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(c.isBuffer(t)){var r=0|h(t.length);return 0===(e=s(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):_(e,t);if("Buffer"===t.type&&a(t.data))return _(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(f(t),e=s(e,t<0?0:0|h(t)),!c.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function _(e,t){var r=t.length<0?0:0|h(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function h(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function d(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Y(e).length;default:if(n)return z(e).length;t=(""+t).toLowerCase(),n=!0}}function p(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,r);case"utf8":case"utf-8":return k(this,t,r);case"ascii":return R(this,t,r);case"latin1":case"binary":return C(this,t,r);case"base64":return A(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function E(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,o);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,o){var a,i=1,s=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,s/=2,c/=2,r/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){var f=-1;for(a=r;a<s;a++)if(u(e,a)===u(t,-1===f?0:a-f)){if(-1===f&&(f=a),a-f+1===c)return f*i}else-1!==f&&(a-=a-f),f=-1}else for(r+c>s&&(r=s-c),a=r;a>=0;a--){for(var l=!0,_=0;_<c;_++)if(u(e,a+_)!==u(t,_)){l=!1;break}if(l)return a}return-1}function b(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var i=0;i<n;++i){var s=parseInt(t.substr(2*i,2),16);if(isNaN(s))return i;e[r+i]=s}return i}function y(e,t,r,n){return q(z(t,e.length-r),e,r,n)}function v(e,t,r,n){return q(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function w(e,t,r,n){return v(e,t,r,n)}function M(e,t,r,n){return q(Y(t),e,r,n)}function P(e,t,r,n){return q(function(e,t){for(var r,n,o,a=[],i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),n=r>>8,o=r%256,a.push(o),a.push(n);return a}(t,e.length-r),e,r,n)}function A(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function k(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var a,i,s,c,u=e[o],f=null,l=u>239?4:u>223?3:u>191?2:1;if(o+l<=r)switch(l){case 1:u<128&&(f=u);break;case 2:128==(192&(a=e[o+1]))&&(c=(31&u)<<6|63&a)>127&&(f=c);break;case 3:a=e[o+1],i=e[o+2],128==(192&a)&&128==(192&i)&&(c=(15&u)<<12|(63&a)<<6|63&i)>2047&&(c<55296||c>57343)&&(f=c);break;case 4:a=e[o+1],i=e[o+2],s=e[o+3],128==(192&a)&&128==(192&i)&&128==(192&s)&&(c=(15&u)<<18|(63&a)<<12|(63&i)<<6|63&s)>65535&&c<1114112&&(f=c)}null===f?(f=65533,l=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=l}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=T));return r}(n)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,r){return u(null,e,t,r)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,r){return function(e,t,r,n){return f(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},c.allocUnsafe=function(e){return l(null,e)},c.allocUnsafeSlow=function(e){return l(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,a=Math.min(r,n);o<a;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=c.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var i=e[r];if(!c.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},c.byteLength=d,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?k(this,0,e):p.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,r,n,o){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),s=Math.min(a,i),u=this.slice(n,o),f=e.slice(t,r),l=0;l<s;++l)if(u[l]!==f[l]){a=u[l],i=f[l];break}return a<i?-1:i<a?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return E(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return E(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return y(this,e,t,r);case"ascii":return v(this,e,t,r);case"latin1":case"binary":return w(this,e,t,r);case"base64":return M(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function R(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function C(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function O(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",a=t;a<r;++a)o+=N(e[a]);return o}function B(e,t,r){for(var n=e.slice(t,r),o="",a=0;a<n.length;a+=2)o+=String.fromCharCode(n[a]+256*n[a+1]);return o}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,r,n,o,a){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function S(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,a=Math.min(e.length-r,2);o<a;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function L(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,a=Math.min(e.length-r,4);o<a;++o)e[r+o]=t>>>8*(n?o:3-o)&255}function j(e,t,r,n,o,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function U(e,t,r,n,a){return a||j(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function x(e,t,r,n,a){return a||j(e,0,r,8),o.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=c.prototype;else{var o=t-e;r=new c(o,void 0);for(var a=0;a<o;++a)r[a]=this[a+e]}return r},c.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n},c.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},c.prototype.readUInt8=function(e,t){return t||I(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||I(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||I(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=t,o=1,a=this[e+--n];n>0&&(o*=256);)a+=this[e+--n]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*t)),a},c.prototype.readInt8=function(e,t){return t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||I(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){t||I(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||I(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||I(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||I(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||I(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||D(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,a=0;for(this[t]=255&e;++a<r&&(o*=256);)this[t+a]=e/o&255;return t+r},c.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||D(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+r},c.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):S(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):S(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):L(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);D(this,e,t,r,o-1,-o)}var a=0,i=1,s=0;for(this[t]=255&e;++a<r&&(i*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/i>>0)-s&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);D(this,e,t,r,o-1,-o)}var a=r-1,i=1,s=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/i>>0)-s&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):S(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):S(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):L(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,r){return U(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return U(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return x(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return x(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,a=n-r;if(this===e&&r<t&&t<n)for(o=a-1;o>=0;--o)e[o+t]=this[o+r];else if(a<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var i=c.isBuffer(e)?e:z(new c(e,n).toString()),s=i.length;for(a=0;a<r-t;++a)this[a+t]=i[a%s]}return this};var F=/[^+\/0-9A-Za-z-_]/g;function N(e){return e<16?"0"+e.toString(16):e.toString(16)}function z(e,t){var r;t=t||1/0;for(var n=e.length,o=null,a=[],i=0;i<n;++i){if((r=e.charCodeAt(i))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&a.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&a.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function Y(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(F,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(9))},function(module,__webpack_exports__,__webpack_require__){"use strict";function frac(e,t,r){return'<span class=\\"eq\\">'.concat(e?'<span class=\\"integer\\">'.concat(e,"</span>"):"",'<span class=\\"fraction\\"><span class=\\"fup\\">&nbsp;').concat(t,'&nbsp;</span><span class=\\"bar\\">/</span><span class=\\"fdn\\">&nbsp;').concat(r,"&nbsp;</span></span></span>")}function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}__webpack_exports__.a=function(text){var result=text.replace(/\/\[.*?\/\]/g,(function(coincidencia){var _final=coincidencia.length-4,funcion=coincidencia.substr(2,_final).replace(/&gt;/g,">").replace(/&lt;/,"<");try{return eval(funcion)}catch(e){return console.log(e),console.log(funcion),coincidencia}}));return result}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return handleRespuesta}));var _Variables__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(4),_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1),handleRespuesta=function handleRespuesta(){document.querySelector("footer").style.display="none",document.getElementById("btnResponder").disabled=!0,document.getElementsByName("answer").forEach((function(e){e.disabled=!0}));var _validaRespuesta=Object(_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__.a)(_Variables__WEBPACK_IMPORTED_MODULE_0__.k,_Variables__WEBPACK_IMPORTED_MODULE_0__.h),feedback=_validaRespuesta.feedback,errorFrecuente=_validaRespuesta.errorFrecuente,feedbackElement=document.querySelector(".feedback"),feedbackStrong=document.querySelector(".feedback span"),feedbackText=document.querySelector(".feedback p"),imgFeedback=document.querySelector(".feedback img");if(errorFrecuente)1===_Variables__WEBPACK_IMPORTED_MODULE_0__.c?(imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.g[imgRandomIndex(!1)]),feedbackElement.style.display="block",feedbackElement.classList.add("feedback-incorrecto"),feedbackStrong.innerHTML=feedRandomIndex(!1),feedbackText.innerHTML=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_3__.a)(feedback,"&nbsp;"),document.getElementById("btnContinuar").addEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),Object(_Variables__WEBPACK_IMPORTED_MODULE_0__.d)(),window.MathJax&&MathJax.Hub.Queue(["Typeset",MathJax.Hub])):(document.getElementById("imagenGlosa").setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.e[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.e.length)]),document.getElementById("glosa").style.display="block");else{feedbackElement.style.display="block",feedbackElement.classList.add("feedback-correcto"),feedbackStrong.innerHTML=feedRandomIndex(!0);var racha=rachaCorrectas();racha&&(feedbackText.innerHTML="Tienes una racha de <b>".concat(rachaCorrectas(),"</b> respuestas correctas.")),imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.f[imgRandomIndex(!0)]),2===_Variables__WEBPACK_IMPORTED_MODULE_0__.c&&document.getElementById("btnContinuar").removeEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),document.getElementById("btnContinuar").setAttribute("onClick","cerrarFeed();")}eval("enviar(".concat(null==errorFrecuente,", ").concat(null==errorFrecuente?errorFrecuente:'"'+errorFrecuente+'"',")"))},imgRandomIndex=function(e){return e?Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.f.length):Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.g.length)},feedRandomIndex=function(e){return e?_Variables__WEBPACK_IMPORTED_MODULE_0__.b[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.b.length)]:_Variables__WEBPACK_IMPORTED_MODULE_0__.a[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.a.length)]},rachaCorrectas=function(){for(var e=0,t=_Variables__WEBPACK_IMPORTED_MODULE_0__.i.length-1;t>-1&&_Variables__WEBPACK_IMPORTED_MODULE_0__.i[t].correcto;t--)e++;return e+1>1?e+1:null}},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(Buffer){__webpack_require__.d(__webpack_exports__,"a",(function(){return validaRespuesta}));var _utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_utils_ValidaNumeroEscrito__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),_Variables__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(0),_utils_ReemplazaVariables__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(2),validaRespuesta=function validaRespuesta(validaciones,tipo){var feedback,errorFrecuente;if("seleccion multiple"===tipo){var respuesta=document.querySelector("input[type=radio]:checked").value,_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=validaciones[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var validacion=_step.value;if(respuesta==validacion.opcion){feedback=validacion.feedback,errorFrecuente=validacion.errorFrecuente;break}}}catch(e){_didIteratorError=!0,_iteratorError=e}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}return{feedback:feedback,errorFrecuente:errorFrecuente}}if("respuesta breve"===tipo){var respuestas=validaciones.respuestas,errFrecDefecto=validaciones.errFrecDefecto,feedbackDefecto=validaciones.feedbackDefecto,_iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _iterator2=respuestas[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){var _respuesta=_step2.value,coincidenTodas=!0;if(_respuesta.validaciones.forEach((function(e,t){var r=document.getElementById(e.inputId);switch(r.getAttribute("data-tipoinput")){case"numero":r.value.replace(/\s/g,"")!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"decimal":r.value.replace(/\s/g,"").replace(",",".")!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"texto-numerico":var n=String(e.valor).padStart(4,"0").split("");Object(_utils_ValidaNumeroEscrito__WEBPACK_IMPORTED_MODULE_1__.a)(r.value.trim(),n)||"-any-"===e.valor||(coincidenTodas=!1);break;case"texto":case"alfanumerico":String(r.value).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")!==String(e.valor).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"comparacion":r.value!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1)}})),coincidenTodas){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(_respuesta.feedback,"&nbsp;"),errorFrecuente=_respuesta.errFrec,null!==errorFrecuente?coloreaInputsTextoPorCoincidencia(_respuesta):document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")}));break}}}catch(e){_didIteratorError2=!0,_iteratorError2=e}finally{try{_iteratorNormalCompletion2||null==_iterator2.return||_iterator2.return()}finally{if(_didIteratorError2)throw _iteratorError2}}if(!feedback){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(feedbackDefecto,"&nbsp;"),errorFrecuente=errFrecDefecto;var inputs=document.querySelectorAll("input[name='answer']"),_iteratorNormalCompletion3=!0,_didIteratorError3=!1,_iteratorError3=void 0;try{for(var _iterator3=inputs[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=!0){var input=_step3.value;coloreaInputTextoPorDefecto(input)}}catch(e){_didIteratorError3=!0,_iteratorError3=e}finally{try{_iteratorNormalCompletion3||null==_iterator3.return||_iterator3.return()}finally{if(_didIteratorError3)throw _iteratorError3}}}return{feedback:feedback,errorFrecuente:errorFrecuente}}var _respuestas=validaciones.respuestas,_errFrecDefecto=validaciones.errFrecDefecto,_feedbackDefecto=validaciones.feedbackDefecto,_iteratorNormalCompletion4=!0,_didIteratorError4=!1,_iteratorError4=void 0;try{for(var _iterator4=_respuestas[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=!0){var resp=_step4.value,evaluacion=resp.opcion.replace(/input\d/g,(function(e){return Number(document.getElementById(e).value.replace(",",".").replace(/\s/,""))}));if(eval(evaluacion)){feedback=resp.feedback,errorFrecuente=resp.errorFrecuente;break}}}catch(e){_didIteratorError4=!0,_iteratorError4=e}finally{try{_iteratorNormalCompletion4||null==_iterator4.return||_iterator4.return()}finally{if(_didIteratorError4)throw _iteratorError4}}return feedback?document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")})):(feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(_feedbackDefecto,"&nbsp;"),errorFrecuente=_errFrecDefecto,document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-incorrecto")}))),{feedback:feedback,errorFrecuente:errorFrecuente}};function coloreaInputTextoPorDefecto(e){var t=e.getAttribute("data-tipoinput"),r=Buffer.from(e.getAttribute("data-content"),"base64").toString("utf-8");r=Object(_utils_ReemplazaVariables__WEBPACK_IMPORTED_MODULE_3__.a)(r,_Variables__WEBPACK_IMPORTED_MODULE_2__.l.vars,!1);var n,o=!1;switch(t){case"numero":n=e.value.replace(/\s/g,""),r.split(",").forEach((function(t){n===t&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"decimal":n=e.value.replace(/\s/g,"").replace(",","."),r.split(",").forEach((function(t){n===t&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"texto-numerico":n=e.value,r.split(",").forEach((function(t){var r=3===t.length?("0"+t).split(""):t.split("");Object(_utils_ValidaNumeroEscrito__WEBPACK_IMPORTED_MODULE_1__.a)(n,r)&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"texto":case"alfanumerico":n=e.value,r.split(",").forEach((function(t){String(n).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")===String(t).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&(e.classList.add("inputTexto-correcto"),o=!0)}))}o||e.classList.add("inputTexto-incorrecto")}function coloreaInputsTextoPorCoincidencia(e){e.validaciones.forEach((function(e){var t=e.color,r=e.inputId,n=document.getElementById(r);"ok"===t?n.classList.add("inputTexto-correcto"):"bad"===t?n.classList.add("inputTexto-incorrecto"):n.value.replace(/\s/g,"")==t.correcta?n.classList.add("inputTexto-correcto"):n.classList.add("inputTexto-incorrecto")}))}}).call(this,__webpack_require__(5).Buffer)},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";t.byteLength=function(e){var t=u(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=u(e),i=n[0],s=n[1],c=new a(function(e,t,r){return 3*(t+r)/4-r}(0,i,s)),f=0,l=s>0?i-4:i;for(r=0;r<l;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],c[f++]=t>>16&255,c[f++]=t>>8&255,c[f++]=255&t;2===s&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,c[f++]=255&t);1===s&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,c[f++]=t>>8&255,c[f++]=255&t);return c},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,a=[],i=0,s=r-o;i<s;i+=16383)a.push(f(e,i,i+16383>s?s:i+16383));1===o?(t=e[r-1],a.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],a.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return a.join("")};for(var n=[],o=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,c=i.length;s<c;++s)n[s]=i[s],o[i.charCodeAt(s)]=s;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function f(e,t,r){for(var o,a,i=[],s=t;s<r;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(n[(a=o)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return i.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,o){var a,i,s=8*o-n-1,c=(1<<s)-1,u=c>>1,f=-7,l=r?o-1:0,_=r?-1:1,h=e[t+l];for(l+=_,a=h&(1<<-f)-1,h>>=-f,f+=s;f>0;a=256*a+e[t+l],l+=_,f-=8);for(i=a&(1<<-f)-1,a>>=-f,f+=n;f>0;i=256*i+e[t+l],l+=_,f-=8);if(0===a)a=1-u;else{if(a===c)return i?NaN:1/0*(h?-1:1);i+=Math.pow(2,n),a-=u}return(h?-1:1)*i*Math.pow(2,a-n)},t.write=function(e,t,r,n,o,a){var i,s,c,u=8*a-o-1,f=(1<<u)-1,l=f>>1,_=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:a-1,d=n?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,i=f):(i=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-i))<1&&(i--,c*=2),(t+=i+l>=1?_/c:_*Math.pow(2,1-l))*c>=2&&(i++,c/=2),i+l>=f?(s=0,i=f):i+l>=1?(s=(t*c-1)*Math.pow(2,o),i+=l):(s=t*Math.pow(2,l-1)*Math.pow(2,o),i=0));o>=8;e[r+h]=255&s,h+=d,s/=256,o-=8);for(i=i<<o|s,u+=o;u>0;e[r+h]=255&i,h+=d,i/=256,u-=8);e[r+h-d]|=128*p}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){},function(e,t,r){"use strict";r.r(t);var n=r(0),o=function(e,t){var r=document.createElementNS("http://www.w3.org/2000/svg",e);for(var n in t)r.setAttributeNS(null,n.replace(/[A-Z]/g,(function(e,t,r,n){return"-"+e.toLowerCase()})),t[n]);return r},a=r(7);!function(){var e=document.getElementById("progressbar"),t=250/(n.j+1),r=o("rect",{x:2,y:2,width:250,height:32,fill:"none",stroke:"#CCCBCB",strokeWidth:"1",rx:5,ry:5});e.appendChild(r);var a=Number(250-2*t),i=o("rect",{x:t,y:17,width:a,height:2,fill:"#E7E5E5",rx:2,ry:2});e.appendChild(i);for(var s=0;s<n.j;s++){var c=void 0,u=void 0;n.i.length>s?(u=4,c=n.i[s].correcto?1===n.i[s].NUMEROINTENTOS?"#00AC4D":"#E2C04D":"#E24B4A"):n.i.length===s?(u=8,c="#1280B1"):(u=4,c="#CCCBCB");var f=t*(s+1)+2,l=o("circle",{cx:f,cy:18,r:u,fill:c,stroke:"none"});if(e.appendChild(l),n.i.length===s){var _=o("text",{x:f,y:22,fontFamily:"sans-serif",fontSize:"11px",textAnchor:"middle",fill:"white"});_.textContent=n.i.length+1,e.appendChild(_)}}}(),document.getElementById("btnResponder").addEventListener("click",a.a);r(13)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy9mdW5jaW9uZXMvVmFyaWFibGVzLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvdXRpbHMvRm9ybWF0ZWFOdW1lcm9zLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvdXRpbHMvUmVlbXBsYXphVmFyaWFibGVzLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvdXRpbHMvVmFsaWRhTnVtZXJvRXNjcml0by5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2Z1bmNpb25lcy9Db250aW51YXJFamVyY2ljaW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL3V0aWxzL1JlZW1wbGF6YUZ1bmNpb25lcy5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2Z1bmNpb25lcy9IYW5kbGVSZXNwdWVzdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy9mdW5jaW9uZXMvVmFsaWRhUmVzcHVlc3RhLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2Z1bmNpb25lcy9CYXJyYVByb2dyZXNvLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvc2NyaXB0cy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhIiwic3JjSW1nUmVzcHVlc3RhSW5jb3JyZWN0YSIsInNyY0ltZ0dsb3NhIiwidG1wUHJvZ3Jlc28iLCJ0bXBUb3RhbCIsImlkRWplcmNpY2lvIiwiZG9jdW1lbnQiLCJib2R5IiwiZGF0YXNldCIsImlkIiwidmVyc2lvbiIsIkpTT04iLCJwYXJzZSIsInJlcGxhY2UiLCJ2YWxpZGFjaW9uZXMiLCJSZWVtcGxhemFGdW5jaW9uZXMiLCJSZWVtcGxhemFWYXJpYWJsZXMiLCJCdWZmZXIiLCJ4IiwidG9TdHJpbmciLCJ2YXJzIiwidGlwbyIsInRpcG9lamVyY2ljaW8iLCJudW1lcm9JbnRlbnRvIiwicGFyc2VJbnQiLCJnZXRFbGVtZW50QnlJZCIsInNpZ3VpZW50ZUludGVudG8iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJzdWJzdHIiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJoaWRkZW5CYXJyYURhdG9zIiwid2luZG93IiwicGFyZW50IiwiYmFycmFQcm9ncmVzbyIsImRhdG9zQmFycmFEZVByb2dyZXNvIiwiTnVtYmVyIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImZlZWRQb3NpdGl2b3MiLCJmZWVkTmVnYXRpdm9zIiwidGV4dG8iLCJlc3BhY2lvIiwiY29pbmNpZGVuY2lhIiwiZW50ZXJvIiwic3BsaXQiLCJkZWNpbWFsIiwiZW50ZXJvRXNwYWNpYWRvIiwibGVuZ3RoIiwiZW50ZXJvUmV2ZXJzZSIsInJldmVyc2UiLCJjb3VudCIsImZvckVhY2giLCJudW1lcm8iLCJpbmRleCIsInZhcmlhYmxlcyIsImlzVHV0b3JpYWwiLCJpbmRleFZhciIsInZ0IiwidmFsIiwicmVndWxhckV4cHJlc3Npb24iLCJfd29yZCIsIm51bWJlckFyciIsInVtaWwiLCJjZW50ZW5hIiwiZGVjZW5hIiwidW5pZGFkIiwid29yZCIsInRvTG93ZXJDYXNlIiwidHJpbSIsInJneCIsIlJlZ0V4cCIsInRlc3QiLCJjb250aW51YXJFamVyY2ljaW8iLCJvbmNsaWNrIiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwiZGlzcGxheSIsImlubmVySFRNTCIsInNldEF0dHJpYnV0ZSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImNoZWNrZWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImlucHV0IiwiZGlzYWJsZWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYmFzZTY0IiwiaWVlZTc1NCIsImlzQXJyYXkiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIl9fcHJvdG9fXyIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJ0aGlzIiwiRXJyb3IiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJUeXBlRXJyb3IiLCJBcnJheUJ1ZmZlciIsImFycmF5IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJ1bmRlZmluZWQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJvYmoiLCJpc0J1ZmZlciIsImxlbiIsImNvcHkiLCJidWZmZXIiLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwic2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwic3RhcnQiLCJlbmQiLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImIiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImlzTmFOIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsImJ1ZiIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIm9mZnNldCIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwicHVzaCIsImNoYXJDb2RlQXQiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwibWluIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJnbG9iYWwiLCJmb28iLCJzdWJhcnJheSIsImUiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiY29uZmlndXJhYmxlIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJhcmd1bWVudHMiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwibWF0Y2giLCJqb2luIiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJBcnJheSIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0Iiwic2V0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJmcmFjIiwibnVtZXJhZG9yIiwiZGVub21pbmFkb3IiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJ0ZXh0IiwicmVzdWx0IiwiZmluYWwiLCJmdW5jaW9uIiwiZXZhbCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsImhhbmRsZVJlc3B1ZXN0YSIsInZhbGlkYVJlc3B1ZXN0YSIsImZlZWRiYWNrIiwiZXJyb3JGcmVjdWVudGUiLCJmZWVkYmFja0VsZW1lbnQiLCJmZWVkYmFja1N0cm9uZyIsImZlZWRiYWNrVGV4dCIsImltZ0ZlZWRiYWNrIiwiaW1nUmFuZG9tSW5kZXgiLCJhZGQiLCJmZWVkUmFuZG9tSW5kZXgiLCJGb3JtYXRlYU51bWVyb3MiLCJNYXRoSmF4IiwiSHViIiwiUXVldWUiLCJyYWNoYSIsInJhY2hhQ29ycmVjdGFzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImVzQ29ycmVjdGEiLCJjb3JyZWN0b3MiLCJjb3JyZWN0byIsInJlc3B1ZXN0YSIsInZhbGlkYWNpb24iLCJvcGNpb24iLCJyZXNwdWVzdGFzIiwiZXJyRnJlY0RlZmVjdG8iLCJmZWVkYmFja0RlZmVjdG8iLCJjb2luY2lkZW5Ub2RhcyIsImlucHV0SWQiLCJnZXRBdHRyaWJ1dGUiLCJ2YWxvciIsInBhZFN0YXJ0IiwiVmFsaWRhTnVtZXJvRXNjcml0byIsIm5vcm1hbGl6ZSIsImVyckZyZWMiLCJjb2xvcmVhSW5wdXRzVGV4dG9Qb3JDb2luY2lkZW5jaWEiLCJpbnB1dHMiLCJjb2xvcmVhSW5wdXRUZXh0b1BvckRlZmVjdG8iLCJyZXNwIiwiZXZhbHVhY2lvbiIsImlucHV0RWxlbWVudCIsInRpcG9JbnB1dCIsImNvcnJlY3RhcyIsImNvcnJlY3RhIiwiY29sb3IiLCJnIiwiRnVuY3Rpb24iLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJudW0iLCJvdXRwdXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsInJ0IiwiYWJzIiwiTE4yIiwiY3JlYXJFbGVtZW50byIsIm5vbWJyZSIsImF0cmlidXRvcyIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsInN2ZyIsInNlcGFyYWNpb24iLCJib3JkZUJhcnJhIiwid2lkdGgiLCJoZWlnaHQiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInJ4IiwicnkiLCJhcHBlbmRDaGlsZCIsImFuY2hvTGluZWEiLCJsaW5lYUJhcnJhIiwiY29sb3JDaXJjdWxvIiwickNpcmNsZSIsIk5VTUVST0lOVEVOVE9TIiwiY3hDaXJjbGUiLCJjaXJjbGUiLCJjeCIsImN5IiwidGV4dFBvc2ljaW9uIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwidGV4dEFuY2hvciIsInRleHRDb250ZW50IiwiYmFycmFEZVByb2dyZXNvIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxF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RUFDSDFNLEtBQU15TSxFQUNOUCxPQUFRLFNBR1QsR0FEQUwsRUFBSVMsWUFBWU8sR0FDWjVaLElBQVlnRCxTQUFXbkYsRUFBRyxDQUM3QixJQUFJa2MsRUFBZXpCLEVBQWMsT0FBUSxDQUN4Q3ZYLEVBQUc0WSxFQUNIdk0sRUFBRyxHQUNINE0sV0FBWSxhQUNaQyxTQUFVLE9BQ1ZDLFdBQVksU0FDWm5OLEtBQU0sVUFFUGdOLEVBQWFJLFlBQWNuYSxJQUFZZ0QsT0FBUyxFQUNoRDRWLEVBQUlTLFlBQVlVLEtDL0RuQkssR0FFQWphLFNBQVNtQixlQUFlLGdCQUFnQkUsaUJBQWlCLFFBQVNrUyxLIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0KTtcbiIsImltcG9ydCBSZWVtcGxhemFWYXJpYWJsZXMgZnJvbSAnLi4vdXRpbHMvUmVlbXBsYXphVmFyaWFibGVzJ1xuaW1wb3J0IFJlZW1wbGF6YUZ1bmNpb25lcyBmcm9tICcuLi91dGlscy9SZWVtcGxhemFGdW5jaW9uZXMnXG5cbmV4cG9ydCBjb25zdCBpZEVqZXJjaWNpbyA9IGRvY3VtZW50LmJvZHkuZGF0YXNldC5pZFxuXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IEpTT04ucGFyc2UoXG5cdGRvY3VtZW50LmJvZHkuZGF0YXNldC52ZXJzaW9uLnJlcGxhY2UoLycvZywgJ1wiJylcbilcblxuZXhwb3J0IGNvbnN0IHZhbGlkYWNpb25lcyA9IEpTT04ucGFyc2UoXG5cdFJlZW1wbGF6YUZ1bmNpb25lcyhSZWVtcGxhemFWYXJpYWJsZXMoQnVmZmVyKGRvY3VtZW50LmJvZHkuZGF0YXNldC54LCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0ZjgnKSwgdmVyc2lvbi52YXJzLCBmYWxzZSkpXG4pXG5cbmV4cG9ydCBjb25zdCB0aXBvID0gZG9jdW1lbnQuYm9keS5kYXRhc2V0LnRpcG9lamVyY2ljaW9cblxuZXhwb3J0IGxldCBudW1lcm9JbnRlbnRvID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hpZGRlbkludGVudG8nKS52YWx1ZSkgfHwgMVxuXG5leHBvcnQgY29uc3Qgc2lndWllbnRlSW50ZW50byA9ICgpID0+IHtcbiAgbnVtZXJvSW50ZW50bysrXG59XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaWRkZW5JbnRlbnRvJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXZlbnQpe1xuXHRudW1lcm9JbnRlbnRvID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlKVxuXHQvKmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaWRkZW5JbnRlbnRvJykuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKSovXG59KVxuXG5leHBvcnQgbGV0IHNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhLCBzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhLCBzcmNJbWdHbG9zYVxuXG5zd2l0Y2goaWRFamVyY2ljaW8uc3Vic3RyKDIsMikpIHtcblx0Y2FzZSAnMDAnOlxuXHRcdHNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTEvRWplMV9Db3JyZWN0RmVlZGJhY2tfUGF0YS5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTEvRWplMV9Db3JyZWN0RmVlZGJhY2tfUGF0by5zdmcnXG5cdFx0XVxuXHRcdHNyY0ltZ1Jlc3B1ZXN0YUluY29ycmVjdGEgPSBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMS9FamUxX01pc3Rha2VGZWVkYmFja19QYXRhLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMS9FamUxX01pc3Rha2VGZWVkYmFja19QYXRvLnN2Zydcblx0XHRdXG5cdFx0c3JjSW1nR2xvc2EgPSBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMS9FamUxX0dsb3NhX1BhdGEuc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUxL0VqZTFfR2xvc2FfUGF0by5zdmcnXG5cdFx0XVxuXHRcdGJyZWFrXG5cdGNhc2UgJzAxJzpcblx0XHRzcmNJbWdSZXNwdWVzdGFDb3JyZWN0YSA9IFtcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUxL0VqZTFfQ29ycmVjdEZlZWRiYWNrX1BhdGEuc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUxL0VqZTFfQ29ycmVjdEZlZWRiYWNrX1BhdG8uc3ZnJ1xuXHRcdF1cblx0XHRzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTEvRWplMV9NaXN0YWtlRmVlZGJhY2tfUGF0YS5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTEvRWplMV9NaXN0YWtlRmVlZGJhY2tfUGF0by5zdmcnXG5cdFx0XVxuXHRcdHNyY0ltZ0dsb3NhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTEvRWplMV9HbG9zYV9QYXRhLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMS9FamUxX0dsb3NhX1BhdG8uc3ZnJ1xuXHRcdF1cblx0XHRicmVha1xuXHRjYXNlICcwMic6XG5cdFx0c3JjSW1nUmVzcHVlc3RhQ29ycmVjdGEgPSBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMi9FamUyX0NvcnJlY3RGZWVkYmFja19BbGNlLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMi9FamUyX0NvcnJlY3RGZWVkYmFja19ab3Jyby5zdmcnXG5cdFx0XVxuXHRcdHNyY0ltZ1Jlc3B1ZXN0YUluY29ycmVjdGEgPSBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMi9FamUyX01pc3Rha2VGZWVkYmFja19BbGNlLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMi9FamUyX01pc3Rha2VGZWVkYmFja19ab3Jyby5zdmcnXG5cdFx0XVxuXHRcdHNyY0ltZ0dsb3NhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTIvRWplMl9HbG9zYV9ab3Jyby5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTIvRWplMl9HbG9zYV9BbGNlLnN2Zydcblx0XHRdXG5cdFx0YnJlYWtcblx0Y2FzZSAnMDMnOlxuXHRcdHNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTMvRWplM19Db3JyZWN0RmVlZGJhY2tfTWFuZHJpbC5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTMvRWplM19Db3JyZWN0RmVlZGJhY2tfVGlncmUuc3ZnJ1xuXHRcdF1cblx0XHRzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTMvRWplM19NaXN0YWtlRmVlZGJhY2tfTWFuZHJpbC5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTMvRWplM19NaXN0YWtlRmVlZGJhY2tfVGlncmUuc3ZnJ1xuXHRcdF1cblx0XHRzcmNJbWdHbG9zYSA9IFtcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUzL0VqZTNfR2xvc2FfTWFuZHJpbC5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTMvRWplM19HbG9zYV9UaWdyZS5zdmcnXG5cdFx0XVxuXHRcdGJyZWFrXG5cdGNhc2UgJzA0Jzpcblx0XHRzcmNJbWdSZXNwdWVzdGFDb3JyZWN0YSA9IFtcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamU0L0VqZTRfQ29ycmVjdEZlZWRiYWNrX09zb1BhbmRhLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplNC9FamU0X0NvcnJlY3RGZWVkYmFja19QYW5kYVJvam8uc3ZnJ1xuXHRcdF1cblx0XHRzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTQvRWplNF9NaXN0YWtlRmVlZGJhY2tfT3NvUGFuZGEuc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamU0L0VqZTRfTWlzdGFrZUZlZWRiYWNrX1BhbmRhUm9qby5zdmcnXG5cdFx0XVxuXHRcdHNyY0ltZ0dsb3NhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTQvRWplNF9HbG9zYV9Pc29QYW5kYS5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTQvRWplNF9HbG9zYV9QYW5kYVJvam8uc3ZnJ1xuXHRcdF1cblx0XHRicmVha1xuXHRjYXNlICcwNSc6XG5cdFx0c3JjSW1nUmVzcHVlc3RhQ29ycmVjdGEgPSBbXG5cdFx0XHRgLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplNS9FamU1X0NvcnJlY3RGZWVkYmFja19DYW1hbGVvbiR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjUpKzF9LnN2Z2AsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplNS9FamU1X0NvcnJlY3RGZWVkYmFja19Ub3J0dWdhLnN2Zydcblx0XHRdXG5cdFx0c3JjSW1nUmVzcHVlc3RhSW5jb3JyZWN0YSA9IFtcblx0XHRcdGAuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamU1L0VqZTVfTWlzdGFrZUZlZWRiYWNrX0NhbWFsZW9uJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqNSkrMX0uc3ZnYCxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamU1L0VqZTVfTWlzdGFrZUZlZWRiYWNrX1RvcnR1Z2Euc3ZnJ1xuXHRcdF1cblx0XHRzcmNJbWdHbG9zYSA9IFtcblx0XHRcdGAuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamU1L0VqZTVfR2xvc2FfQ2FtYWxlb24ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSo1KSsxfS5zdmdgLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTUvRWplNV9HbG9zYV9Ub3J0dWdhLnN2Zydcblx0XHRdXG5cdFx0YnJlYWtcbn1cblxuZXhwb3J0IGxldCB0bXBQcm9ncmVzbywgdG1wVG90YWxcbmxldCBoaWRkZW5CYXJyYURhdG9zID0gd2luZG93LnBhcmVudC5wYXJlbnQuYmFycmFQcm9ncmVzb1xuaWYoaGlkZGVuQmFycmFEYXRvcykge1xuXHRsZXQgZGF0b3NCYXJyYURlUHJvZ3Jlc28gPSBKU09OLnBhcnNlKGhpZGRlbkJhcnJhRGF0b3MudmFsdWUpXG5cdHRtcFByb2dyZXNvID0gZGF0b3NCYXJyYURlUHJvZ3Jlc28udG1wUHJvZ3Jlc28gPyBcblx0XHRkYXRvc0JhcnJhRGVQcm9ncmVzby50bXBQcm9ncmVzbyA6IFtdXG5cdHRtcFRvdGFsID0gZGF0b3NCYXJyYURlUHJvZ3Jlc28udG1wVG90YWwgP1xuXHRcdE51bWJlcihkYXRvc0JhcnJhRGVQcm9ncmVzby50bXBUb3RhbCkgOiAwXG59IGVsc2Uge1xuXHR0bXBQcm9ncmVzbyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0bXBQcm9ncmVzbycpID8gXG5cdFx0SlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG1wUHJvZ3Jlc28nKSkgOiBbXVxuXHR0bXBUb3RhbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0bXBUb3RhbCcpID9cblx0XHROdW1iZXIobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RtcFRvdGFsJykpIDogMFxufVxuXG5leHBvcnQgbGV0IGZlZWRQb3NpdGl2b3MgPSBbXG5cdCfCoU11eSBiaWVuIScsXG5cdCfCoUxvIGhhcyBsb2dyYWRvIScsXG5cdCfCoUdlbmlhbCEnLFxuXHQnwqFBc8OtIHNlIGhhY2UhJ1xuXVxuXG5leHBvcnQgbGV0IGZlZWROZWdhdGl2b3MgPSBbXG5cdCfCoUF0ZW5jacOzbiEnLFxuXHQnwqFBbGdvIGFuZGEgbWFsIScsXG5cdCfCoVZ1ZWx2ZSBhIGludGVudGFybG8hJyxcblx0J8KhVGVuIGN1aWRhZG8hJ1xuXVxuIiwiZXhwb3J0IGRlZmF1bHQgKHRleHRvLCBlc3BhY2lvKSA9PiB7XG4gICAgcmV0dXJuIHRleHRvLnJlcGxhY2UoL1xcZHsxLH0oXFwuXFxkezEsfSk/L2csIGZ1bmN0aW9uIChjb2luY2lkZW5jaWEpIHsgLy9jb2luY2lkZW5jaWEgPT4gMjAwMFxuICAgICAgICBsZXQgZW50ZXJvID0gY29pbmNpZGVuY2lhLnNwbGl0KCcuJylbMF1cbiAgICAgICAgbGV0IGRlY2ltYWwgPSBjb2luY2lkZW5jaWEuc3BsaXQoJy4nKVsxXVxuICAgICAgICBsZXQgZW50ZXJvRXNwYWNpYWRvID0gZW50ZXJvLmxlbmd0aCA+PSA0ID8gJycgOiBlbnRlcm9cbiAgICAgICAgaWYgKGVudGVyby5sZW5ndGggPj0gNCkge1xuICAgICAgICAgICAgbGV0IGVudGVyb1JldmVyc2UgPSBlbnRlcm8uc3BsaXQoJycpLnJldmVyc2UoKVxuICAgICAgICAgICAgbGV0IGNvdW50ID0gMVxuICAgICAgICAgICAgZW50ZXJvUmV2ZXJzZS5mb3JFYWNoKGZ1bmN0aW9uIChudW1lcm8sIGluZGV4KSB7XG5cdFx0XHRcdGlmIChjb3VudCA9PT0gMyAmJiAoaW5kZXgrMSkgPCBlbnRlcm9SZXZlcnNlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBlbnRlcm9Fc3BhY2lhZG8gPSBlc3BhY2lvICsgbnVtZXJvICsgZW50ZXJvRXNwYWNpYWRvXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ID0gMVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVudGVyb0VzcGFjaWFkbyA9IG51bWVybyArIGVudGVyb0VzcGFjaWFkb1xuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2VudGVyb0VzcGFjaWFkb30ke2RlY2ltYWwgPyAnLCcgOiAnJ30ke2RlY2ltYWwgPyBkZWNpbWFsIDogJyd9YFxuICAgIH0pXG59IiwiZXhwb3J0IGRlZmF1bHQgKHRleHRvLCB2YXJpYWJsZXMsIGlzVHV0b3JpYWwpID0+IHtcbiAgICB2YXIgcmVzdWx0ID0gdGV4dG8udG9TdHJpbmcoKS5yZXBsYWNlKC9cXCRbYS16XS9nLCBmdW5jdGlvbiAoY29pbmNpZGVuY2lhKSB7IC8vY29pbmNpZGVuY2lhID0+ICckYSdcbiAgICAgICAgZm9yICh2YXIgaW5kZXhWYXIgPSAwOyBpbmRleFZhciA8IHZhcmlhYmxlcy5sZW5ndGg7IGluZGV4VmFyKyspIHtcbiAgICAgICAgICAgIGlmICh2YXJpYWJsZXNbaW5kZXhWYXJdLnZhciA9PSBjb2luY2lkZW5jaWFbMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNUdXRvcmlhbCA/IHZhcmlhYmxlc1tpbmRleFZhcl0udnQgOiB2YXJpYWJsZXNbaW5kZXhWYXJdLnZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59IiwibGV0IHBhbGFicmFzID0ge1xuICAgIFwiMFwiOiBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sIC8vdW5pZGFkLCBwcmVmaWpvIHVuaWRhZCwgZGVjZW5hLCBjZW50ZW5hXG4gICAgXCIxXCI6IFtcInVub1wiLCBcIm9uXCIsIFwiZGllelwiLCBcImNpZW5cIl0sXG4gICAgXCIyXCI6IFtcImRvc1wiLCBcImRvXCIsIFwidmVpbnRlXCIsIFwiZG9zY2llbnRvc1wiXSxcbiAgICBcIjNcIjogW1widHJlc1wiLCBcInRyZVwiLCBcInRyZWludGFcIiwgXCJ0cmVzY2llbnRvc1wiXSxcbiAgICBcIjRcIjogW1wiY3VhdHJvXCIsIFwiY2F0b3JcIiwgXCJjdWFyZW50YVwiLCBcImN1YXRyb2NpZW50b3NcIl0sXG4gICAgXCI1XCI6IFtcImNpbmNvXCIsIFwicXVpblwiLCBcImNpbmN1ZW50YVwiLCBcInF1aW5pZW50b3NcIl0sXG4gICAgXCI2XCI6IFtcInNlaXNcIiwgXCJcIiwgXCJzZXNlbnRhXCIsIFwic2Vpc2NpZW50b3NcIl0sXG4gICAgXCI3XCI6IFtcInNpZXRlXCIsIFwiXCIsIFwic2V0ZW50YVwiLCBcInNldGVjaWVudG9zXCJdLFxuICAgIFwiOFwiOiBbXCJvY2hvXCIsIFwiXCIsIFwib2NoZW50YVwiLCBcIm9jaG9jaWVudG9zXCJdLFxuICAgIFwiOVwiOiBbXCJudWV2ZVwiLCBcIlwiLCBcIm5vdmVudGFcIiwgXCJub3ZlY2llbnRvc1wiXVxufTtcbmxldCByZWd1bGFyRXhwcmVzc2lvbiA9IHtcbiAgICBcIjBcIjogW1wiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCJdLFxuICAgIFwiMVwiOiBbXCJ1bm9cIiwgXCJvblwiLCBcImRpZVtzel1cIiwgXCJbY3N6XWllblwiXSxcbiAgICBcIjJcIjogW1wiZG9bc3pdXCIsIFwiZG9cIiwgXCJbdmJdZWludGVcIiwgXCJkb1tjc3pdezEsMn1pZW50b1tzel1cIl0sXG4gICAgXCIzXCI6IFtcInRyZVtzel1cIiwgXCJ0cmVcIiwgXCJ0cmVpbnRhXCIsIFwidHJlW3N6Y117MSwyfWllbnRvW3N6XVwiXSxcbiAgICBcIjRcIjogW1wiW2NrcV11YXRyb1wiLCBcIltja3FdYXRvclwiLCBcIltja3FddWFyZW50YVwiLCBcIltja3FddWF0cm9bc3pjXXsxLDJ9aWVudG9bc3pdXCJdLFxuICAgIFwiNVwiOiBbXCJbY3N6XWluW2NrXW9cIiwgXCIocXVpbnxraW4pXCIsIFwiW2Nzel1pbltjcWtddWVudGFcIiwgXCIocXVpbnxraW4paWVudG9bc3pdXCJdLFxuICAgIFwiNlwiOiBbXCJbc2N6XWVpW3N6XVwiLCBcIlwiLCBcIltzY3pdZVtzY3pdZW50YVwiLCBcIltzY3pdZWlbc2N6XXsxLDJ9aWVudG9bc3pdXCJdLFxuICAgIFwiN1wiOiBbXCJbc2N6XWlldGVcIiwgXCJcIiwgXCJbc2N6XWV0ZW50YVwiLCBcIltzY3pdZXRlW3N6Y117MSwyfWllbnRvW3N6XVwiXSxcbiAgICBcIjhcIjogW1wib1tzY11ob1wiLCBcIlwiLCBcIm9bc2NdaGVudGFcIiwgXCJvW3NjXWhvW3Njel17MSwyfWllbnRvW3N6XVwiXSxcbiAgICBcIjlcIjogW1wibnVlW3ZiXWVcIiwgXCJcIiwgXCJub1t2Yl1lbnRhXCIsIFwibm9bdmJdZVtzY3pdezEsMn1pZW50b1tzel1cIl1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChfd29yZCwgbnVtYmVyQXJyKSA9PiB7XG4gICAgbGV0IHVtaWwgPSBudW1iZXJBcnJbMF1cbiAgICBsZXQgY2VudGVuYSA9IG51bWJlckFyclsxXVxuICAgIGxldCBkZWNlbmEgPSBudW1iZXJBcnJbMl1cbiAgICBsZXQgdW5pZGFkID0gbnVtYmVyQXJyWzNdXG4gICAgbGV0IHdvcmQgPSBfd29yZC50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICBsZXQgcmd4ID0gJydcbiAgICBpZiAodW5pZGFkID4gMCkge1xuICAgICAgICAvL3VubywgZG9zLCB0cmVzLi4uXG4gICAgICAgIGlmIChkZWNlbmEgPT0gMCkge1xuICAgICAgICAgICAgcmd4ID0gcmVndWxhckV4cHJlc3Npb25bdW5pZGFkXVswXTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWNlbmEgPT0gMSkge1xuICAgICAgICAgICAgLy9vbmNlIGRvY2UsIHRyZWNlLCBjYXRvcmNlLCBxdWluY2VcbiAgICAgICAgICAgIGlmICh1bmlkYWQgPiAwICYmIHVuaWRhZCA8IDYpIHtcbiAgICAgICAgICAgICAgICByZ3ggPSByZWd1bGFyRXhwcmVzc2lvblt1bmlkYWRdWzFdICsgXCJbc2N6XWVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGllY2lzZWlzLCBkaWVjaXNpZXRlLCBkaWVjaW9jaG8sIGRpZWNpbnVldmVcbiAgICAgICAgICAgIGVsc2UgaWYgKHVuaWRhZCA+PSA2KSB7XG4gICAgICAgICAgICAgICAgcmd4ID0gXCJkaWVbY3N6XWlcIiArIHJlZ3VsYXJFeHByZXNzaW9uW3VuaWRhZF1bMF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL3ZlaW5pdHVubywgdmVpbnRpZG9zLCB2ZWludGl0cmVzLi4uLlxuICAgICAgICBlbHNlIGlmIChkZWNlbmEgPT0gMikge1xuICAgICAgICAgICAgcmd4ID0gXCJbdmJdZWludGlcIiArIHJlZ3VsYXJFeHByZXNzaW9uW3VuaWRhZF1bMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHJlaW50YSB5IHVubywgY3VhcmVudGEgeSBkb3MsIGNpbmN1ZW50YSB5IHRyZXMuLi5cbiAgICAgICAgZWxzZSBpZiAoZGVjZW5hID4gMikge1xuICAgICAgICAgICAgcmd4ID0gcmVndWxhckV4cHJlc3Npb25bZGVjZW5hXVsyXSArIFwiIHkgXCIgKyByZWd1bGFyRXhwcmVzc2lvblt1bmlkYWRdWzBdXG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHVuaWRhZCA9PSAwKSB7XG4gICAgICAgIC8vdmVpbnRlLCB0cmVpbnRhLCBjdWFyZW50YS4uLlxuICAgICAgICBpZiAoZGVjZW5hID4gMCkge1xuICAgICAgICAgICAgcmd4ID0gcmVndWxhckV4cHJlc3Npb25bZGVjZW5hXVsyXVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vY2llbiwgZG9zY2llbnRvcywgdHJlc2NpZW50b3MuLi5cbiAgICBpZiAoY2VudGVuYSA+IDApIHtcbiAgICAgICAgaWYgKGNlbnRlbmEgPT0gMSkge1xuICAgICAgICAgICAgaWYgKGRlY2VuYSA9PSAwICYmIHVuaWRhZCA9PSAwKSByZ3ggPSByZWd1bGFyRXhwcmVzc2lvbltjZW50ZW5hXVszXSArIFwiIFwiICsgcmd4O1xuICAgICAgICAgICAgaWYgKGRlY2VuYSAhPSAwIHx8IHVuaWRhZCAhPSAwKSByZ3ggPSBcIltzemNdaWVudG8gXCIgKyByZ3hcbiAgICAgICAgfSBlbHNlIGlmIChjZW50ZW5hID4gMSkge1xuICAgICAgICAgICAgcmd4ID0gcmVndWxhckV4cHJlc3Npb25bY2VudGVuYV1bM10gKyBcIiBcIiArIHJneDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL21pbCwgZG9zIG1pbCwgdHJlcyBtaWxcbiAgICBpZiAodW1pbCA9PSAxKSByZ3ggPSBcIm1pbCBcIiArIHJneDtcbiAgICBlbHNlIGlmICh1bWlsID4gMSkgcmd4ID0gcmVndWxhckV4cHJlc3Npb25bdW1pbF1bMF0gKyBcIiBtaWwgXCIgKyByZ3g7XG5cbiAgICByZ3ggPSByZ3gudHJpbSgpO1xuICAgIHJneCA9IHJneC5yZXBsYWNlKC9eLywgJ14nKVxuICAgIHJneCA9IHJneCArICckJ1xuICAgIGxldCBuZXdSZ3ggPSBuZXcgUmVnRXhwKHJneCk7XG4gICAgcmV0dXJuIG5ld1JneC50ZXN0KHdvcmQpXG59IiwiaW1wb3J0IHsgdGlwbyB9IGZyb20gJy4vVmFyaWFibGVzJ1xuXG5leHBvcnQgY29uc3QgY29udGludWFyRWplcmNpY2lvID0gKCkgPT4ge1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuQ29udGludWFyJykub25jbGljayA9ICgpID0+IGZhbHNlXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjaycpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrIHNwYW4nKS5pbm5lckhUTUwgPSAnJ1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmVlZGJhY2sgcCcpLmlubmVySFRNTCA9ICcnXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjayBpbWcnKS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcnKVxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmVlZGJhY2snKS5jbGFzc0xpc3QucmVtb3ZlKCdmZWVkYmFjay1pbmNvcnJlY3RvJylcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9vdGVyJykuc3R5bGUuZGlzcGxheSA9ICdncmlkJ1xuICBcbiAgaWYgKHRpcG8gPT09ICdzZWxlY2Npb24gbXVsdGlwbGUnKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1yYWRpb106Y2hlY2tlZCcpLmNoZWNrZWQgPSBmYWxzZVxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdhbnN3ZXInKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlucHV0LmRpc2FibGVkID0gZmFsc2VcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9dGV4dF0uaW5wdXRUZXh0by1pbmNvcnJlY3RvJykuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICBpbnB1dC5kaXNhYmxlZCA9IGZhbHNlXG4gICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdpbnB1dFRleHRvLWluY29ycmVjdG8nKVxuICAgICAgaW5wdXQudmFsdWUgPSAnJ1xuICAgIH0pXG4gIH1cbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJleHBvcnQgZGVmYXVsdCB0ZXh0ID0+IHtcbiAgICB2YXIgcmVzdWx0ID0gdGV4dC5yZXBsYWNlKC9cXC9cXFsuKj9cXC9cXF0vZywgZnVuY3Rpb24gKGNvaW5jaWRlbmNpYSkgeyAvL2NvaW5jaWRlbmNpYSA9PiAnL1tmdW5jaW9uKCkvXSdcbiAgICAgICAgdmFyIGZpbmFsID0gY29pbmNpZGVuY2lhLmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBmdW5jaW9uID0gY29pbmNpZGVuY2lhLnN1YnN0cigyLCBmaW5hbCkucmVwbGFjZSgvJmd0Oy9nLCAnPicpLnJlcGxhY2UoLyZsdDsvLCAnPCcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGV2YWwoZnVuY2lvbilcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgY29uc29sZS5sb2coZnVuY2lvbilcbiAgICAgICAgICAgIHJldHVybiBjb2luY2lkZW5jaWE7XG4gICAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZyYWMoZW50ZXJvLCBudW1lcmFkb3IsIGRlbm9taW5hZG9yKSB7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cXFxcXCJlcVxcXFxcIj4ke2VudGVybyA/IGA8c3BhbiBjbGFzcz1cXFxcXCJpbnRlZ2VyXFxcXFwiPiR7ZW50ZXJvfTwvc3Bhbj5gIDogJyd9PHNwYW4gY2xhc3M9XFxcXFwiZnJhY3Rpb25cXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwiZnVwXFxcXFwiPiZuYnNwOyR7bnVtZXJhZG9yfSZuYnNwOzwvc3Bhbj48c3BhbiBjbGFzcz1cXFxcXCJiYXJcXFxcXCI+Lzwvc3Bhbj48c3BhbiBjbGFzcz1cXFxcXCJmZG5cXFxcXCI+Jm5ic3A7JHtkZW5vbWluYWRvcn0mbmJzcDs8L3NwYW4+PC9zcGFuPjwvc3Bhbj5gXG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUoYSkge1xuICAgIHJldHVybiBhLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSlcbn0iLCJpbXBvcnQge1xuICBudW1lcm9JbnRlbnRvLFxuICBzaWd1aWVudGVJbnRlbnRvLFxuICB2YWxpZGFjaW9uZXMsXG4gIHRpcG8sXG4gIHRtcFByb2dyZXNvLFxuICBzcmNJbWdSZXNwdWVzdGFDb3JyZWN0YSxcbiAgc3JjSW1nUmVzcHVlc3RhSW5jb3JyZWN0YSxcbiAgc3JjSW1nR2xvc2EsIFxuICBmZWVkUG9zaXRpdm9zLFxuICBmZWVkTmVnYXRpdm9zXG59IGZyb20gXCIuL1ZhcmlhYmxlc1wiO1xuaW1wb3J0IHsgdmFsaWRhUmVzcHVlc3RhIH0gZnJvbSBcIi4vVmFsaWRhUmVzcHVlc3RhXCI7XG5pbXBvcnQgeyBjb250aW51YXJFamVyY2ljaW8gfSBmcm9tIFwiLi9Db250aW51YXJFamVyY2ljaW9cIjtcbmltcG9ydCBGb3JtYXRlYU51bWVyb3MgZnJvbSBcIi4uL3V0aWxzL0Zvcm1hdGVhTnVtZXJvc1wiXG5cbmV4cG9ydCBjb25zdCBoYW5kbGVSZXNwdWVzdGEgPSAoKSA9PiB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJmb290ZXJcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blJlc3BvbmRlclwiKS5kaXNhYmxlZCA9IHRydWU7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwiYW5zd2VyXCIpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgIGlucHV0LmRpc2FibGVkID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCB7IGZlZWRiYWNrLCBlcnJvckZyZWN1ZW50ZSB9ID0gdmFsaWRhUmVzcHVlc3RhKHZhbGlkYWNpb25lcywgdGlwbyk7XG4gIGxldCBmZWVkYmFja0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZlZWRiYWNrXCIpO1xuICBsZXQgZmVlZGJhY2tTdHJvbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZlZWRiYWNrIHNwYW5cIik7XG4gIGxldCBmZWVkYmFja1RleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZlZWRiYWNrIHBcIik7XG4gIGxldCBpbWdGZWVkYmFjayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmVlZGJhY2sgaW1nXCIpO1xuICBpZiAoIWVycm9yRnJlY3VlbnRlKSB7XG4gICAgLy9yZXNwdWVzdGEgY29ycmVjdGFcbiAgICBmZWVkYmFja0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBmZWVkYmFja0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImZlZWRiYWNrLWNvcnJlY3RvXCIpO1xuICAgIGZlZWRiYWNrU3Ryb25nLmlubmVySFRNTCA9IGZlZWRSYW5kb21JbmRleCh0cnVlKTtcbiAgICBsZXQgcmFjaGEgPSByYWNoYUNvcnJlY3RhcygpO1xuICAgIGlmIChyYWNoYSkge1xuICAgICAgZmVlZGJhY2tUZXh0LmlubmVySFRNTCA9IGBUaWVuZXMgdW5hIHJhY2hhIGRlIDxiPiR7cmFjaGFDb3JyZWN0YXMoKX08L2I+IHJlc3B1ZXN0YXMgY29ycmVjdGFzLmA7XG4gICAgfVxuICAgIGltZ0ZlZWRiYWNrLnNldEF0dHJpYnV0ZShcbiAgICAgIFwic3JjXCIsXG4gICAgICBzcmNJbWdSZXNwdWVzdGFDb3JyZWN0YVtpbWdSYW5kb21JbmRleCh0cnVlKV1cbiAgICApO1xuICAgIG51bWVyb0ludGVudG8gPT09IDIgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5Db250aW51YXJcIikucmVtb3ZlRXZlbnRMaXN0ZW5lciAoXCJjbGlja1wiLCBjb250aW51YXJFamVyY2ljaW8pOy8vc2kgZXMgcXVlIGVzIGVsIHNlZ3VuZG8gaW50ZW50b1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuQ29udGludWFyXCIpLnNldEF0dHJpYnV0ZShcIm9uQ2xpY2tcIiwgXCJjZXJyYXJGZWVkKCk7XCIpO1xuICB9IGVsc2Uge1xuICAgIC8vcmVzcHVlc3RhIGluY29ycmVjdGFcbiAgICBpZiAobnVtZXJvSW50ZW50byA9PT0gMSkge1xuICAgICAgaW1nRmVlZGJhY2suc2V0QXR0cmlidXRlKFxuICAgICAgICBcInNyY1wiLFxuICAgICAgICBzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhW2ltZ1JhbmRvbUluZGV4KGZhbHNlKV1cbiAgICAgICk7XG4gICAgICBmZWVkYmFja0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGZlZWRiYWNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZmVlZGJhY2staW5jb3JyZWN0b1wiKTtcbiAgICAgIGZlZWRiYWNrU3Ryb25nLmlubmVySFRNTCA9IGZlZWRSYW5kb21JbmRleChmYWxzZSk7XG4gICAgICBmZWVkYmFja1RleHQuaW5uZXJIVE1MID0gRm9ybWF0ZWFOdW1lcm9zKGZlZWRiYWNrLCAnJm5ic3A7Jyk7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bkNvbnRpbnVhclwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY29udGludWFyRWplcmNpY2lvKTtcbiAgICAgIHNpZ3VpZW50ZUludGVudG8oKTtcbiAgICAgIHdpbmRvdy5NYXRoSmF4ICYmIE1hdGhKYXguSHViLlF1ZXVlKFtcIlR5cGVzZXRcIiwgTWF0aEpheC5IdWJdKSAvL211ZXN0cmEgZWwgbWF0aGpheCBlbiBsb3MgZmVlZGJhY2tzIGVuIGNhc28gZGUgcXVlIGV4aXN0YW5cbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnRcbiAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiaW1hZ2VuR2xvc2FcIilcbiAgICAgICAgLnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBcInNyY1wiLFxuICAgICAgICAgIHNyY0ltZ0dsb3NhW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNyY0ltZ0dsb3NhLmxlbmd0aCldXG4gICAgICAgICk7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdsb3NhXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgfVxuICB9XG4gIGV2YWwoYGVudmlhcigke2Vycm9yRnJlY3VlbnRlID09IG51bGx9LCAke2Vycm9yRnJlY3VlbnRlID09IG51bGwgPyBlcnJvckZyZWN1ZW50ZSA6ICdcIicrZXJyb3JGcmVjdWVudGUrICdcIid9KWApXG59O1xuXG5jb25zdCBpbWdSYW5kb21JbmRleCA9IGVzQ29ycmVjdGEgPT4ge1xuICBpZiAoZXNDb3JyZWN0YSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcmNJbWdSZXNwdWVzdGFDb3JyZWN0YS5sZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhLmxlbmd0aCk7XG4gIH1cbn07XG5cbmNvbnN0IGZlZWRSYW5kb21JbmRleCA9IGVzQ29ycmVjdGEgPT4ge1xuICBpZihlc0NvcnJlY3RhKSB7XG4gICAgcmV0dXJuIGZlZWRQb3NpdGl2b3NbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZmVlZFBvc2l0aXZvcy5sZW5ndGgpXVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmZWVkTmVnYXRpdm9zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGZlZWROZWdhdGl2b3MubGVuZ3RoKV1cbiAgfVxufVxuXG5jb25zdCByYWNoYUNvcnJlY3RhcyA9ICgpID0+IHtcbiAgdmFyIGNvcnJlY3RvcyA9IDA7XG4gIGZvciAodmFyIGkgPSB0bXBQcm9ncmVzby5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgIGlmICh0bXBQcm9ncmVzb1tpXS5jb3JyZWN0bykge1xuICAgICAgY29ycmVjdG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29ycmVjdG9zICsgMSA+IDEgPyBjb3JyZWN0b3MgKyAxIDogbnVsbDtcbn07XG4iLCJpbXBvcnQgRm9ybWF0ZWFOdW1lcm9zIGZyb20gJy4uL3V0aWxzL0Zvcm1hdGVhTnVtZXJvcydcbmltcG9ydCBWYWxpZGFOdW1lcm9Fc2NyaXRvIGZyb20gJy4uL3V0aWxzL1ZhbGlkYU51bWVyb0VzY3JpdG8nXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi9WYXJpYWJsZXMnXG5pbXBvcnQgUmVlbXBsYXphVmFyaWFibGVzIGZyb20gJy4uL3V0aWxzL1JlZW1wbGF6YVZhcmlhYmxlcydcblxuZXhwb3J0IGNvbnN0IHZhbGlkYVJlc3B1ZXN0YSA9ICh2YWxpZGFjaW9uZXMsIHRpcG8pID0+IHtcblx0bGV0IGZlZWRiYWNrLCBlcnJvckZyZWN1ZW50ZVxuXHRpZih0aXBvID09PSAnc2VsZWNjaW9uIG11bHRpcGxlJykge1xuICAgICAgICBsZXQgcmVzcHVlc3RhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1yYWRpb106Y2hlY2tlZCcpLnZhbHVlXG5cdFx0Zm9yKGxldCB2YWxpZGFjaW9uIG9mIHZhbGlkYWNpb25lcykge1xuXHRcdFx0aWYocmVzcHVlc3RhID09IHZhbGlkYWNpb24ub3BjaW9uKSB7XG5cdFx0XHRcdGZlZWRiYWNrID0gdmFsaWRhY2lvbi5mZWVkYmFja1xuXHRcdFx0XHRlcnJvckZyZWN1ZW50ZSA9IHZhbGlkYWNpb24uZXJyb3JGcmVjdWVudGVcblx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHsgZmVlZGJhY2ssIGVycm9yRnJlY3VlbnRlIH1cblx0fSBlbHNlIGlmICh0aXBvID09PSAncmVzcHVlc3RhIGJyZXZlJykge1xuXHRcdGNvbnN0IHsgcmVzcHVlc3RhcywgZXJyRnJlY0RlZmVjdG8sIGZlZWRiYWNrRGVmZWN0byB9ID0gdmFsaWRhY2lvbmVzXG5cdFx0Zm9yIChsZXQgcmVzcHVlc3RhIG9mIHJlc3B1ZXN0YXMpIHtcblx0XHRcdGxldCBjb2luY2lkZW5Ub2RhcyA9IHRydWVcblx0XHRcdHJlc3B1ZXN0YS52YWxpZGFjaW9uZXMuZm9yRWFjaChmdW5jdGlvbih2YWwsIGluZGV4KSB7XG5cdFx0XHRcdGxldCBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHZhbC5pbnB1dElkKTtcblx0XHRcdFx0bGV0IHRpcG9JbnB1dCA9IGlucHV0LmdldEF0dHJpYnV0ZSgnZGF0YS10aXBvaW5wdXQnKVxuXHRcdFx0XHRzd2l0Y2ggKHRpcG9JbnB1dCkge1xuXHRcdFx0XHRcdGNhc2UgJ251bWVybyc6XG5cdFx0XHRcdFx0XHRpZiAoaW5wdXQudmFsdWUucmVwbGFjZSgvXFxzL2csICcnKSAhPT0gdmFsLnZhbG9yICYmIHZhbC52YWxvciAhPT0gJy1hbnktJykge1xuXHRcdFx0XHRcdFx0XHRjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkZWNpbWFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZS5yZXBsYWNlKC9cXHMvZywgJycpLnJlcGxhY2UoJywnLCcuJykgIT09IHZhbC52YWxvciAmJiB2YWwudmFsb3IgIT09ICctYW55LScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZXh0by1udW1lcmljbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtYmVyQXJyID0gU3RyaW5nKHZhbC52YWxvcikucGFkU3RhcnQoNCwgJzAnKS5zcGxpdCgnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKFZhbGlkYU51bWVyb0VzY3JpdG8oaW5wdXQudmFsdWUudHJpbSgpLCBudW1iZXJBcnIpKSAmJiB2YWwudmFsb3IgIT09ICctYW55LScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZXh0byc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihTdHJpbmcoaW5wdXQudmFsdWUpLnRyaW0oKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIT09IFN0cmluZyh2YWwudmFsb3IpLnRvTG93ZXJDYXNlKCkubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB2YWwudmFsb3IgIT09ICctYW55LScpIFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvaW5jaWRlblRvZGFzID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FsZmFudW1lcmljbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihTdHJpbmcoaW5wdXQudmFsdWUpLnRyaW0oKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIT09IFN0cmluZyh2YWwudmFsb3IpLnRvTG93ZXJDYXNlKCkubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB2YWwudmFsb3IgIT09ICctYW55LScpIFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvaW5jaWRlblRvZGFzID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbXBhcmFjaW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlucHV0LnZhbHVlICE9PSB2YWwudmFsb3IgJiYgdmFsLnZhbG9yICE9PSAnLWFueS0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29pbmNpZGVuVG9kYXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcblx0XHRcdFx0fVxuICAgICAgICAgICAgfSlcblx0XHRcdGlmIChjb2luY2lkZW5Ub2Rhcykge1xuXHRcdFx0XHRmZWVkYmFjayA9IEZvcm1hdGVhTnVtZXJvcyhyZXNwdWVzdGEuZmVlZGJhY2ssICcmbmJzcDsnKVxuXHRcdFx0XHRlcnJvckZyZWN1ZW50ZSA9IHJlc3B1ZXN0YS5lcnJGcmVjXG5cdFx0XHRcdGlmIChlcnJvckZyZWN1ZW50ZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvbG9yZWFJbnB1dHNUZXh0b1BvckNvaW5jaWRlbmNpYShyZXNwdWVzdGEpIC8vY29sb3JlYXIgaW5wdXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT0nYW5zd2VyJ11cIikuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJylcbiAgICAgICAgICAgICAgICAgICAgfSlcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFmZWVkYmFjaykge1xuXHRcdFx0ZmVlZGJhY2sgPSBGb3JtYXRlYU51bWVyb3MoZmVlZGJhY2tEZWZlY3RvLCAnJm5ic3A7Jylcblx0XHRcdGVycm9yRnJlY3VlbnRlID0gZXJyRnJlY0RlZmVjdG9cblx0XHRcdHZhciBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT0nYW5zd2VyJ11cIik7XG5cdFx0XHRmb3IgKHZhciBpbnB1dCBvZiBpbnB1dHMpIHtcblx0XHRcdCAgICBjb2xvcmVhSW5wdXRUZXh0b1BvckRlZmVjdG8oaW5wdXQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4geyBmZWVkYmFjaywgZXJyb3JGcmVjdWVudGUgfVxuXHR9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IHJlc3B1ZXN0YXMsIGVyckZyZWNEZWZlY3RvLCBmZWVkYmFja0RlZmVjdG8gfSA9IHZhbGlkYWNpb25lc1xuICAgICAgICBmb3IobGV0IHJlc3Agb2YgcmVzcHVlc3Rhcykge1xuICAgICAgICAgICAgbGV0IGV2YWx1YWNpb24gPSByZXNwLm9wY2lvbi5yZXBsYWNlKC9pbnB1dFxcZC9nLCBjb2luY2lkZW5jaWEgPT4gTnVtYmVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvaW5jaWRlbmNpYSkudmFsdWUucmVwbGFjZSgnLCcsICcuJykucmVwbGFjZSgvXFxzLywgJycpKSlcbiAgICAgICAgICAgIGlmKGV2YWwoZXZhbHVhY2lvbikpIHtcbiAgICAgICAgICAgICAgICBmZWVkYmFjayA9IHJlc3AuZmVlZGJhY2tcblx0XHRcdFx0ZXJyb3JGcmVjdWVudGUgPSByZXNwLmVycm9yRnJlY3VlbnRlXG5cdFx0XHRcdGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoIWZlZWRiYWNrKSB7XG4gICAgICAgICAgICBmZWVkYmFjayA9IEZvcm1hdGVhTnVtZXJvcyhmZWVkYmFja0RlZmVjdG8sICcmbmJzcDsnKVxuICAgICAgICAgICAgZXJyb3JGcmVjdWVudGUgPSBlcnJGcmVjRGVmZWN0b1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9J2Fuc3dlciddXCIpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8taW5jb3JyZWN0bycpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9J2Fuc3dlciddXCIpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8tY29ycmVjdG8nKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBmZWVkYmFjaywgZXJyb3JGcmVjdWVudGUgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY29sb3JlYUlucHV0VGV4dG9Qb3JEZWZlY3RvKGlucHV0RWxlbWVudCkge1xuICAgIGxldCB0aXBvSW5wdXQgPSBpbnB1dEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcG9pbnB1dCcpXG4gICAgbGV0IGNvcnJlY3RhcyA9IEJ1ZmZlci5mcm9tKGlucHV0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpLCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0Zi04JylcbiAgICBjb3JyZWN0YXMgPSBSZWVtcGxhemFWYXJpYWJsZXMoY29ycmVjdGFzLCB2ZXJzaW9uLnZhcnMsIGZhbHNlKVxuICAgIGxldCBtYXRjaCA9IGZhbHNlLCByZXNwO1xuICAgIHN3aXRjaCAodGlwb0lucHV0KSB7XG4gICAgICAgIGNhc2UgJ251bWVybyc6XG4gICAgICAgICAgICByZXNwID0gaW5wdXRFbGVtZW50LnZhbHVlLnJlcGxhY2UoL1xccy9nLCAnJylcbiAgICAgICAgICAgIGNvcnJlY3Rhcy5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24oY29ycmVjdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcCA9PT0gY29ycmVjdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8tY29ycmVjdG8nKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdkZWNpbWFsJzpcbiAgICAgICAgICAgIHJlc3AgPSBpbnB1dEVsZW1lbnQudmFsdWUucmVwbGFjZSgvXFxzL2csICcnKS5yZXBsYWNlKCcsJywgJy4nKVxuICAgICAgICAgICAgY29ycmVjdGFzLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwID09PSBjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpO1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3RleHRvLW51bWVyaWNvJzpcbiAgICAgICAgICAgIHJlc3AgPSBpbnB1dEVsZW1lbnQudmFsdWVcbiAgICAgICAgICAgIGNvcnJlY3Rhcy5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24oY29ycmVjdGEpIHtcbiAgICAgICAgICAgICAgICBsZXQgbnVtYmVyQXJyID0gY29ycmVjdGEubGVuZ3RoID09PSAzID8gKCcwJyArIGNvcnJlY3RhKS5zcGxpdCgnJykgOiBjb3JyZWN0YS5zcGxpdCgnJylcbiAgICAgICAgICAgICAgICBpZiAoVmFsaWRhTnVtZXJvRXNjcml0byhyZXNwLCBudW1iZXJBcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJylcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3RleHRvJzpcbiAgICAgICAgICAgIHJlc3AgPSBpbnB1dEVsZW1lbnQudmFsdWVcbiAgICAgICAgICAgIGNvcnJlY3Rhcy5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24oY29ycmVjdGEpIHtcbiAgICAgICAgICAgICAgICBpZihTdHJpbmcocmVzcCkudHJpbSgpLnRvTG93ZXJDYXNlKCkubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKSBcbiAgICAgICAgICAgICAgICAgICAgPT09IFN0cmluZyhjb3JyZWN0YSkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpKSBcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJylcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2FsZmFudW1lcmljbyc6XG4gICAgICAgICAgICByZXNwID0gaW5wdXRFbGVtZW50LnZhbHVlXG4gICAgICAgICAgICBjb3JyZWN0YXMuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uKGNvcnJlY3RhKSB7XG4gICAgICAgICAgICAgICAgaWYoU3RyaW5nKHJlc3ApLnRyaW0oKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikgXG4gICAgICAgICAgICAgICAgICAgID09PSBTdHJpbmcoY29ycmVjdGEpLnRvTG93ZXJDYXNlKCkubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKSkgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWluY29ycmVjdG8nKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY29sb3JlYUlucHV0c1RleHRvUG9yQ29pbmNpZGVuY2lhKGNvaW5jaWRlbmNpYSkgeyAvLyBjb2xvcmVhIGlucHV0cyBkZSBhY3VlcmRvIGEgXG4gICAgbGV0IHsgdmFsaWRhY2lvbmVzIH0gPSBjb2luY2lkZW5jaWFcbiAgICB2YWxpZGFjaW9uZXMuZm9yRWFjaChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgbGV0IHsgY29sb3IsIGlucHV0SWQgfSA9IHZhbFxuICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnB1dElkKVxuICAgICAgICBpZiAoY29sb3IgPT09ICdvaycpIHtcbiAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8tY29ycmVjdG8nKVxuICAgICAgICB9IGVsc2UgaWYgKGNvbG9yID09PSAnYmFkJykge1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1pbmNvcnJlY3RvJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZS5yZXBsYWNlKC9cXHMvZywgJycpID09IGNvbG9yLmNvcnJlY3RhKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8taW5jb3JyZWN0bycpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufSIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsImltcG9ydCB7IHRtcFRvdGFsLCB0bXBQcm9ncmVzbyB9IGZyb20gJy4vVmFyaWFibGVzJ1xuXG5leHBvcnQgY29uc3QgYmFycmFEZVByb2dyZXNvID0gKCkgPT4ge1xuXHRsZXQgYW5jaG9CYXJyYSA9IDI1MDsvLzI1NCBwYXJhIGVsIGVzcGFjaW8gZGVsIG1hcmdlblxuXHRsZXQgc3ZnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzYmFyJylcblx0bGV0IHNlcGFyYWNpb24gPSBhbmNob0JhcnJhIC8gKHRtcFRvdGFsICsgMSlcblx0bGV0IGJvcmRlQmFycmEgPSBjcmVhckVsZW1lbnRvKCdyZWN0Jywge1xuXHRcdHg6IDIsXG5cdFx0eTogMixcblx0XHR3aWR0aDogYW5jaG9CYXJyYSxcblx0XHRoZWlnaHQ6IDMyLFxuXHRcdGZpbGw6ICdub25lJyxcblx0XHRzdHJva2U6ICcjQ0NDQkNCJyxcblx0XHRzdHJva2VXaWR0aDogJzEnLFxuXHRcdHJ4OiA1LFxuXHRcdHJ5OiA1XG5cdH0pXG5cdHN2Zy5hcHBlbmRDaGlsZChib3JkZUJhcnJhKVxuXG5cdGxldCBhbmNob0xpbmVhID0gTnVtYmVyKGFuY2hvQmFycmEgLSAoc2VwYXJhY2lvbiAqIDIpKVxuXHRsZXQgbGluZWFCYXJyYSA9IGNyZWFyRWxlbWVudG8oJ3JlY3QnLCB7XG5cdFx0eDogc2VwYXJhY2lvbixcblx0XHR5OiAxNyxcblx0XHR3aWR0aDogYW5jaG9MaW5lYSxcblx0XHRoZWlnaHQ6IDIsXG5cdFx0ZmlsbDogJyNFN0U1RTUnLFxuXHRcdHJ4OiAyLFxuXHRcdHJ5OiAyXG5cdH0pO1xuXHRzdmcuYXBwZW5kQ2hpbGQobGluZWFCYXJyYSlcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRtcFRvdGFsOyBpKyspIHtcblx0XHRsZXQgY29sb3JDaXJjdWxvLCByQ2lyY2xlO1xuXHRcdGlmICh0bXBQcm9ncmVzby5sZW5ndGggPiBpKSB7XG5cdFx0XHRyQ2lyY2xlID0gNDtcblx0XHRcdGlmICh0bXBQcm9ncmVzb1tpXS5jb3JyZWN0bykge1xuXHRcdFx0XHRjb2xvckNpcmN1bG8gPSB0bXBQcm9ncmVzb1tpXS5OVU1FUk9JTlRFTlRPUyA9PT0gMSA/ICcjMDBBQzREJyA6ICcjRTJDMDREJ1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29sb3JDaXJjdWxvID0gJyNFMjRCNEEnXG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0bXBQcm9ncmVzby5sZW5ndGggPT09IGkpIHtcblx0XHRcdHJDaXJjbGUgPSA4XG5cdFx0XHRjb2xvckNpcmN1bG8gPSAnIzEyODBCMSdcblx0XHR9IGVsc2Uge1xuXHRcdFx0ckNpcmNsZSA9IDRcblx0XHRcdGNvbG9yQ2lyY3VsbyA9ICcjQ0NDQkNCJ1xuXHRcdH1cblx0XHRsZXQgY3hDaXJjbGUgPSBzZXBhcmFjaW9uICogKGkgKyAxKSArIDI7XG5cdFx0bGV0IGNpcmNsZSA9IGNyZWFyRWxlbWVudG8oJ2NpcmNsZScsIHtcblx0XHRcdGN4OiBjeENpcmNsZSxcblx0XHRcdGN5OiAxOCxcblx0XHRcdHI6IHJDaXJjbGUsXG5cdFx0XHRmaWxsOiBjb2xvckNpcmN1bG8sXG5cdFx0XHRzdHJva2U6ICdub25lJ1xuXHRcdH0pXG5cdFx0c3ZnLmFwcGVuZENoaWxkKGNpcmNsZSk7XG5cdFx0aWYgKHRtcFByb2dyZXNvLmxlbmd0aCA9PT0gaSkge1xuXHRcdFx0bGV0IHRleHRQb3NpY2lvbiA9IGNyZWFyRWxlbWVudG8oJ3RleHQnLCB7XG5cdFx0XHRcdHg6IGN4Q2lyY2xlLFxuXHRcdFx0XHR5OiAyMixcblx0XHRcdFx0Zm9udEZhbWlseTogJ3NhbnMtc2VyaWYnLFxuXHRcdFx0XHRmb250U2l6ZTogJzExcHgnLFxuXHRcdFx0XHR0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcblx0XHRcdFx0ZmlsbDogJ3doaXRlJ1xuXHRcdFx0fSlcblx0XHRcdHRleHRQb3NpY2lvbi50ZXh0Q29udGVudCA9IHRtcFByb2dyZXNvLmxlbmd0aCArIDFcblx0XHRcdHN2Zy5hcHBlbmRDaGlsZCh0ZXh0UG9zaWNpb24pXG5cdFx0fVxuXHR9XG59XG5cbmNvbnN0IGNyZWFyRWxlbWVudG8gPSAobm9tYnJlLCBhdHJpYnV0b3MpID0+IHtcbiAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIG5vbWJyZSlcbiAgICBmb3IgKGxldCBwIGluIGF0cmlidXRvcykge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIHAucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24gKG0sIHAsIG8sIHMpIHtcbiAgICAgICAgICAgIHJldHVybiBcIi1cIiArIG0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSksIGF0cmlidXRvc1twXSlcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRcbn0iLCJpbXBvcnQgeyBiYXJyYURlUHJvZ3Jlc28gfSBmcm9tICcuL2Z1bmNpb25lcy9CYXJyYVByb2dyZXNvJ1xuaW1wb3J0IHsgaGFuZGxlUmVzcHVlc3RhIH0gZnJvbSAnLi9mdW5jaW9uZXMvSGFuZGxlUmVzcHVlc3RhJ1xuXG5iYXJyYURlUHJvZ3Jlc28oKVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuUmVzcG9uZGVyJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVSZXNwdWVzdGEpIl0sInNvdXJjZVJvb3QiOiIifQ==