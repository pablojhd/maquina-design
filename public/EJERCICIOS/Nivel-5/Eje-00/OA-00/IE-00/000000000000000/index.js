!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=14)}([function(e,t,r){"use strict";(function(e){r.d(t,"k",(function(){return h})),r.d(t,"h",(function(){return _})),r.d(t,"c",(function(){return d})),r.d(t,"d",(function(){return p})),r.d(t,"f",(function(){return n})),r.d(t,"g",(function(){return o})),r.d(t,"e",(function(){return i})),r.d(t,"i",(function(){return a})),r.d(t,"j",(function(){return s})),r.d(t,"b",(function(){return y})),r.d(t,"a",(function(){return b}));var n,o,i,a,s,u=r(5),c=r(6),f=document.body.dataset.id,l=JSON.parse(document.body.dataset.version.replace(/'/g,'"')),h=JSON.parse(Object(c.a)(Object(u.a)(e(document.body.dataset.x,"base64").toString("utf8"),l.vars,!1))),_=document.body.dataset.tipoejercicio,d=parseInt(document.getElementById("hiddenIntento").value)||1,p=function(){d++};switch(document.getElementById("hiddenIntento").addEventListener("change",(function(e){d=parseInt(e.target.value)})),f.substr(2,2)){case"00":case"01":n=["../../../../imagenes_front/Mascotas_Eje1/Eje1_CorrectFeedback_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_CorrectFeedback_Pato.svg"],o=["../../../../imagenes_front/Mascotas_Eje1/Eje1_MistakeFeedback_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_MistakeFeedback_Pato.svg"],i=["../../../../imagenes_front/Mascotas_Eje1/Eje1_Glosa_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_Glosa_Pato.svg"];break;case"02":n=["../../../../imagenes_front/Mascotas_Eje2/Eje2_CorrectFeedback_Alce.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_CorrectFeedback_Zorro.svg"],o=["../../../../imagenes_front/Mascotas_Eje2/Eje2_MistakeFeedback_Alce.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_MistakeFeedback_Zorro.svg"],i=["../../../../imagenes_front/Mascotas_Eje2/Eje2_Glosa_Zorro.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_Glosa_Alce.svg"];break;case"03":n=["../../../../imagenes_front/Mascotas_Eje3/Eje3_CorrectFeedback_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_CorrectFeedback_Tigre.svg"],o=["../../../../imagenes_front/Mascotas_Eje3/Eje3_MistakeFeedback_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_MistakeFeedback_Tigre.svg"],i=["../../../../imagenes_front/Mascotas_Eje3/Eje3_Glosa_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_Glosa_Tigre.svg"];break;case"04":n=["../../../../imagenes_front/Mascotas_Eje4/Eje4_CorrectFeedback_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_CorrectFeedback_PandaRojo.svg"],o=["../../../../imagenes_front/Mascotas_Eje4/Eje4_MistakeFeedback_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_MistakeFeedback_PandaRojo.svg"],i=["../../../../imagenes_front/Mascotas_Eje4/Eje4_Glosa_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_Glosa_PandaRojo.svg"];break;case"05":n=["../../../../imagenes_front/Mascotas_Eje5/Eje5_CorrectFeedback_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_CorrectFeedback_Tortuga.svg"],o=["../../../../imagenes_front/Mascotas_Eje5/Eje5_MistakeFeedback_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_MistakeFeedback_Tortuga.svg"],i=["../../../../imagenes_front/Mascotas_Eje5/Eje5_Glosa_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_Glosa_Tortuga.svg"]}var g=window.parent.parent.barraProgreso;if(g){var E=JSON.parse(g.value);a=E.tmpProgreso?E.tmpProgreso:[],s=E.tmpTotal?Number(E.tmpTotal):0}else a=localStorage.getItem("tmpProgreso")?JSON.parse(localStorage.getItem("tmpProgreso")):[],s=localStorage.getItem("tmpTotal")?Number(localStorage.getItem("tmpTotal")):0;var y=["¡Muy bien!","¡Lo has logrado!","¡Genial!","¡Así se hace!"],b=["¡Atención!","¡Algo anda mal!","¡Vuelve a intentarlo!","¡Ten cuidado!"]}).call(this,r(4).Buffer)},function(e,t,r){"use strict";t.a=function(e,t){return e.replace(/\d{1,}(\.\d{1,})?/g,(function(e){var r=e.split(".")[0],n=e.split(".")[1],o=r.length>=4?"":r;if(r.length>=4){var i=r.split("").reverse(),a=1;i.forEach((function(e){3===a?(o=t+e+o,a=1):(o=e+o,a++)}))}return"".concat(o).concat(n?",":"").concat(n||"")}))}},function(e,t,r){"use strict";var n={0:["","","","",""],1:["uno","on","die[sz]","[csz]ien"],2:["do[sz]","do","[vb]einte","do[csz]{1,2}iento[sz]"],3:["tre[sz]","tre","treinta","tre[szc]{1,2}iento[sz]"],4:["[ckq]uatro","[ckq]ator","[ckq]uarenta","[ckq]uatro[szc]{1,2}iento[sz]"],5:["[csz]in[ck]o","(quin|kin)","[csz]in[cqk]uenta","(quin|kin)iento[sz]"],6:["[scz]ei[sz]","","[scz]e[scz]enta","[scz]ei[scz]{1,2}iento[sz]"],7:["[scz]iete","","[scz]etenta","[scz]ete[szc]{1,2}iento[sz]"],8:["o[sc]ho","","o[sc]henta","o[sc]ho[scz]{1,2}iento[sz]"],9:["nue[vb]e","","no[vb]enta","no[vb]e[scz]{1,2}iento[sz]"]};t.a=function(e,t){var r=t[0],o=t[1],i=t[2],a=t[3],s=e.toLowerCase().trim(),u="";return a>0?0==i?u=n[a][0]:1==i?a>0&&a<6?u=n[a][1]+"[scz]e":a>=6&&(u="die[csz]i"+n[a][0]):2==i?u="[vb]einti"+n[a][0]:i>2&&(u=n[i][2]+" y "+n[a][0]):0==a&&i>0&&(u=n[i][2]),o>0&&(1==o?(0==i&&0==a&&(u=n[o][3]+" "+u),0==i&&0==a||(u="[szc]iento "+u)):o>1&&(u=n[o][3]+" "+u)),1==r?u="mil "+u:r>1&&(u=n[r][0]+" mil "+u),u=(u=u.trim()).replace(/^/,"^"),u+="$",new RegExp(u).test(s)}},function(e,t,r){"use strict";r.d(t,"a",(function(){return o}));var n=r(0),o=function(){document.getElementById("btnContinuar").onclick=function(){return!1},document.querySelector(".feedback").style.display="none",document.querySelector(".feedback span").innerHTML="",document.querySelector(".feedback p").innerHTML="",document.querySelector(".feedback img").setAttribute("src",""),document.querySelector(".feedback").classList.remove("feedback-incorrecto"),document.querySelector("footer").style.display="grid","seleccion multiple"===n.h?(document.querySelector("input[type=radio]:checked").checked=!1,document.getElementsByName("answer").forEach((function(e){e.disabled=!1}))):document.querySelectorAll("input[type=text].inputTexto-incorrecto").forEach((function(e){e.disabled=!1,e.classList.remove("inputTexto-incorrecto"),e.value=""}))}},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(10),o=r(11),i=r(12);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=h(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(t,r),o=(e=s(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|_(t.length);return 0===(e=s(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):h(e,t);if("Buffer"===t.type&&i(t.data))return h(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(f(t),e=s(e,t<0?0:0|_(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function h(e,t){var r=t.length<0?0:0|_(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function _(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function d(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return Y(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return N(e).length;default:if(n)return Y(e).length;t=(""+t).toLowerCase(),n=!0}}function p(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,r);case"utf8":case"utf-8":return R(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return B(this,t,r);case"base64":return P(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function E(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:y(e,t,r,n,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):y(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,r,n,o){var i,a=1,s=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,r/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var f=-1;for(i=r;i<s;i++)if(c(e,i)===c(t,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===u)return f*a}else-1!==f&&(i-=i-f),f=-1}else for(r+u>s&&(r=s-u),i=r;i>=0;i--){for(var l=!0,h=0;h<u;h++)if(c(e,i+h)!==c(t,h)){l=!1;break}if(l)return i}return-1}function b(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s}return a}function v(e,t,r,n){return q(Y(t,e.length-r),e,r,n)}function m(e,t,r,n){return q(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function w(e,t,r,n){return m(e,t,r,n)}function M(e,t,r,n){return q(N(t),e,r,n)}function A(e,t,r,n){return q(function(e,t){for(var r,n,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function P(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function R(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,a,s,u,c=e[o],f=null,l=c>239?4:c>223?3:c>191?2:1;if(o+l<=r)switch(l){case 1:c<128&&(f=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(f=u);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(u=(15&c)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(f=u)}null===f?(f=65533,l=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=l}return function(e){var t=e.length;if(t<=k)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=k));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return c(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return f(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return l(null,e)},u.allocUnsafeSlow=function(e){return l(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var a=e[r];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,o),o+=a.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?R(this,0,e):p.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(i,a),c=this.slice(n,o),f=e.slice(t,r),l=0;l<s;++l)if(c[l]!==f[l]){i=c[l],a=f[l];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return E(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return E(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return v(this,e,t,r);case"ascii":return m(this,e,t,r);case"latin1":case"binary":return w(this,e,t,r);case"base64":return M(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var k=4096;function T(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function B(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function O(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=t;i<r;++i)o+=z(e[i]);return o}function C(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function S(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,r,n,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function j(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-r,2);o<i;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function L(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-r,4);o<i;++o)e[r+o]=t>>>8*(n?o:3-o)&255}function D(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function U(e,t,r,n,i){return i||D(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function x(e,t,r,n,i){return i||D(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;r=new u(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||S(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||S(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUInt8=function(e,t){return t||S(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||S(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||S(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||S(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||S(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||S(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||S(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||S(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||S(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||S(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||S(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||S(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||S(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||S(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||S(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||S(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):j(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):j(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):L(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);I(this,e,t,r,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<r&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);I(this,e,t,r,o-1,-o)}var i=r-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):j(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):j(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):L(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return U(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return U(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return x(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return x(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,i=n-r;if(this===e&&r<t&&t<n)for(o=i-1;o>=0;--o)e[o+t]=this[o+r];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var a=u.isBuffer(e)?e:Y(new u(e,n).toString()),s=a.length;for(i=0;i<r-t;++i)this[i+t]=a[i%s]}return this};var F=/[^+\/0-9A-Za-z-_]/g;function z(e){return e<16?"0"+e.toString(16):e.toString(16)}function Y(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function N(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(F,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(9))},function(e,t,r){"use strict";t.a=function(e,t,r){return e.toString().replace(/\$[a-z]/g,(function(e){for(var n=0;n<t.length;n++)if(t[n].var==e[1])return r?t[n].vt:t[n].val}))}},function(module,__webpack_exports__,__webpack_require__){"use strict";function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}__webpack_exports__.a=function(text){var result=text.replace(/\/\[.*?\/\]/g,(function(coincidencia){var _final=coincidencia.length-4,funcion=coincidencia.substr(2,_final).replace(/&gt;/g,">").replace(/&lt;/,"<");try{return eval(funcion)}catch(e){return console.log(e),console.log(funcion),coincidencia}}));return result}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return handleRespuesta}));var _Variables__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(3),_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1),handleRespuesta=function handleRespuesta(){document.querySelector("footer").style.display="none",document.getElementById("btnResponder").disabled=!0,document.getElementsByName("answer").forEach((function(e){e.disabled=!0}));var _validaRespuesta=Object(_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__.a)(_Variables__WEBPACK_IMPORTED_MODULE_0__.k,_Variables__WEBPACK_IMPORTED_MODULE_0__.h),feedback=_validaRespuesta.feedback,errorFrecuente=_validaRespuesta.errorFrecuente,feedbackElement=document.querySelector(".feedback"),feedbackStrong=document.querySelector(".feedback span"),feedbackText=document.querySelector(".feedback p"),imgFeedback=document.querySelector(".feedback img");if(errorFrecuente)1===_Variables__WEBPACK_IMPORTED_MODULE_0__.c?(imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.g[imgRandomIndex(!1)]),feedbackElement.style.display="block",feedbackElement.classList.add("feedback-incorrecto"),feedbackStrong.innerHTML=feedRandomIndex(!1),feedbackText.innerHTML=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_3__.a)(feedback),document.getElementById("btnContinuar").addEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),Object(_Variables__WEBPACK_IMPORTED_MODULE_0__.d)(),window.MathJax&&MathJax.Hub.Queue(["Typeset",MathJax.Hub])):(document.getElementById("imagenGlosa").setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.e[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.e.length)]),document.getElementById("glosa").style.display="block");else{feedbackElement.style.display="block",feedbackElement.classList.add("feedback-correcto"),feedbackStrong.innerHTML=feedRandomIndex(!0);var racha=rachaCorrectas();racha&&(feedbackText.innerHTML="Tienes una racha de <b>".concat(rachaCorrectas(),"</b> respuestas correctas.")),imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.f[imgRandomIndex(!0)]),2===_Variables__WEBPACK_IMPORTED_MODULE_0__.c&&document.getElementById("btnContinuar").removeEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),document.getElementById("btnContinuar").setAttribute("onClick","cerrarFeed();")}eval("enviar(".concat(null==errorFrecuente,", ").concat(null==errorFrecuente?errorFrecuente:'"'+errorFrecuente+'"',")"))},imgRandomIndex=function(e){return e?Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.f.length):Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.g.length)},feedRandomIndex=function(e){return e?_Variables__WEBPACK_IMPORTED_MODULE_0__.b[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.b.length)]:_Variables__WEBPACK_IMPORTED_MODULE_0__.a[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.a.length)]},rachaCorrectas=function(){for(var e=0,t=_Variables__WEBPACK_IMPORTED_MODULE_0__.i.length-1;t>-1&&_Variables__WEBPACK_IMPORTED_MODULE_0__.i[t].correcto;t--)e++;return e+1>1?e+1:null}},function(e,t,r){"use strict";(function(e){r.d(t,"a",(function(){return i}));var n=r(1),o=r(2),i=function(e,t){var r,i;if("seleccion multiple"===t){var u=document.querySelector("input[type=radio]:checked").value,c=!0,f=!1,l=void 0;try{for(var h,_=e[Symbol.iterator]();!(c=(h=_.next()).done);c=!0){var d=h.value;if(u==d.opcion){r=d.feedback,i=d.errorFrecuente;break}}}catch(e){f=!0,l=e}finally{try{c||null==_.return||_.return()}finally{if(f)throw l}}return{feedback:r,errorFrecuente:i}}var p=e.respuestas,g=e.errFrecDefecto,E=e.feedbackDefecto,y=!0,b=!1,v=void 0;try{for(var m,w=p[Symbol.iterator]();!(y=(m=w.next()).done);y=!0){var M=m.value,A=!0;if(M.validaciones.forEach((function(e,t){var r=document.getElementById(e.inputId);switch(r.getAttribute("data-tipoinput")){case"numero":r.value.replace(/\s/g,"")!==e.valor&&"-any-"!==e.valor&&(A=!1);break;case"decimal":r.value.replace(/\s/g,"").replace(",",".")!==e.valor&&"-any-"!==e.valor&&(A=!1);break;case"texto-numerico":var n=String(e.valor).padStart(4,"0").split("");Object(o.a)(r.value.trim(),n)||"-any-"===e.valor||(A=!1);break;case"texto":case"alfanumerico":String(r.value).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")!==String(e.valor).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&"-any-"!==e.valor&&(A=!1);break;case"comparacion":r.value!==e.valor&&"-any-"!==e.valor&&(A=!1)}})),A){r=Object(n.a)(M.feedback,"&nbsp;"),null!==(i=M.errFrec)?s(M):document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")}));break}}}catch(e){b=!0,v=e}finally{try{y||null==w.return||w.return()}finally{if(b)throw v}}if(!r){r=Object(n.a)(E,"&nbsp;"),i=g;var P=document.querySelectorAll("input[name='answer']"),R=!0,k=!1,T=void 0;try{for(var B,O=P[Symbol.iterator]();!(R=(B=O.next()).done);R=!0){a(B.value)}}catch(e){k=!0,T=e}finally{try{R||null==O.return||O.return()}finally{if(k)throw T}}}return{feedback:r,errorFrecuente:i}};function a(t){var r,n=t.getAttribute("data-tipoinput"),i=e.from(t.getAttribute("data-content"),"base64").toString("utf-8"),a=!1;switch(n){case"numero":r=t.value.replace(/\s/g,""),i.split(",").forEach((function(e){r===e&&(t.classList.add("inputTexto-correcto"),a=!0)}));break;case"decimal":r=t.value.replace(/\s/g,"").replace(",","."),i.split(",").forEach((function(e){r===e&&(t.classList.add("inputTexto-correcto"),a=!0)}));break;case"texto-numerico":r=t.value,i.split(",").forEach((function(e){var n=3===e.length?("0"+e).split(""):e.split("");Object(o.a)(r,n)&&(t.classList.add("inputTexto-correcto"),a=!0)}));break;case"texto":case"alfanumerico":r=t.value,i.split(",").forEach((function(e){String(r).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")===String(e).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&(t.classList.add("inputTexto-correcto"),a=!0)}))}a||t.classList.add("inputTexto-incorrecto")}function s(e){e.validaciones.forEach((function(e){var t=e.color,r=e.inputId,n=document.getElementById(r);"ok"===t?n.classList.add("inputTexto-correcto"):"bad"===t?n.classList.add("inputTexto-incorrecto"):n.value.replace(/\s/g,"")==t.correcta?n.classList.add("inputTexto-correcto"):n.classList.add("inputTexto-incorrecto")}))}}).call(this,r(4).Buffer)},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),a=n[0],s=n[1],u=new i(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),f=0,l=s>0?a-4:a;for(r=0;r<l;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],u[f++]=t>>16&255,u[f++]=t>>8&255,u[f++]=255&t;2===s&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,u[f++]=255&t);1===s&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,u[f++]=t>>8&255,u[f++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],a=0,s=r-o;a<s;a+=16383)i.push(f(e,a,a+16383>s?s:a+16383));1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)n[s]=a[s],o[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function f(e,t,r){for(var o,i,a=[],s=t;s<r;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,o){var i,a,s=8*o-n-1,u=(1<<s)-1,c=u>>1,f=-7,l=r?o-1:0,h=r?-1:1,_=e[t+l];for(l+=h,i=_&(1<<-f)-1,_>>=-f,f+=s;f>0;i=256*i+e[t+l],l+=h,f-=8);for(a=i&(1<<-f)-1,i>>=-f,f+=n;f>0;a=256*a+e[t+l],l+=h,f-=8);if(0===i)i=1-c;else{if(i===u)return a?NaN:1/0*(_?-1:1);a+=Math.pow(2,n),i-=c}return(_?-1:1)*a*Math.pow(2,i-n)},t.write=function(e,t,r,n,o,i){var a,s,u,c=8*i-o-1,f=(1<<c)-1,l=f>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,_=n?0:i-1,d=n?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=f):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+l>=1?h/u:h*Math.pow(2,1-l))*u>=2&&(a++,u/=2),a+l>=f?(s=0,a=f):a+l>=1?(s=(t*u-1)*Math.pow(2,o),a+=l):(s=t*Math.pow(2,l-1)*Math.pow(2,o),a=0));o>=8;e[r+_]=255&s,_+=d,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;e[r+_]=255&a,_+=d,a/=256,c-=8);e[r+_-d]|=128*p}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){},function(e,t,r){"use strict";r.r(t);var n=r(0),o=function(e,t){var r=document.createElementNS("http://www.w3.org/2000/svg",e);for(var n in t)r.setAttributeNS(null,n.replace(/[A-Z]/g,(function(e,t,r,n){return"-"+e.toLowerCase()})),t[n]);return r},i=r(7);!function(){var e=document.getElementById("progressbar"),t=250/(n.j+1),r=o("rect",{x:2,y:2,width:250,height:32,fill:"none",stroke:"#CCCBCB",strokeWidth:"1",rx:5,ry:5});e.appendChild(r);var i=Number(250-2*t),a=o("rect",{x:t,y:17,width:i,height:2,fill:"#E7E5E5",rx:2,ry:2});e.appendChild(a);for(var s=0;s<n.j;s++){var u=void 0,c=void 0;n.i.length>s?(c=4,u=n.i[s].correcto?1===n.i[s].NUMEROINTENTOS?"#00AC4D":"#E2C04D":"#E24B4A"):n.i.length===s?(c=8,u="#1280B1"):(c=4,u="#CCCBCB");var f=t*(s+1)+2,l=o("circle",{cx:f,cy:18,r:c,fill:u,stroke:"none"});if(e.appendChild(l),n.i.length===s){var h=o("text",{x:f,y:22,fontFamily:"sans-serif",fontSize:"11px",textAnchor:"middle",fill:"white"});h.textContent=n.i.length+1,e.appendChild(h)}}}(),document.getElementById("btnResponder").addEventListener("click",i.a);r(13)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,