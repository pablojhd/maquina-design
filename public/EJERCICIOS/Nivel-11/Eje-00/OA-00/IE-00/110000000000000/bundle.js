!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=10)}([function(e,t,r){"use strict";function n(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,i=function(){};return{s:i,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,u=!0,c=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return u=e.done,e},e:function(e){c=!0,a=e},f:function(){try{u||null==r.return||r.return()}finally{if(c)throw a}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.d(t,"c",(function(){return f})),r.d(t,"a",(function(){return l})),r.d(t,"d",(function(){return p})),r.d(t,"b",(function(){return d}));var i=(new Date).toLocaleTimeString(),a=window.parent.parent.varHidden,u=(window.parent.parent.varTutorial,window.parent.parent.varSegundoError),c=window.parent.parent.cerrarFeedbackHijo,s=window.parent.parent.pressConsulta;Date.prototype.yyyymmdd=function(){var e=this.getMonth()+1,t=this.getDate();return[this.getFullYear(),(e>9?"":"0")+e,(t>9?"":"0")+t].join("-")};var f=function(e){var t=e.idEjercicio,r=e.tipoejercicio,o=e.errorFrecuente,u=new Date,c=window.location.href.substring(window.location.href.search(t)+(t.length+1),window.location.href.search(".html")),s=new Date,f="";if("radio"===r)f="Valor radio= "+document.querySelector("input[name=answer]:checked").value;else{var l,p=n(document.querySelectorAll(".contenido input[name=answer]"));try{for(p.s();!(l=p.n()).done;){var d=l.value;f+=d.id+" = "+d.value+" "}}catch(e){p.e(e)}finally{p.f()}}var y=JSON.stringify({idejercicioversion:c,correcto:o?0:1,estarea:0,idtareaiematricula:0,tiempoInicio:s.yyyymmdd()+" "+i,tiempoRespuesta:s.yyyymmdd()+" "+u.toLocaleTimeString(),feedback:o?"":"Respuesta Correcta",codigoErrorComun:o?0:o,respuesta:f,glosa:2==numeroIntento});h(a,y),window.numeroIntento++},l=function(){h(c,!0)},p=function(){h(s,"1")},d=function(){h(u,!0)},h=function(e,t){try{e.value=t;var r=document.createEvent("Event");r.initEvent("change",!0,!0),e.dispatchEvent(r);var n=document.createEvent("Event");n.initEvent("click",!0,!0),e.dispatchEvent(n)}catch(e){console.log(e)}}},function(e,t,r){"use strict";t.a=function(e,t){return e.replace(/\d{1,}(\.\d{1,})?/g,(function(e){var r=e.split(".")[0],n=e.split(".")[1],o=r.length>=4?"":r;if(r.length>=4){var i=r.split("").reverse(),a=1;i.forEach((function(e,r){3===a&&r+1<i.length?(o=t+e+o,a=1):(o=e+o,a++)}))}return"".concat(o).concat(n?",":"").concat(n||"")}))}},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(13),o=r(14),i=r(15);function a(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,r){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return s(this,e,t,r)}function s(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=p(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!c.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|h(t,r),o=(e=u(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(c.isBuffer(t)){var r=0|d(t.length);return 0===(e=u(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?u(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(f(t),e=u(e,t<0?0:0|d(t)),!c.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var r=t.length<0?0:0|d(t.length);e=u(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return Y(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return N(e).length;default:if(n)return Y(e).length;t=(""+t).toLowerCase(),n=!0}}function y(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,r);case"utf8":case"utf-8":return T(this,t,r);case"ascii":return C(this,t,r);case"latin1":case"binary":return P(this,t,r);case"base64":return S(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function v(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,o);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,o){var i,a=1,u=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,u/=2,c/=2,r/=2}function s(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var f=-1;for(i=r;i<u;i++)if(s(e,i)===s(t,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===c)return f*a}else-1!==f&&(i-=i-f),f=-1}else for(r+c>u&&(r=u-c),i=r;i>=0;i--){for(var l=!0,p=0;p<c;p++)if(s(e,i+p)!==s(t,p)){l=!1;break}if(l)return i}return-1}function b(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var a=0;a<n;++a){var u=parseInt(t.substr(2*a,2),16);if(isNaN(u))return a;e[r+a]=u}return a}function w(e,t,r,n){return q(Y(t,e.length-r),e,r,n)}function _(e,t,r,n){return q(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function E(e,t,r,n){return _(e,t,r,n)}function A(e,t,r,n){return q(N(t),e,r,n)}function k(e,t,r,n){return q(function(e,t){for(var r,n,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function S(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function T(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,a,u,c,s=e[o],f=null,l=s>239?4:s>223?3:s>191?2:1;if(o+l<=r)switch(l){case 1:s<128&&(f=s);break;case 2:128==(192&(i=e[o+1]))&&(c=(31&s)<<6|63&i)>127&&(f=c);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(c=(15&s)<<12|(63&i)<<6|63&a)>2047&&(c<55296||c>57343)&&(f=c);break;case 4:i=e[o+1],a=e[o+2],u=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&u)&&(c=(15&s)<<18|(63&i)<<12|(63&a)<<6|63&u)>65535&&c<1114112&&(f=c)}null===f?(f=65533,l=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=l}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,r){return s(null,e,t,r)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,r){return function(e,t,r,n){return f(t),t<=0?u(e,t):void 0!==r?"string"==typeof n?u(e,t).fill(r,n):u(e,t).fill(r):u(e,t)}(null,e,t,r)},c.allocUnsafe=function(e){return l(null,e)},c.allocUnsafeSlow=function(e){return l(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=c.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var a=e[r];if(!c.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,o),o+=a.length}return n},c.byteLength=h,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?T(this,0,e):y.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,r,n,o){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),u=Math.min(i,a),s=this.slice(n,o),f=e.slice(t,r),l=0;l<u;++l)if(s[l]!==f[l]){i=s[l],a=f[l];break}return i<a?-1:a<i?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return w(this,e,t,r);case"ascii":return _(this,e,t,r);case"latin1":case"binary":return E(this,e,t,r);case"base64":return A(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function C(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function P(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function R(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=t;i<r;++i)o+=j(e[i]);return o}function I(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function B(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,r,n,o,i){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function O(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-r,2);o<i;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function x(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-r,4);o<i;++o)e[r+o]=t>>>8*(n?o:3-o)&255}function D(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function U(e,t,r,n,i){return i||D(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function M(e,t,r,n,i){return i||D(e,0,r,8),o.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=c.prototype;else{var o=t-e;r=new c(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+e]}return r},c.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||B(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},c.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||B(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},c.prototype.readUInt8=function(e,t){return t||B(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||B(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||B(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||B(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||B(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||B(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||B(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},c.prototype.readInt8=function(e,t){return t||B(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||B(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){t||B(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return t||B(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||B(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||B(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||B(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||B(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||B(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||L(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},c.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||L(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},c.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):O(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):O(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):x(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):x(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);L(this,e,t,r,o-1,-o)}var i=0,a=1,u=0;for(this[t]=255&e;++i<r&&(a*=256);)e<0&&0===u&&0!==this[t+i-1]&&(u=1),this[t+i]=(e/a>>0)-u&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);L(this,e,t,r,o-1,-o)}var i=r-1,a=1,u=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===u&&0!==this[t+i+1]&&(u=1),this[t+i]=(e/a>>0)-u&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):O(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):O(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):x(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):x(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,r){return U(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return U(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return M(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return M(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,i=n-r;if(this===e&&r<t&&t<n)for(o=i-1;o>=0;--o)e[o+t]=this[o+r];else if(i<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var a=c.isBuffer(e)?e:Y(new c(e,n).toString()),u=a.length;for(i=0;i<r-t;++i)this[i+t]=a[i%u]}return this};var F=/[^+\/0-9A-Za-z-_]/g;function j(e){return e<16?"0"+e.toString(16):e.toString(16)}function Y(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function N(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(F,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(12))},function(e,t,r){"use strict";t.a=function(e,t,r){return e.toString().replace(/\$[a-z]/g,(function(e){for(var n=0;n<t.length;n++)if(t[n].var==e[1])return r?t[n].vt:t[n].val}))}},function(module,__webpack_exports__,__webpack_require__){"use strict";function frac(e,t,r){return'<span class=\\"eq\\">'.concat(e?'<span class=\\"integer\\">'.concat(e,"</span>"):"",'<span class=\\"fraction\\"><span class=\\"fup\\">&nbsp;').concat(t,'&nbsp;</span><span class=\\"bar\\">/</span><span class=\\"fdn\\">&nbsp;').concat(r,"&nbsp;</span></span></span>")}function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}__webpack_exports__.a=function(text){var result=text.replace(/\/\[.*?\/\]/g,(function(coincidencia){var _final=coincidencia.length-4,funcion=coincidencia.substr(2,_final).replace(/&gt;/g,">").replace(/&lt;/,"<");try{return eval(funcion)}catch(e){return console.log(e),console.log(funcion),coincidencia}}));return result}},function(e,t,r){"use strict";t.a=function(){var e=window.parent.parent.barraProgreso;if(e){var t=JSON.parse(e.value);return{tmpProgreso:t.tmpProgreso?t.tmpProgreso:[],tmpTotal:t.tmpTotal?Number(t.tmpTotal):0}}return{tmpProgreso:localStorage.getItem("tmpProgreso")?JSON.parse(localStorage.getItem("tmpProgreso")):[],tmpTotal:localStorage.getItem("tmpTotal")?Number(localStorage.getItem("tmpTotal")):0}}},function(e,t,r){"use strict";function n(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,i=function(){};return{s:i,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,u=!0,c=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return u=e.done,e},e:function(e){c=!0,a=e},f:function(){try{u||null==r.return||r.return()}finally{if(c)throw a}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}t.a=function(e){var t=function(e){return e.preventDefault(),!1};document.body.addEventListener("drop",t),document.body.addEventListener("contextmenu",t),"seleccion multiple"===e?document.querySelectorAll("input[type=radio]").forEach((function(e){e.addEventListener("change",(function(){document.getElementById("btnResponder").disabled=!1}))})):(document.querySelectorAll("input[type=text]").forEach((function(e){e.addEventListener("keyup",(function(){var e,t=!0,r=n(document.querySelectorAll("input[type=text]"));try{for(r.s();!(e=r.n()).done;){if(""===e.value.value.trim()){t=!1;break}}}catch(e){r.e(e)}finally{r.f()}document.getElementById("btnResponder").disabled=!t})),e.addEventListener("copy",t),e.addEventListener("paste",t),e.addEventListener("cut",t)})),document.querySelectorAll('[data-tipoinput="alfanumerico"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(e.keyCode>=48&&e.keyCode<=57||e.keyCode>=65&&e.keyCode<=90||e.keyCode>=97&&e.keyCode<=122||241==e.keyCode||209==e.keyCode||225==e.keyCode||233==e.keyCode||237==e.keyCode||243==e.keyCode||250==e.keyCode||193==e.keyCode||201==e.keyCode||205==e.keyCode||211==e.keyCode||218==e.keyCode||32==e.keyCode))return e.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="texto-numerico"],[data-tipoinput="texto"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(e.keyCode>=65&&e.keyCode<=90||e.keyCode>=97&&e.keyCode<=122||241==e.keyCode||209==e.keyCode||225==e.keyCode||233==e.keyCode||237==e.keyCode||243==e.keyCode||250==e.keyCode||193==e.keyCode||201==e.keyCode||205==e.keyCode||211==e.keyCode||218==e.keyCode||32==e.keyCode))return e.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="comparacion"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(60===e.keyCode||61===e.keyCode||62===e.keyCode))return e.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="numero"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(e.keyCode>=48&&e.keyCode<=57))return e.preventDefault(),!1})),e.addEventListener("keyup",(function(e){for(var t=String(e.target.value).replace(/\s/g,"").split("").reverse(),r=0,n=0,o="";r<t.length;r++)3===++n&&t[r+1]?(o=" "+t[r]+o,n=0):o=t[r]+o;e.target.value=o}))})),document.querySelectorAll('[data-tipoinput="decimal"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(e.keyCode>=48&&e.keyCode<=57||44===e.keyCode))return e.preventDefault(),!1})),e.addEventListener("keyup",(function(e){var t=String(e.target.value).replace(" ",""),r=String(t).split(",")[0],n=String(t).split(",")[1],o=r.length>=4?"":r;if(r.length>=4){var i=r.split("").reverse(),a=1;i.forEach((function(e){3===a?(o=" "+e+o,a=1):(o=e+o,a++)}))}e.target.value="".concat(o).concat(void 0===n?"":",").concat(void 0===n?"":n)}))})))}},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(Buffer){var _utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _createForOfIteratorHelper(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function coloreaInputTextoPorDefecto(e){var t=e.getAttribute("data-tipoinput"),r=Buffer.from(e.getAttribute("data-content"),"base64").toString("utf-8");r=ReemplazaVariables(r,version.vars,!1);var n,o=!1;switch(t){case"numero":n=e.value.replace(/\s/g,""),r.split(",").forEach((function(t){n===t&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"decimal":n=e.value.replace(/\s/g,"").replace(",","."),r.split(",").forEach((function(t){n===t&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"texto-numerico":n=e.value,r.split(",").forEach((function(t){var r=3===t.length?("0"+t).split(""):t.split("");ValidaNumeroEscrito(n,r)&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"texto":case"alfanumerico":n=e.value,r.split(",").forEach((function(t){String(n).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")===String(t).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&(e.classList.add("inputTexto-correcto"),o=!0)}))}o||e.classList.add("inputTexto-incorrecto")}function coloreaInputsTextoPorCoincidencia(e){e.validaciones.forEach((function(e){var t=e.color,r=e.inputId,n=document.getElementById(r);"ok"===t?n.classList.add("inputTexto-correcto"):"bad"===t?n.classList.add("inputTexto-incorrecto"):n.value.replace(/\s/g,"")==t.correcta?n.classList.add("inputTexto-correcto"):n.classList.add("inputTexto-incorrecto")}))}__webpack_exports__.a=function(validaciones,tipo){var feedback,errorFrecuente;if("seleccion multiple"===tipo){var respuesta=document.querySelector("input[type=radio]:checked").value,_iterator=_createForOfIteratorHelper(validaciones),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var validacion=_step.value;if(respuesta==validacion.opcion){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(validacion.feedback,"&nbsp;"),errorFrecuente=validacion.errorFrecuente;break}}}catch(e){_iterator.e(e)}finally{_iterator.f()}return{feedback:feedback,errorFrecuente:errorFrecuente}}if("respuesta breve"===tipo){var respuestas=validaciones.respuestas,errFrecDefecto=validaciones.errFrecDefecto,feedbackDefecto=validaciones.feedbackDefecto,_iterator2=_createForOfIteratorHelper(respuestas),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _respuesta=_step2.value,coincidenTodas=!0;if(_respuesta.validaciones.forEach((function(e,t){var r=document.getElementById(e.inputId);switch(r.getAttribute("data-tipoinput")){case"numero":r.value.replace(/\s/g,"")!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"decimal":r.value.replace(/\s/g,"").replace(",",".")!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"texto-numerico":var n=String(e.valor).padStart(4,"0").split("");ValidaNumeroEscrito(r.value.trim(),n)||"-any-"===e.valor||(coincidenTodas=!1);break;case"texto":case"alfanumerico":String(r.value).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")!==String(e.valor).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"comparacion":r.value!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1)}})),coincidenTodas){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(_respuesta.feedback,"&nbsp;"),errorFrecuente=_respuesta.errFrec,null!==errorFrecuente?coloreaInputsTextoPorCoincidencia(_respuesta):document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")}));break}}}catch(e){_iterator2.e(e)}finally{_iterator2.f()}if(!feedback){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(feedbackDefecto,"&nbsp;"),errorFrecuente=errFrecDefecto;var inputs=document.querySelectorAll("input[name='answer']"),_iterator3=_createForOfIteratorHelper(inputs),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var input=_step3.value;coloreaInputTextoPorDefecto(input)}}catch(e){_iterator3.e(e)}finally{_iterator3.f()}}return{feedback:feedback,errorFrecuente:errorFrecuente}}var _respuestas=validaciones.respuestas,_errFrecDefecto=validaciones.errFrecDefecto,_feedbackDefecto=validaciones.feedbackDefecto,_iterator4=_createForOfIteratorHelper(_respuestas),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var resp=_step4.value,evaluacion=resp.opcion.replace(/input\d/g,(function(e){return document.getElementById(e).value.replace(",",".").replace(/\s/,"")}));if(eval(evaluacion)){feedback=resp.feedback,errorFrecuente=resp.errorFrecuente;break}}}catch(e){_iterator4.e(e)}finally{_iterator4.f()}return feedback?document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")})):(feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(_feedbackDefecto,"&nbsp;"),errorFrecuente=_errFrecDefecto,document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-incorrecto")}))),{feedback:feedback,errorFrecuente:errorFrecuente}}}).call(this,__webpack_require__(2).Buffer)},function(e,t,r){"use strict";t.a=function(e,t){var r=document.getElementById("progressbar"),o=250/(t+1),i=n("rect",{x:2,y:2,width:250,height:32,fill:"none",stroke:"#CCCBCB",strokeWidth:"1",rx:5,ry:5});r.appendChild(i);var a=Number(250-2*o),u=n("rect",{x:o,y:17,width:a,height:2,fill:"#E7E5E5",rx:2,ry:2});r.appendChild(u);for(var c=0;c<t;c++){var s=void 0,f=void 0;e.length>c?(f=4,s=e[c].correcto?1===e[c].NUMEROINTENTOS?"#00AC4D":"#E2C04D":"#E24B4A"):e.length===c?(f=8,s="#1280B1"):(f=4,s="#CCCBCB");var l=o*(c+1)+2,p=n("circle",{cx:l,cy:18,r:f,fill:s,stroke:"none"});if(r.appendChild(p),e.length===c){var d=n("text",{x:l,y:22,fontFamily:"sans-serif",fontSize:"11px",textAnchor:"middle",fill:"white"});d.textContent=e.length+1,r.appendChild(d)}}};var n=function(e,t){var r=document.createElementNS("http://www.w3.org/2000/svg",e);for(var n in t)r.setAttributeNS(null,n.replace(/[A-Z]/g,(function(e,t,r,n){return"-"+e.toLowerCase()})),t[n]);return r}},function(e,t,r){"use strict";var n=r(7),o=function(e,t){t.querySelector("button").disabled=!0,t.style.display="none",document.querySelector("footer").style.display="grid","seleccion multiple"===e?(document.querySelector("input[type=radio]:checked").checked=!1,document.getElementsByName("answer").forEach((function(e){e.disabled=!1}))):document.querySelectorAll("input[type=text].inputTexto-incorrecto").forEach((function(e){e.disabled=!1,e.classList.remove("inputTexto-incorrecto"),e.value=""}))},i=r(0),a=(t.a=function(e,t){e.target.disabled=!0;var r=t.idEjercicio,s=t.validaciones,f=t.tipoEjercicio,l=t.tmpProgreso;document.querySelector("footer").style.display="none",document.getElementsByName("answer").forEach((function(e){e.disabled=!0}));var p,d,h,y=Object(n.a)(s,f),g=y.feedback,v=y.errorFrecuente;if(v?(p=document.querySelector(".feedback-incorrecto"),d=document.querySelector(".feedback-incorrecto span.feedback-span"),h=document.querySelector(".feedback-incorrecto p.feedback-p")):(p=document.querySelector(".feedback-correcto"),d=document.querySelector(".feedback-correcto span.feedback-span"),h=document.querySelector(".feedback-correcto p.feedback-p")),v)1===window.numeroIntento?(d.innerHTML=c[Math.floor(4*Math.random())],h.innerHTML=g,p.querySelector("button").addEventListener("click",(function(){return o(f,p)})),window.renderMathInElement&&window.renderMathInElement(p,{delimiters:[{left:"((",right:"))",display:!1},{left:"[[",right:"]]",display:!0}]}),p.style.display="block"):(document.querySelector("#btnCerrarGlosa").addEventListener("click",i.b),document.getElementById("glosa").style.display="block");else{p.style.display="block",d.innerHTML=u[Math.floor(4*Math.random())];var m=a(l);m&&(h.innerHTML="Tienes una racha de <b>".concat(m,"</b> respuestas correctas.")),2===window.numeroIntento&&p.querySelector("button").removeEventListener("click",(function(){return o(f,p)})),p.querySelector("button").addEventListener("click",i.a)}Object(i.c)({idEjercicio:r,tipoEjercicio:f,errorFrecuente:v})},function(e){for(var t=0,r=e.length-1;r>-1&&e[r].correcto;r--)t++;return t+1>1?t+1:null}),u=["¡Muy bien!","¡Lo has logrado!","¡Genial!","¡Así se hace!"],c=["¡Atención!","¡Algo anda mal!","¡Vuelve a intentarlo!","¡Ten cuidado!"]},function(e,t,r){"use strict";r.r(t);r(11),r(16)},function(e,t,r){"use strict";(function(e){var t=r(3),n=r(4),o=r(5),i=r(6),a=r(9),u=r(8),c=r(0),s=function(){var r=document.getElementById("body");window.numeroIntento=parseInt(document.getElementById("hiddenIntento").value)||1,document.querySelector("#hiddenIntento").addEventListener("change",(function(e){window.numeroIntento=parseInt(e.target.value)})),document.querySelector("#btnConsulta").addEventListener("click",c.d);var s=Object(o.a)(),f=s.tmpProgreso,l=s.tmpTotal;Object(u.a)(f,l);var p=r.dataset.id,d=JSON.parse(e(r.dataset.version,"base64").toString("utf8")),h=JSON.parse(Object(n.a)(Object(t.a)(e(r.dataset.x,"base64").toString("utf8"),d.vars,!1))),y=r.dataset.tipoejercicio;Object(i.a)(y),document.getElementById("btnResponder").addEventListener("click",(function(e){return Object(a.a)(e,{idEjercicio:p,validaciones:h,tipoEjercicio:y,tmpProgreso:f})}))};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",s):s()}).call(this,r(2).Buffer)},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";t.byteLength=function(e){var t=s(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=s(e),a=n[0],u=n[1],c=new i(function(e,t,r){return 3*(t+r)/4-r}(0,a,u)),f=0,l=u>0?a-4:a;for(r=0;r<l;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],c[f++]=t>>16&255,c[f++]=t>>8&255,c[f++]=255&t;2===u&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,c[f++]=255&t);1===u&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,c[f++]=t>>8&255,c[f++]=255&t);return c},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],a=0,u=r-o;a<u;a+=16383)i.push(f(e,a,a+16383>u?u:a+16383));1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,c=a.length;u<c;++u)n[u]=a[u],o[a.charCodeAt(u)]=u;function s(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function f(e,t,r){for(var o,i,a=[],u=t;u<r;u+=3)o=(e[u]<<16&16711680)+(e[u+1]<<8&65280)+(255&e[u+2]),a.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,o){var i,a,u=8*o-n-1,c=(1<<u)-1,s=c>>1,f=-7,l=r?o-1:0,p=r?-1:1,d=e[t+l];for(l+=p,i=d&(1<<-f)-1,d>>=-f,f+=u;f>0;i=256*i+e[t+l],l+=p,f-=8);for(a=i&(1<<-f)-1,i>>=-f,f+=n;f>0;a=256*a+e[t+l],l+=p,f-=8);if(0===i)i=1-s;else{if(i===c)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,n),i-=s}return(d?-1:1)*a*Math.pow(2,i-n)},t.write=function(e,t,r,n,o,i){var a,u,c,s=8*i-o-1,f=(1<<s)-1,l=f>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:i-1,h=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(u=isNaN(t)?1:0,a=f):(a=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-a))<1&&(a--,c*=2),(t+=a+l>=1?p/c:p*Math.pow(2,1-l))*c>=2&&(a++,c/=2),a+l>=f?(u=0,a=f):a+l>=1?(u=(t*c-1)*Math.pow(2,o),a+=l):(u=t*Math.pow(2,l-1)*Math.pow(2,o),a=0));o>=8;e[r+d]=255&u,d+=h,u/=256,o-=8);for(a=a<<o|u,s+=o;s>0;e[r+d]=255&a,d+=h,a/=256,s-=8);e[r+d-h]|=128*y}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,