!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s="./index.js")}({"./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */function(t,e,n){"use strict";n.r(e);n(/*! ./scripts/index */"./scripts/index.js"),n(/*! ./styles/index.scss */"./styles/index.scss")},"./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],o=e[1];return 3*(n+o)/4-o},e.toByteArray=function(t){var e,n,o=c(t),s=o[0],a=o[1],u=new i(function(t,e,n){return 3*(e+n)/4-n}(0,s,a)),l=0,h=a>0?s-4:s;for(n=0;n<h;n+=4)e=r[t.charCodeAt(n)]<<18|r[t.charCodeAt(n+1)]<<12|r[t.charCodeAt(n+2)]<<6|r[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===a&&(e=r[t.charCodeAt(n)]<<2|r[t.charCodeAt(n+1)]>>4,u[l++]=255&e);1===a&&(e=r[t.charCodeAt(n)]<<10|r[t.charCodeAt(n+1)]<<4|r[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,r=n%3,i=[],s=0,a=n-r;s<a;s+=16383)i.push(l(t,s,s+16383>a?a:s+16383));1===r?(e=t[n-1],i.push(o[e>>2]+o[e<<4&63]+"==")):2===r&&(e=(t[n-2]<<8)+t[n-1],i.push(o[e>>10]+o[e>>4&63]+o[e<<2&63]+"="));return i.join("")};for(var o=[],r=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)o[a]=s[a],r[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var r,i,s=[],a=e;a<n;a+=3)r=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(o[(i=r)>>18&63]+o[i>>12&63]+o[i>>6&63]+o[63&i]);return s.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},"./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var o=n(/*! base64-js */"./node_modules/base64-js/index.js"),r=n(/*! ieee754 */"./node_modules/ieee754/index.js"),i=n(/*! isarray */"./node_modules/isarray/index.js");function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return c(this,t,e,n)}function c(t,e,n,o){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,o){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(o||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===o?new Uint8Array(e):void 0===o?new Uint8Array(e,n):new Uint8Array(e,n,o);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=p(t,e);return t}(t,e,n,o):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var o=0|d(e,n),r=(t=a(t,o)).write(e,n);r!==o&&(t=t.slice(0,r));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|f(e.length);return 0===(t=a(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(o=e.length)!=o?a(t,0):p(t,e);if("Buffer"===e.type&&i(e.data))return p(t,e.data)}var o;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=a(t,e<0?0:0|f(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function p(t,e){var n=e.length<0?0:0|f(e.length);t=a(t,n);for(var o=0;o<n;o+=1)t[o]=255&e[o];return t}function f(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var o=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return Z(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(t).length;default:if(o)return Z(t).length;e=(""+e).toLowerCase(),o=!0}}function v(t,e,n){var o=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return M(this,e,n);case"utf8":case"utf-8":return A(this,e,n);case"ascii":return C(this,e,n);case"latin1":case"binary":return P(this,e,n);case"base64":return x(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,n);default:if(o)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),o=!0}}function m(t,e,n){var o=t[e];t[e]=t[n],t[n]=o}function g(t,e,n,o,r){if(0===t.length)return-1;if("string"==typeof n?(o=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=r?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(r)return-1;n=t.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof e&&(e=u.from(e,o)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,o,r);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,o,r);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,o,r){var i,s=1,a=t.length,u=e.length;if(void 0!==o&&("ucs2"===(o=String(o).toLowerCase())||"ucs-2"===o||"utf16le"===o||"utf-16le"===o)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(r){var l=-1;for(i=n;i<a;i++)if(c(t,i)===c(e,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(n+u>a&&(n=a-u),i=n;i>=0;i--){for(var h=!0,p=0;p<u;p++)if(c(t,i+p)!==c(e,p)){h=!1;break}if(h)return i}return-1}function b(t,e,n,o){n=Number(n)||0;var r=t.length-n;o?(o=Number(o))>r&&(o=r):o=r;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");o>i/2&&(o=i/2);for(var s=0;s<o;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function w(t,e,n,o){return F(Z(e,t.length-n),t,n,o)}function E(t,e,n,o){return F(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,o)}function _(t,e,n,o){return E(t,e,n,o)}function S(t,e,n,o){return F(U(e),t,n,o)}function T(t,e,n,o){return F(function(t,e){for(var n,o,r,i=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),o=n>>8,r=n%256,i.push(r),i.push(o);return i}(e,t.length-n),t,n,o)}function x(t,e,n){return 0===e&&n===t.length?o.fromByteArray(t):o.fromByteArray(t.slice(e,n))}function A(t,e,n){n=Math.min(t.length,n);for(var o=[],r=e;r<n;){var i,s,a,u,c=t[r],l=null,h=c>239?4:c>223?3:c>191?2:1;if(r+h<=n)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(i=t[r+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=t[r+1],s=t[r+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=t[r+1],s=t[r+2],a=t[r+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,o.push(l>>>10&1023|55296),l=56320|1023&l),o.push(l),r+=h}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",o=0;for(;o<e;)n+=String.fromCharCode.apply(String,t.slice(o,o+=4096));return n}(o)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,o){return l(e),e<=0?a(t,e):void 0!==n?"string"==typeof o?a(t,e).fill(n,o):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,o=e.length,r=0,i=Math.min(n,o);r<i;++r)if(t[r]!==e[r]){n=t[r],o=e[r];break}return n<o?-1:o<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var o=u.allocUnsafe(e),r=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(o,r),r+=s.length}return o},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?A(this,0,t):v.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,o,r){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===o&&(o=0),void 0===r&&(r=this.length),e<0||n>t.length||o<0||r>this.length)throw new RangeError("out of range index");if(o>=r&&e>=n)return 0;if(o>=r)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(r>>>=0)-(o>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(o,r),l=t.slice(e,n),h=0;h<a;++h)if(c[h]!==l[h]){i=c[h],s=l[h];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},u.prototype.write=function(t,e,n,o){if(void 0===e)o="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)o=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===o&&(o="utf8")):(o=n,n=void 0)}var r=this.length-e;if((void 0===n||n>r)&&(n=r),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");o||(o="utf8");for(var i=!1;;)switch(o){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return w(this,t,e,n);case"ascii":return E(this,t,e,n);case"latin1":case"binary":return _(this,t,e,n);case"base64":return S(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+o);o=(""+o).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function C(t,e,n){var o="";n=Math.min(t.length,n);for(var r=e;r<n;++r)o+=String.fromCharCode(127&t[r]);return o}function P(t,e,n){var o="";n=Math.min(t.length,n);for(var r=e;r<n;++r)o+=String.fromCharCode(t[r]);return o}function M(t,e,n){var o=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>o)&&(n=o);for(var r="",i=e;i<n;++i)r+=j(t[i]);return r}function I(t,e,n){for(var o=t.slice(e,n),r="",i=0;i<o.length;i+=2)r+=String.fromCharCode(o[i]+256*o[i+1]);return r}function k(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function z(t,e,n,o,r,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>r||e<i)throw new RangeError('"value" argument is out of bounds');if(n+o>t.length)throw new RangeError("Index out of range")}function B(t,e,n,o){e<0&&(e=65535+e+1);for(var r=0,i=Math.min(t.length-n,2);r<i;++r)t[n+r]=(e&255<<8*(o?r:1-r))>>>8*(o?r:1-r)}function D(t,e,n,o){e<0&&(e=4294967295+e+1);for(var r=0,i=Math.min(t.length-n,4);r<i;++r)t[n+r]=e>>>8*(o?r:3-r)&255}function R(t,e,n,o,r,i){if(n+o>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function O(t,e,n,o,i){return i||R(t,0,n,4),r.write(t,e,n,o,23,4),n+4}function L(t,e,n,o,i){return i||R(t,0,n,8),r.write(t,e,n,o,52,8),n+8}u.prototype.slice=function(t,e){var n,o=this.length;if((t=~~t)<0?(t+=o)<0&&(t=0):t>o&&(t=o),(e=void 0===e?o:~~e)<0?(e+=o)<0&&(e=0):e>o&&(e=o),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var r=e-t;n=new u(r,void 0);for(var i=0;i<r;++i)n[i]=this[i+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||k(t,e,this.length);for(var o=this[t],r=1,i=0;++i<e&&(r*=256);)o+=this[t+i]*r;return o},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||k(t,e,this.length);for(var o=this[t+--e],r=1;e>0&&(r*=256);)o+=this[t+--e]*r;return o},u.prototype.readUInt8=function(t,e){return e||k(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||k(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||k(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||k(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||k(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||k(t,e,this.length);for(var o=this[t],r=1,i=0;++i<e&&(r*=256);)o+=this[t+i]*r;return o>=(r*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||k(t,e,this.length);for(var o=e,r=1,i=this[t+--o];o>0&&(r*=256);)i+=this[t+--o]*r;return i>=(r*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||k(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||k(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||k(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||k(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||k(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||k(t,4,this.length),r.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||k(t,4,this.length),r.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||k(t,8,this.length),r.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||k(t,8,this.length),r.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,o){(t=+t,e|=0,n|=0,o)||z(this,t,e,n,Math.pow(2,8*n)-1,0);var r=1,i=0;for(this[e]=255&t;++i<n&&(r*=256);)this[e+i]=t/r&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,o){(t=+t,e|=0,n|=0,o)||z(this,t,e,n,Math.pow(2,8*n)-1,0);var r=n-1,i=1;for(this[e+r]=255&t;--r>=0&&(i*=256);)this[e+r]=t/i&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):D(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,o){if(t=+t,e|=0,!o){var r=Math.pow(2,8*n-1);z(this,t,e,n,r-1,-r)}var i=0,s=1,a=0;for(this[e]=255&t;++i<n&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,o){if(t=+t,e|=0,!o){var r=Math.pow(2,8*n-1);z(this,t,e,n,r-1,-r)}var i=n-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):D(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return O(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return O(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,o){if(n||(n=0),o||0===o||(o=this.length),e>=t.length&&(e=t.length),e||(e=0),o>0&&o<n&&(o=n),o===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(o<0)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),t.length-e<o-n&&(o=t.length-e+n);var r,i=o-n;if(this===t&&n<e&&e<o)for(r=i-1;r>=0;--r)t[r+e]=this[r+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(r=0;r<i;++r)t[r+e]=this[r+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},u.prototype.fill=function(t,e,n,o){if("string"==typeof t){if("string"==typeof e?(o=e,e=0,n=this.length):"string"==typeof n&&(o=n,n=this.length),1===t.length){var r=t.charCodeAt(0);r<256&&(t=r)}if(void 0!==o&&"string"!=typeof o)throw new TypeError("encoding must be a string");if("string"==typeof o&&!u.isEncoding(o))throw new TypeError("Unknown encoding: "+o)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var s=u.isBuffer(t)?t:Z(new u(t,o).toString()),a=s.length;for(i=0;i<n-e;++i)this[i+e]=s[i%a]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function Z(t,e){var n;e=e||1/0;for(var o=t.length,r=null,i=[],s=0;s<o;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!r){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===o){(e-=3)>-1&&i.push(239,191,189);continue}r=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(e-=3)>-1&&i.push(239,191,189);if(r=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function U(t){return o.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function F(t,e,n,o){for(var r=0;r<o&&!(r+n>=e.length||r>=t.length);++r)e[r+n]=t[r];return r}}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/hammerjs/hammer.js":
/*!*****************************************!*\
  !*** ./node_modules/hammerjs/hammer.js ***!
  \*****************************************/
/*! no static exports found */function(t,e,n){var o;
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */!function(r,i,s,a){"use strict";var u,c=["","webkit","Moz","MS","ms","o"],l=i.createElement("div"),h=Math.round,p=Math.abs,f=Date.now;function d(t,e,n){return setTimeout(E(t,n),e)}function v(t,e,n){return!!Array.isArray(t)&&(m(t,n[e],n),!0)}function m(t,e,n){var o;if(t)if(t.forEach)t.forEach(e,n);else if(void 0!==t.length)for(o=0;o<t.length;)e.call(n,t[o],o,t),o++;else for(o in t)t.hasOwnProperty(o)&&e.call(n,t[o],o,t)}function g(t,e,n){var o="DEPRECATED METHOD: "+e+"\n"+n+" AT \n";return function(){var e=new Error("get-stack-trace"),n=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",i=r.console&&(r.console.warn||r.console.log);return i&&i.call(r.console,o,n),t.apply(this,arguments)}}u="function"!=typeof Object.assign?function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var o=arguments[n];if(null!=o)for(var r in o)o.hasOwnProperty(r)&&(e[r]=o[r])}return e}:Object.assign;var y=g((function(t,e,n){for(var o=Object.keys(e),r=0;r<o.length;)(!n||n&&void 0===t[o[r]])&&(t[o[r]]=e[o[r]]),r++;return t}),"extend","Use `assign`."),b=g((function(t,e){return y(t,e,!0)}),"merge","Use `assign`.");function w(t,e,n){var o,r=e.prototype;(o=t.prototype=Object.create(r)).constructor=t,o._super=r,n&&u(o,n)}function E(t,e){return function(){return t.apply(e,arguments)}}function _(t,e){return"function"==typeof t?t.apply(e&&e[0]||void 0,e):t}function S(t,e){return void 0===t?e:t}function T(t,e,n){m(P(e),(function(e){t.addEventListener(e,n,!1)}))}function x(t,e,n){m(P(e),(function(e){t.removeEventListener(e,n,!1)}))}function A(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function C(t,e){return t.indexOf(e)>-1}function P(t){return t.trim().split(/\s+/g)}function M(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var o=0;o<t.length;){if(n&&t[o][n]==e||!n&&t[o]===e)return o;o++}return-1}function I(t){return Array.prototype.slice.call(t,0)}function k(t,e,n){for(var o=[],r=[],i=0;i<t.length;){var s=e?t[i][e]:t[i];M(r,s)<0&&o.push(t[i]),r[i]=s,i++}return n&&(o=e?o.sort((function(t,n){return t[e]>n[e]})):o.sort()),o}function z(t,e){for(var n,o,r=e[0].toUpperCase()+e.slice(1),i=0;i<c.length;){if((o=(n=c[i])?n+r:e)in t)return o;i++}}var B=1;function D(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||r}var R="ontouchstart"in r,O=void 0!==z(r,"PointerEvent"),L=R&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),N=["x","y"],j=["clientX","clientY"];function Z(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){_(t.options.enable,[t])&&n.handler(e)},this.init()}function U(t,e,n){var o=n.pointers.length,r=n.changedPointers.length,i=1&e&&o-r==0,s=12&e&&o-r==0;n.isFirst=!!i,n.isFinal=!!s,i&&(t.session={}),n.eventType=e,function(t,e){var n=t.session,o=e.pointers,r=o.length;n.firstInput||(n.firstInput=F(e));r>1&&!n.firstMultiple?n.firstMultiple=F(e):1===r&&(n.firstMultiple=!1);var i=n.firstInput,s=n.firstMultiple,a=s?s.center:i.center,u=e.center=q(o);e.timeStamp=f(),e.deltaTime=e.timeStamp-i.timeStamp,e.angle=W(a,u),e.distance=X(a,u),function(t,e){var n=e.center,o=t.offsetDelta||{},r=t.prevDelta||{},i=t.prevInput||{};1!==e.eventType&&4!==i.eventType||(r=t.prevDelta={x:i.deltaX||0,y:i.deltaY||0},o=t.offsetDelta={x:n.x,y:n.y});e.deltaX=r.x+(n.x-o.x),e.deltaY=r.y+(n.y-o.y)}(n,e),e.offsetDirection=V(e.deltaX,e.deltaY);var c=Y(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=c.x,e.overallVelocityY=c.y,e.overallVelocity=p(c.x)>p(c.y)?c.x:c.y,e.scale=s?(l=s.pointers,h=o,X(h[0],h[1],j)/X(l[0],l[1],j)):1,e.rotation=s?function(t,e){return W(e[1],e[0],j)+W(t[1],t[0],j)}(s.pointers,o):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,function(t,e){var n,o,r,i,s=t.lastInterval||e,a=e.timeStamp-s.timeStamp;if(8!=e.eventType&&(a>25||void 0===s.velocity)){var u=e.deltaX-s.deltaX,c=e.deltaY-s.deltaY,l=Y(a,u,c);o=l.x,r=l.y,n=p(l.x)>p(l.y)?l.x:l.y,i=V(u,c),t.lastInterval=e}else n=s.velocity,o=s.velocityX,r=s.velocityY,i=s.direction;e.velocity=n,e.velocityX=o,e.velocityY=r,e.direction=i}(n,e);var l,h;var d=t.element;A(e.srcEvent.target,d)&&(d=e.srcEvent.target);e.target=d}(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function F(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:h(t.pointers[n].clientX),clientY:h(t.pointers[n].clientY)},n++;return{timeStamp:f(),pointers:e,center:q(e),deltaX:t.deltaX,deltaY:t.deltaY}}function q(t){var e=t.length;if(1===e)return{x:h(t[0].clientX),y:h(t[0].clientY)};for(var n=0,o=0,r=0;r<e;)n+=t[r].clientX,o+=t[r].clientY,r++;return{x:h(n/e),y:h(o/e)}}function Y(t,e,n){return{x:e/t||0,y:n/t||0}}function V(t,e){return t===e?1:p(t)>=p(e)?t<0?2:4:e<0?8:16}function X(t,e,n){n||(n=N);var o=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(o*o+r*r)}function W(t,e,n){n||(n=N);var o=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,o)/Math.PI}Z.prototype={handler:function(){},init:function(){this.evEl&&T(this.element,this.evEl,this.domHandler),this.evTarget&&T(this.target,this.evTarget,this.domHandler),this.evWin&&T(D(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&x(this.element,this.evEl,this.domHandler),this.evTarget&&x(this.target,this.evTarget,this.domHandler),this.evWin&&x(D(this.element),this.evWin,this.domHandler)}};var H={mousedown:1,mousemove:2,mouseup:4};function G(){this.evEl="mousedown",this.evWin="mousemove mouseup",this.pressed=!1,Z.apply(this,arguments)}w(G,Z,{handler:function(t){var e=H[t.type];1&e&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=4),this.pressed&&(4&e&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var K={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8},J={2:"touch",3:"pen",4:"mouse",5:"kinect"},$="pointerdown",Q="pointermove pointerup pointercancel";function tt(){this.evEl=$,this.evWin=Q,Z.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}r.MSPointerEvent&&!r.PointerEvent&&($="MSPointerDown",Q="MSPointerMove MSPointerUp MSPointerCancel"),w(tt,Z,{handler:function(t){var e=this.store,n=!1,o=t.type.toLowerCase().replace("ms",""),r=K[o],i=J[t.pointerType]||t.pointerType,s="touch"==i,a=M(e,t.pointerId,"pointerId");1&r&&(0===t.button||s)?a<0&&(e.push(t),a=e.length-1):12&r&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:i,srcEvent:t}),n&&e.splice(a,1))}});var et={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function nt(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,Z.apply(this,arguments)}function ot(t,e){var n=I(t.touches),o=I(t.changedTouches);return 12&e&&(n=k(n.concat(o),"identifier",!0)),[n,o]}w(nt,Z,{handler:function(t){var e=et[t.type];if(1===e&&(this.started=!0),this.started){var n=ot.call(this,t,e);12&e&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}}});var rt={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function it(){this.evTarget="touchstart touchmove touchend touchcancel",this.targetIds={},Z.apply(this,arguments)}function st(t,e){var n=I(t.touches),o=this.targetIds;if(3&e&&1===n.length)return o[n[0].identifier]=!0,[n,n];var r,i,s=I(t.changedTouches),a=[],u=this.target;if(i=n.filter((function(t){return A(t.target,u)})),1===e)for(r=0;r<i.length;)o[i[r].identifier]=!0,r++;for(r=0;r<s.length;)o[s[r].identifier]&&a.push(s[r]),12&e&&delete o[s[r].identifier],r++;return a.length?[k(i.concat(a),"identifier",!0),a]:void 0}w(it,Z,{handler:function(t){var e=rt[t.type],n=st.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}});function at(){Z.apply(this,arguments);var t=E(this.handler,this);this.touch=new it(this.manager,t),this.mouse=new G(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function ut(t,e){1&t?(this.primaryTouch=e.changedPointers[0].identifier,ct.call(this,e)):12&t&&ct.call(this,e)}function ct(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var o=this.lastTouches;setTimeout((function(){var t=o.indexOf(n);t>-1&&o.splice(t,1)}),2500)}}function lt(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,o=0;o<this.lastTouches.length;o++){var r=this.lastTouches[o],i=Math.abs(e-r.x),s=Math.abs(n-r.y);if(i<=25&&s<=25)return!0}return!1}w(at,Z,{handler:function(t,e,n){var o="touch"==n.pointerType,r="mouse"==n.pointerType;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(o)ut.call(this,e,n);else if(r&&lt.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var ht=z(l.style,"touchAction"),pt=void 0!==ht,ft=function(){if(!pt)return!1;var t={},e=r.CSS&&r.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){t[n]=!e||r.CSS.supports("touch-action",n)})),t}();function dt(t,e){this.manager=t,this.set(e)}dt.prototype={set:function(t){"compute"==t&&(t=this.compute()),pt&&this.manager.element.style&&ft[t]&&(this.manager.element.style[ht]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return m(this.manager.recognizers,(function(e){_(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(C(t,"none"))return"none";var e=C(t,"pan-x"),n=C(t,"pan-y");if(e&&n)return"none";if(e||n)return e?"pan-x":"pan-y";if(C(t,"manipulation"))return"manipulation";return"auto"}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var o=this.actions,r=C(o,"none")&&!ft.none,i=C(o,"pan-y")&&!ft["pan-y"],s=C(o,"pan-x")&&!ft["pan-x"];if(r){var a=1===t.pointers.length,u=t.distance<2,c=t.deltaTime<250;if(a&&u&&c)return}if(!s||!i)return r||i&&6&n||s&&24&n?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};function vt(t){this.options=u({},this.defaults,t||{}),this.id=B++,this.manager=null,this.options.enable=S(this.options.enable,!0),this.state=1,this.simultaneous={},this.requireFail=[]}function mt(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}function gt(t){return 16==t?"down":8==t?"up":2==t?"left":4==t?"right":""}function yt(t,e){var n=e.manager;return n?n.get(t):t}function bt(){vt.apply(this,arguments)}function wt(){bt.apply(this,arguments),this.pX=null,this.pY=null}function Et(){bt.apply(this,arguments)}function _t(){vt.apply(this,arguments),this._timer=null,this._input=null}function St(){bt.apply(this,arguments)}function Tt(){bt.apply(this,arguments)}function xt(){vt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function At(t,e){return(e=e||{}).recognizers=S(e.recognizers,At.defaults.preset),new Ct(t,e)}vt.prototype={defaults:{},set:function(t){return u(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(v(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=yt(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return v(t,"dropRecognizeWith",this)||(t=yt(t,this),delete this.simultaneous[t.id]),this},requireFailure:function(t){if(v(t,"requireFailure",this))return this;var e=this.requireFail;return-1===M(e,t=yt(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(v(t,"dropRequireFailure",this))return this;t=yt(t,this);var e=M(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,n=this.state;function o(n){e.manager.emit(n,t)}n<8&&o(e.options.event+mt(n)),o(e.options.event),t.additionalEvent&&o(t.additionalEvent),n>=8&&o(e.options.event+mt(n))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(33&this.requireFail[t].state))return!1;t++}return!0},recognize:function(t){var e=u({},t);if(!_(this.options.enable,[this,e]))return this.reset(),void(this.state=32);56&this.state&&(this.state=1),this.state=this.process(e),30&this.state&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},w(bt,vt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,o=6&e,r=this.attrTest(t);return o&&(8&n||!r)?16|e:o||r?4&n?8|e:2&e?4|e:2:32}}),w(wt,bt,{defaults:{event:"pan",threshold:10,pointers:1,direction:30},getTouchAction:function(){var t=this.options.direction,e=[];return 6&t&&e.push("pan-y"),24&t&&e.push("pan-x"),e},directionTest:function(t){var e=this.options,n=!0,o=t.distance,r=t.direction,i=t.deltaX,s=t.deltaY;return r&e.direction||(6&e.direction?(r=0===i?1:i<0?2:4,n=i!=this.pX,o=Math.abs(t.deltaX)):(r=0===s?1:s<0?8:16,n=s!=this.pY,o=Math.abs(t.deltaY))),t.direction=r,n&&o>e.threshold&&r&e.direction},attrTest:function(t){return bt.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=gt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),w(Et,bt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||2&this.state)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),w(_t,vt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return["auto"]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,o=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!o||!n||12&t.eventType&&!r)this.reset();else if(1&t.eventType)this.reset(),this._timer=d((function(){this.state=8,this.tryEmit()}),e.time,this);else if(4&t.eventType)return 8;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){8===this.state&&(t&&4&t.eventType?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=f(),this.manager.emit(this.options.event,this._input)))}}),w(St,bt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||2&this.state)}}),w(Tt,bt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:30,pointers:1},getTouchAction:function(){return wt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return 30&n?e=t.overallVelocity:6&n?e=t.overallVelocityX:24&n&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&p(e)>this.options.velocity&&4&t.eventType},emit:function(t){var e=gt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),w(xt,vt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return["manipulation"]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,o=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),1&t.eventType&&0===this.count)return this.failTimeout();if(o&&r&&n){if(4!=t.eventType)return this.failTimeout();var i=!this.pTime||t.timeStamp-this.pTime<e.interval,s=!this.pCenter||X(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,s&&i?this.count+=1:this.count=1,this._input=t,0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=d((function(){this.state=8,this.tryEmit()}),e.interval,this),2):8}return 32},failTimeout:function(){return this._timer=d((function(){this.state=32}),this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),At.VERSION="2.0.7",At.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[St,{enable:!1}],[Et,{enable:!1},["rotate"]],[Tt,{direction:6}],[wt,{direction:6},["swipe"]],[xt],[xt,{event:"doubletap",taps:2},["tap"]],[_t]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function Ct(t,e){var n;this.options=u({},At.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((n=this).options.inputClass||(O?tt:L?it:R?at:G))(n,U),this.touchAction=new dt(this,this.options.touchAction),Pt(this,!0),m(this.options.recognizers,(function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}function Pt(t,e){var n,o=t.element;o.style&&(m(t.options.cssProps,(function(r,i){n=z(o.style,i),e?(t.oldCssProps[n]=o.style[n],o.style[n]=r):o.style[n]=t.oldCssProps[n]||""})),e||(t.oldCssProps={}))}Ct.prototype={set:function(t){return u(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var n;this.touchAction.preventDefaults(t);var o=this.recognizers,r=e.curRecognizer;(!r||r&&8&r.state)&&(r=e.curRecognizer=null);for(var i=0;i<o.length;)n=o[i],2===e.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&14&n.state&&(r=e.curRecognizer=n),i++}},get:function(t){if(t instanceof vt)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(v(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(v(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=M(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(void 0!==t&&void 0!==e){var n=this.handlers;return m(P(t),(function(t){n[t]=n[t]||[],n[t].push(e)})),this}},off:function(t,e){if(void 0!==t){var n=this.handlers;return m(P(t),(function(t){e?n[t]&&n[t].splice(M(n[t],e),1):delete n[t]})),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var n=i.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var o=0;o<n.length;)n[o](e),o++}},destroy:function(){this.element&&Pt(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},u(At,{INPUT_START:1,INPUT_MOVE:2,INPUT_END:4,INPUT_CANCEL:8,STATE_POSSIBLE:1,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:32,DIRECTION_NONE:1,DIRECTION_LEFT:2,DIRECTION_RIGHT:4,DIRECTION_UP:8,DIRECTION_DOWN:16,DIRECTION_HORIZONTAL:6,DIRECTION_VERTICAL:24,DIRECTION_ALL:30,Manager:Ct,Input:Z,TouchAction:dt,TouchInput:it,MouseInput:G,PointerEventInput:tt,TouchMouseInput:at,SingleTouchInput:nt,Recognizer:vt,AttrRecognizer:bt,Tap:xt,Pan:wt,Swipe:Tt,Pinch:Et,Rotate:St,Press:_t,on:T,off:x,each:m,merge:b,extend:y,assign:u,inherit:w,bindFn:E,prefixed:z}),(void 0!==r?r:"undefined"!=typeof self?self:{}).Hammer=At,void 0===(o=function(){return At}.call(e,n,e,t))||(t.exports=o)}(window,document)},"./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */function(t,e){e.read=function(t,e,n,o,r){var i,s,a=8*r-o-1,u=(1<<a)-1,c=u>>1,l=-7,h=n?r-1:0,p=n?-1:1,f=t[e+h];for(h+=p,i=f&(1<<-l)-1,f>>=-l,l+=a;l>0;i=256*i+t[e+h],h+=p,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=o;l>0;s=256*s+t[e+h],h+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,o),i-=c}return(f?-1:1)*s*Math.pow(2,i-o)},e.write=function(t,e,n,o,r,i){var s,a,u,c=8*i-r-1,l=(1<<c)-1,h=l>>1,p=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,f=o?0:i-1,d=o?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(e*u-1)*Math.pow(2,r),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,r),s=0));r>=8;t[n+f]=255&a,f+=d,a/=256,r-=8);for(s=s<<r|a,c+=r;c>0;t[n+f]=255&s,f+=d,s/=256,c-=8);t[n+f-d]|=128*v}},"./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},"./node_modules/svg-pan-zoom/src/browserify.js":
/*!*****************************************************!*\
  !*** ./node_modules/svg-pan-zoom/src/browserify.js ***!
  \*****************************************************/
/*! no static exports found */function(t,e,n){var o=n(/*! ./svg-pan-zoom.js */"./node_modules/svg-pan-zoom/src/svg-pan-zoom.js");t.exports=o},"./node_modules/svg-pan-zoom/src/control-icons.js":
/*!********************************************************!*\
  !*** ./node_modules/svg-pan-zoom/src/control-icons.js ***!
  \********************************************************/
/*! no static exports found */function(t,e,n){var o=n(/*! ./svg-utilities */"./node_modules/svg-pan-zoom/src/svg-utilities.js");t.exports={enable:function(t){var e=t.svg.querySelector("defs");if(e||(e=document.createElementNS(o.svgNS,"defs"),t.svg.appendChild(e)),!e.querySelector("style#svg-pan-zoom-controls-styles")){var n=document.createElementNS(o.svgNS,"style");n.setAttribute("id","svg-pan-zoom-controls-styles"),n.setAttribute("type","text/css"),n.textContent=".svg-pan-zoom-control { cursor: pointer; fill: black; fill-opacity: 0.333; } .svg-pan-zoom-control:hover { fill-opacity: 0.8; } .svg-pan-zoom-control-background { fill: white; fill-opacity: 0.5; } .svg-pan-zoom-control-background { fill-opacity: 0.8; }",e.appendChild(n)}var r=document.createElementNS(o.svgNS,"g");r.setAttribute("id","svg-pan-zoom-controls"),r.setAttribute("transform","translate("+(t.width-70)+" "+(t.height-76)+") scale(0.75)"),r.setAttribute("class","svg-pan-zoom-control"),r.appendChild(this._createZoomIn(t)),r.appendChild(this._createZoomReset(t)),r.appendChild(this._createZoomOut(t)),t.svg.appendChild(r),t.controlIcons=r},_createZoomIn:function(t){var e=document.createElementNS(o.svgNS,"g");e.setAttribute("id","svg-pan-zoom-zoom-in"),e.setAttribute("transform","translate(30.5 5) scale(0.015)"),e.setAttribute("class","svg-pan-zoom-control"),e.addEventListener("click",(function(){t.getPublicInstance().zoomIn()}),!1),e.addEventListener("touchstart",(function(){t.getPublicInstance().zoomIn()}),!1);var n=document.createElementNS(o.svgNS,"rect");n.setAttribute("x","0"),n.setAttribute("y","0"),n.setAttribute("width","1500"),n.setAttribute("height","1400"),n.setAttribute("class","svg-pan-zoom-control-background"),e.appendChild(n);var r=document.createElementNS(o.svgNS,"path");return r.setAttribute("d","M1280 576v128q0 26 -19 45t-45 19h-320v320q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-320h-320q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h320v-320q0 -26 19 -45t45 -19h128q26 0 45 19t19 45v320h320q26 0 45 19t19 45zM1536 1120v-960 q0 -119 -84.5 -203.5t-203.5 -84.5h-960q-119 0 -203.5 84.5t-84.5 203.5v960q0 119 84.5 203.5t203.5 84.5h960q119 0 203.5 -84.5t84.5 -203.5z"),r.setAttribute("class","svg-pan-zoom-control-element"),e.appendChild(r),e},_createZoomReset:function(t){var e=document.createElementNS(o.svgNS,"g");e.setAttribute("id","svg-pan-zoom-reset-pan-zoom"),e.setAttribute("transform","translate(5 35) scale(0.4)"),e.setAttribute("class","svg-pan-zoom-control"),e.addEventListener("click",(function(){t.getPublicInstance().reset()}),!1),e.addEventListener("touchstart",(function(){t.getPublicInstance().reset()}),!1);var n=document.createElementNS(o.svgNS,"rect");n.setAttribute("x","2"),n.setAttribute("y","2"),n.setAttribute("width","182"),n.setAttribute("height","58"),n.setAttribute("class","svg-pan-zoom-control-background"),e.appendChild(n);var r=document.createElementNS(o.svgNS,"path");r.setAttribute("d","M33.051,20.632c-0.742-0.406-1.854-0.609-3.338-0.609h-7.969v9.281h7.769c1.543,0,2.701-0.188,3.473-0.562c1.365-0.656,2.048-1.953,2.048-3.891C35.032,22.757,34.372,21.351,33.051,20.632z"),r.setAttribute("class","svg-pan-zoom-control-element"),e.appendChild(r);var i=document.createElementNS(o.svgNS,"path");return i.setAttribute("d","M170.231,0.5H15.847C7.102,0.5,0.5,5.708,0.5,11.84v38.861C0.5,56.833,7.102,61.5,15.847,61.5h154.384c8.745,0,15.269-4.667,15.269-10.798V11.84C185.5,5.708,178.976,0.5,170.231,0.5z M42.837,48.569h-7.969c-0.219-0.766-0.375-1.383-0.469-1.852c-0.188-0.969-0.289-1.961-0.305-2.977l-0.047-3.211c-0.03-2.203-0.41-3.672-1.142-4.406c-0.732-0.734-2.103-1.102-4.113-1.102h-7.05v13.547h-7.055V14.022h16.524c2.361,0.047,4.178,0.344,5.45,0.891c1.272,0.547,2.351,1.352,3.234,2.414c0.731,0.875,1.31,1.844,1.737,2.906s0.64,2.273,0.64,3.633c0,1.641-0.414,3.254-1.242,4.84s-2.195,2.707-4.102,3.363c1.594,0.641,2.723,1.551,3.387,2.73s0.996,2.98,0.996,5.402v2.32c0,1.578,0.063,2.648,0.19,3.211c0.19,0.891,0.635,1.547,1.333,1.969V48.569z M75.579,48.569h-26.18V14.022h25.336v6.117H56.454v7.336h16.781v6H56.454v8.883h19.125V48.569z M104.497,46.331c-2.44,2.086-5.887,3.129-10.34,3.129c-4.548,0-8.125-1.027-10.731-3.082s-3.909-4.879-3.909-8.473h6.891c0.224,1.578,0.662,2.758,1.316,3.539c1.196,1.422,3.246,2.133,6.15,2.133c1.739,0,3.151-0.188,4.236-0.562c2.058-0.719,3.087-2.055,3.087-4.008c0-1.141-0.504-2.023-1.512-2.648c-1.008-0.609-2.607-1.148-4.796-1.617l-3.74-0.82c-3.676-0.812-6.201-1.695-7.576-2.648c-2.328-1.594-3.492-4.086-3.492-7.477c0-3.094,1.139-5.664,3.417-7.711s5.623-3.07,10.036-3.07c3.685,0,6.829,0.965,9.431,2.895c2.602,1.93,3.966,4.73,4.093,8.402h-6.938c-0.128-2.078-1.057-3.555-2.787-4.43c-1.154-0.578-2.587-0.867-4.301-0.867c-1.907,0-3.428,0.375-4.565,1.125c-1.138,0.75-1.706,1.797-1.706,3.141c0,1.234,0.561,2.156,1.682,2.766c0.721,0.406,2.25,0.883,4.589,1.43l6.063,1.43c2.657,0.625,4.648,1.461,5.975,2.508c2.059,1.625,3.089,3.977,3.089,7.055C108.157,41.624,106.937,44.245,104.497,46.331z M139.61,48.569h-26.18V14.022h25.336v6.117h-18.281v7.336h16.781v6h-16.781v8.883h19.125V48.569z M170.337,20.14h-10.336v28.43h-7.266V20.14h-10.383v-6.117h27.984V20.14z"),i.setAttribute("class","svg-pan-zoom-control-element"),e.appendChild(i),e},_createZoomOut:function(t){var e=document.createElementNS(o.svgNS,"g");e.setAttribute("id","svg-pan-zoom-zoom-out"),e.setAttribute("transform","translate(30.5 70) scale(0.015)"),e.setAttribute("class","svg-pan-zoom-control"),e.addEventListener("click",(function(){t.getPublicInstance().zoomOut()}),!1),e.addEventListener("touchstart",(function(){t.getPublicInstance().zoomOut()}),!1);var n=document.createElementNS(o.svgNS,"rect");n.setAttribute("x","0"),n.setAttribute("y","0"),n.setAttribute("width","1500"),n.setAttribute("height","1400"),n.setAttribute("class","svg-pan-zoom-control-background"),e.appendChild(n);var r=document.createElementNS(o.svgNS,"path");return r.setAttribute("d","M1280 576v128q0 26 -19 45t-45 19h-896q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h896q26 0 45 19t19 45zM1536 1120v-960q0 -119 -84.5 -203.5t-203.5 -84.5h-960q-119 0 -203.5 84.5t-84.5 203.5v960q0 119 84.5 203.5t203.5 84.5h960q119 0 203.5 -84.5 t84.5 -203.5z"),r.setAttribute("class","svg-pan-zoom-control-element"),e.appendChild(r),e},disable:function(t){t.controlIcons&&(t.controlIcons.parentNode.removeChild(t.controlIcons),t.controlIcons=null)}}},"./node_modules/svg-pan-zoom/src/shadow-viewport.js":
/*!**********************************************************!*\
  !*** ./node_modules/svg-pan-zoom/src/shadow-viewport.js ***!
  \**********************************************************/
/*! no static exports found */function(t,e,n){var o=n(/*! ./svg-utilities */"./node_modules/svg-pan-zoom/src/svg-utilities.js"),r=n(/*! ./utilities */"./node_modules/svg-pan-zoom/src/utilities.js"),i=function(t,e){this.init(t,e)};i.prototype.init=function(t,e){this.viewport=t,this.options=e,this.originalState={zoom:1,x:0,y:0},this.activeState={zoom:1,x:0,y:0},this.updateCTMCached=r.proxy(this.updateCTM,this),this.requestAnimationFrame=r.createRequestAnimationFrame(this.options.refreshRate),this.viewBox={x:0,y:0,width:0,height:0},this.cacheViewBox();var n=this.processCTM();this.setCTM(n),this.updateCTM()},i.prototype.cacheViewBox=function(){var t=this.options.svg.getAttribute("viewBox");if(t){var e=t.split(/[\s\,]/).filter((function(t){return t})).map(parseFloat);this.viewBox.x=e[0],this.viewBox.y=e[1],this.viewBox.width=e[2],this.viewBox.height=e[3];var n=Math.min(this.options.width/this.viewBox.width,this.options.height/this.viewBox.height);this.activeState.zoom=n,this.activeState.x=(this.options.width-this.viewBox.width*n)/2,this.activeState.y=(this.options.height-this.viewBox.height*n)/2,this.updateCTMOnNextFrame(),this.options.svg.removeAttribute("viewBox")}else this.simpleViewBoxCache()},i.prototype.simpleViewBoxCache=function(){var t=this.viewport.getBBox();this.viewBox.x=t.x,this.viewBox.y=t.y,this.viewBox.width=t.width,this.viewBox.height=t.height},i.prototype.getViewBox=function(){return r.extend({},this.viewBox)},i.prototype.processCTM=function(){var t,e=this.getCTM();(this.options.fit||this.options.contain)&&(t=this.options.fit?Math.min(this.options.width/this.viewBox.width,this.options.height/this.viewBox.height):Math.max(this.options.width/this.viewBox.width,this.options.height/this.viewBox.height),e.a=t,e.d=t,e.e=-this.viewBox.x*t,e.f=-this.viewBox.y*t);if(this.options.center){var n=.5*(this.options.width-(this.viewBox.width+2*this.viewBox.x)*e.a),o=.5*(this.options.height-(this.viewBox.height+2*this.viewBox.y)*e.a);e.e=n,e.f=o}return this.originalState.zoom=e.a,this.originalState.x=e.e,this.originalState.y=e.f,e},i.prototype.getOriginalState=function(){return r.extend({},this.originalState)},i.prototype.getState=function(){return r.extend({},this.activeState)},i.prototype.getZoom=function(){return this.activeState.zoom},i.prototype.getRelativeZoom=function(){return this.activeState.zoom/this.originalState.zoom},i.prototype.computeRelativeZoom=function(t){return t/this.originalState.zoom},i.prototype.getPan=function(){return{x:this.activeState.x,y:this.activeState.y}},i.prototype.getCTM=function(){var t=this.options.svg.createSVGMatrix();return t.a=this.activeState.zoom,t.b=0,t.c=0,t.d=this.activeState.zoom,t.e=this.activeState.x,t.f=this.activeState.y,t},i.prototype.setCTM=function(t){var e=this.isZoomDifferent(t),n=this.isPanDifferent(t);if(e||n){if(e&&(!1===this.options.beforeZoom(this.getRelativeZoom(),this.computeRelativeZoom(t.a))?(t.a=t.d=this.activeState.zoom,e=!1):(this.updateCache(t),this.options.onZoom(this.getRelativeZoom()))),n){var o=this.options.beforePan(this.getPan(),{x:t.e,y:t.f}),i=!1,s=!1;!1===o?(t.e=this.getPan().x,t.f=this.getPan().y,i=s=!0):r.isObject(o)&&(!1===o.x?(t.e=this.getPan().x,i=!0):r.isNumber(o.x)&&(t.e=o.x),!1===o.y?(t.f=this.getPan().y,s=!0):r.isNumber(o.y)&&(t.f=o.y)),i&&s||!this.isPanDifferent(t)?n=!1:(this.updateCache(t),this.options.onPan(this.getPan()))}(e||n)&&this.updateCTMOnNextFrame()}},i.prototype.isZoomDifferent=function(t){return this.activeState.zoom!==t.a},i.prototype.isPanDifferent=function(t){return this.activeState.x!==t.e||this.activeState.y!==t.f},i.prototype.updateCache=function(t){this.activeState.zoom=t.a,this.activeState.x=t.e,this.activeState.y=t.f},i.prototype.pendingUpdate=!1,i.prototype.updateCTMOnNextFrame=function(){this.pendingUpdate||(this.pendingUpdate=!0,this.requestAnimationFrame.call(window,this.updateCTMCached))},i.prototype.updateCTM=function(){var t=this.getCTM();o.setCTM(this.viewport,t,this.defs),this.pendingUpdate=!1,this.options.onUpdatedCTM&&this.options.onUpdatedCTM(t)},t.exports=function(t,e){return new i(t,e)}},"./node_modules/svg-pan-zoom/src/svg-pan-zoom.js":
/*!*******************************************************!*\
  !*** ./node_modules/svg-pan-zoom/src/svg-pan-zoom.js ***!
  \*******************************************************/
/*! no static exports found */function(t,e,n){var o=n(/*! ./uniwheel */"./node_modules/svg-pan-zoom/src/uniwheel.js"),r=n(/*! ./control-icons */"./node_modules/svg-pan-zoom/src/control-icons.js"),i=n(/*! ./utilities */"./node_modules/svg-pan-zoom/src/utilities.js"),s=n(/*! ./svg-utilities */"./node_modules/svg-pan-zoom/src/svg-utilities.js"),a=n(/*! ./shadow-viewport */"./node_modules/svg-pan-zoom/src/shadow-viewport.js"),u=function(t,e){this.init(t,e)},c={viewportSelector:".svg-pan-zoom_viewport",panEnabled:!0,controlIconsEnabled:!1,zoomEnabled:!0,dblClickZoomEnabled:!0,mouseWheelZoomEnabled:!0,preventMouseEventsDefault:!0,zoomScaleSensitivity:.1,minZoom:.5,maxZoom:10,fit:!0,contain:!1,center:!0,refreshRate:"auto",beforeZoom:null,onZoom:null,beforePan:null,onPan:null,customEventsHandler:null,eventsListenerElement:null,onUpdatedCTM:null},l={passive:!0};u.prototype.init=function(t,e){var n=this;this.svg=t,this.defs=t.querySelector("defs"),s.setupSvgAttributes(this.svg),this.options=i.extend(i.extend({},c),e),this.state="none";var o=s.getBoundingClientRectNormalized(t);this.width=o.width,this.height=o.height,this.viewport=a(s.getOrCreateViewport(this.svg,this.options.viewportSelector),{svg:this.svg,width:this.width,height:this.height,fit:this.options.fit,contain:this.options.contain,center:this.options.center,refreshRate:this.options.refreshRate,beforeZoom:function(t,e){if(n.viewport&&n.options.beforeZoom)return n.options.beforeZoom(t,e)},onZoom:function(t){if(n.viewport&&n.options.onZoom)return n.options.onZoom(t)},beforePan:function(t,e){if(n.viewport&&n.options.beforePan)return n.options.beforePan(t,e)},onPan:function(t){if(n.viewport&&n.options.onPan)return n.options.onPan(t)},onUpdatedCTM:function(t){if(n.viewport&&n.options.onUpdatedCTM)return n.options.onUpdatedCTM(t)}});var u=this.getPublicInstance();u.setBeforeZoom(this.options.beforeZoom),u.setOnZoom(this.options.onZoom),u.setBeforePan(this.options.beforePan),u.setOnPan(this.options.onPan),u.setOnUpdatedCTM(this.options.onUpdatedCTM),this.options.controlIconsEnabled&&r.enable(this),this.lastMouseWheelEventTime=Date.now(),this.setupHandlers()},u.prototype.setupHandlers=function(){var t=this,e=null;if(this.eventListeners={mousedown:function(n){var o=t.handleMouseDown(n,e);return e=n,o},touchstart:function(n){var o=t.handleMouseDown(n,e);return e=n,o},mouseup:function(e){return t.handleMouseUp(e)},touchend:function(e){return t.handleMouseUp(e)},mousemove:function(e){return t.handleMouseMove(e)},touchmove:function(e){return t.handleMouseMove(e)},mouseleave:function(e){return t.handleMouseUp(e)},touchleave:function(e){return t.handleMouseUp(e)},touchcancel:function(e){return t.handleMouseUp(e)}},null!=this.options.customEventsHandler){this.options.customEventsHandler.init({svgElement:this.svg,eventsListenerElement:this.options.eventsListenerElement,instance:this.getPublicInstance()});var n=this.options.customEventsHandler.haltEventListeners;if(n&&n.length)for(var o=n.length-1;o>=0;o--)this.eventListeners.hasOwnProperty(n[o])&&delete this.eventListeners[n[o]]}for(var r in this.eventListeners)(this.options.eventsListenerElement||this.svg).addEventListener(r,this.eventListeners[r],!this.options.preventMouseEventsDefault&&l);this.options.mouseWheelZoomEnabled&&(this.options.mouseWheelZoomEnabled=!1,this.enableMouseWheelZoom())},u.prototype.enableMouseWheelZoom=function(){if(!this.options.mouseWheelZoomEnabled){var t=this;this.wheelListener=function(e){return t.handleMouseWheel(e)};var e=!this.options.preventMouseEventsDefault;o.on(this.options.eventsListenerElement||this.svg,this.wheelListener,e),this.options.mouseWheelZoomEnabled=!0}},u.prototype.disableMouseWheelZoom=function(){if(this.options.mouseWheelZoomEnabled){var t=!this.options.preventMouseEventsDefault;o.off(this.options.eventsListenerElement||this.svg,this.wheelListener,t),this.options.mouseWheelZoomEnabled=!1}},u.prototype.handleMouseWheel=function(t){if(this.options.zoomEnabled&&"none"===this.state){this.options.preventMouseEventsDefault&&(t.preventDefault?t.preventDefault():t.returnValue=!1);var e=t.deltaY||1,n=Date.now()-this.lastMouseWheelEventTime,o=3+Math.max(0,30-n);this.lastMouseWheelEventTime=Date.now(),"deltaMode"in t&&0===t.deltaMode&&t.wheelDelta&&(e=0===t.deltaY?0:Math.abs(t.wheelDelta)/t.deltaY),e=-.3<e&&e<.3?e:(e>0?1:-1)*Math.log(Math.abs(e)+10)/o;var r=this.svg.getScreenCTM().inverse(),i=s.getEventPoint(t,this.svg).matrixTransform(r),a=Math.pow(1+this.options.zoomScaleSensitivity,-1*e);this.zoomAtPoint(a,i)}},u.prototype.zoomAtPoint=function(t,e,n){var o=this.viewport.getOriginalState();n?(t=Math.max(this.options.minZoom*o.zoom,Math.min(this.options.maxZoom*o.zoom,t)),t/=this.getZoom()):this.getZoom()*t<this.options.minZoom*o.zoom?t=this.options.minZoom*o.zoom/this.getZoom():this.getZoom()*t>this.options.maxZoom*o.zoom&&(t=this.options.maxZoom*o.zoom/this.getZoom());var r=this.viewport.getCTM(),i=e.matrixTransform(r.inverse()),s=this.svg.createSVGMatrix().translate(i.x,i.y).scale(t).translate(-i.x,-i.y),a=r.multiply(s);a.a!==r.a&&this.viewport.setCTM(a)},u.prototype.zoom=function(t,e){this.zoomAtPoint(t,s.getSvgCenterPoint(this.svg,this.width,this.height),e)},u.prototype.publicZoom=function(t,e){e&&(t=this.computeFromRelativeZoom(t)),this.zoom(t,e)},u.prototype.publicZoomAtPoint=function(t,e,n){if(n&&(t=this.computeFromRelativeZoom(t)),"SVGPoint"!==i.getType(e)){if(!("x"in e)||!("y"in e))throw new Error("Given point is invalid");e=s.createSVGPoint(this.svg,e.x,e.y)}this.zoomAtPoint(t,e,n)},u.prototype.getZoom=function(){return this.viewport.getZoom()},u.prototype.getRelativeZoom=function(){return this.viewport.getRelativeZoom()},u.prototype.computeFromRelativeZoom=function(t){return t*this.viewport.getOriginalState().zoom},u.prototype.resetZoom=function(){var t=this.viewport.getOriginalState();this.zoom(t.zoom,!0)},u.prototype.resetPan=function(){this.pan(this.viewport.getOriginalState())},u.prototype.reset=function(){this.resetZoom(),this.resetPan()},u.prototype.handleDblClick=function(t){var e;if((this.options.preventMouseEventsDefault&&(t.preventDefault?t.preventDefault():t.returnValue=!1),this.options.controlIconsEnabled)&&(t.target.getAttribute("class")||"").indexOf("svg-pan-zoom-control")>-1)return!1;e=t.shiftKey?1/(2*(1+this.options.zoomScaleSensitivity)):2*(1+this.options.zoomScaleSensitivity);var n=s.getEventPoint(t,this.svg).matrixTransform(this.svg.getScreenCTM().inverse());this.zoomAtPoint(e,n)},u.prototype.handleMouseDown=function(t,e){this.options.preventMouseEventsDefault&&(t.preventDefault?t.preventDefault():t.returnValue=!1),i.mouseAndTouchNormalize(t,this.svg),this.options.dblClickZoomEnabled&&i.isDblClick(t,e)?this.handleDblClick(t):(this.state="pan",this.firstEventCTM=this.viewport.getCTM(),this.stateOrigin=s.getEventPoint(t,this.svg).matrixTransform(this.firstEventCTM.inverse()))},u.prototype.handleMouseMove=function(t){if(this.options.preventMouseEventsDefault&&(t.preventDefault?t.preventDefault():t.returnValue=!1),"pan"===this.state&&this.options.panEnabled){var e=s.getEventPoint(t,this.svg).matrixTransform(this.firstEventCTM.inverse()),n=this.firstEventCTM.translate(e.x-this.stateOrigin.x,e.y-this.stateOrigin.y);this.viewport.setCTM(n)}},u.prototype.handleMouseUp=function(t){this.options.preventMouseEventsDefault&&(t.preventDefault?t.preventDefault():t.returnValue=!1),"pan"===this.state&&(this.state="none")},u.prototype.fit=function(){var t=this.viewport.getViewBox(),e=Math.min(this.width/t.width,this.height/t.height);this.zoom(e,!0)},u.prototype.contain=function(){var t=this.viewport.getViewBox(),e=Math.max(this.width/t.width,this.height/t.height);this.zoom(e,!0)},u.prototype.center=function(){var t=this.viewport.getViewBox(),e=.5*(this.width-(t.width+2*t.x)*this.getZoom()),n=.5*(this.height-(t.height+2*t.y)*this.getZoom());this.getPublicInstance().pan({x:e,y:n})},u.prototype.updateBBox=function(){this.viewport.simpleViewBoxCache()},u.prototype.pan=function(t){var e=this.viewport.getCTM();e.e=t.x,e.f=t.y,this.viewport.setCTM(e)},u.prototype.panBy=function(t){var e=this.viewport.getCTM();e.e+=t.x,e.f+=t.y,this.viewport.setCTM(e)},u.prototype.getPan=function(){var t=this.viewport.getState();return{x:t.x,y:t.y}},u.prototype.resize=function(){var t=s.getBoundingClientRectNormalized(this.svg);this.width=t.width,this.height=t.height;var e=this.viewport;e.options.width=this.width,e.options.height=this.height,e.processCTM(),this.options.controlIconsEnabled&&(this.getPublicInstance().disableControlIcons(),this.getPublicInstance().enableControlIcons())},u.prototype.destroy=function(){var t=this;for(var e in this.beforeZoom=null,this.onZoom=null,this.beforePan=null,this.onPan=null,this.onUpdatedCTM=null,null!=this.options.customEventsHandler&&this.options.customEventsHandler.destroy({svgElement:this.svg,eventsListenerElement:this.options.eventsListenerElement,instance:this.getPublicInstance()}),this.eventListeners)(this.options.eventsListenerElement||this.svg).removeEventListener(e,this.eventListeners[e],!this.options.preventMouseEventsDefault&&l);this.disableMouseWheelZoom(),this.getPublicInstance().disableControlIcons(),this.reset(),h=h.filter((function(e){return e.svg!==t.svg})),delete this.options,delete this.viewport,delete this.publicInstance,delete this.pi,this.getPublicInstance=function(){return null}},u.prototype.getPublicInstance=function(){var t=this;return this.publicInstance||(this.publicInstance=this.pi={enablePan:function(){return t.options.panEnabled=!0,t.pi},disablePan:function(){return t.options.panEnabled=!1,t.pi},isPanEnabled:function(){return!!t.options.panEnabled},pan:function(e){return t.pan(e),t.pi},panBy:function(e){return t.panBy(e),t.pi},getPan:function(){return t.getPan()},setBeforePan:function(e){return t.options.beforePan=null===e?null:i.proxy(e,t.publicInstance),t.pi},setOnPan:function(e){return t.options.onPan=null===e?null:i.proxy(e,t.publicInstance),t.pi},enableZoom:function(){return t.options.zoomEnabled=!0,t.pi},disableZoom:function(){return t.options.zoomEnabled=!1,t.pi},isZoomEnabled:function(){return!!t.options.zoomEnabled},enableControlIcons:function(){return t.options.controlIconsEnabled||(t.options.controlIconsEnabled=!0,r.enable(t)),t.pi},disableControlIcons:function(){return t.options.controlIconsEnabled&&(t.options.controlIconsEnabled=!1,r.disable(t)),t.pi},isControlIconsEnabled:function(){return!!t.options.controlIconsEnabled},enableDblClickZoom:function(){return t.options.dblClickZoomEnabled=!0,t.pi},disableDblClickZoom:function(){return t.options.dblClickZoomEnabled=!1,t.pi},isDblClickZoomEnabled:function(){return!!t.options.dblClickZoomEnabled},enableMouseWheelZoom:function(){return t.enableMouseWheelZoom(),t.pi},disableMouseWheelZoom:function(){return t.disableMouseWheelZoom(),t.pi},isMouseWheelZoomEnabled:function(){return!!t.options.mouseWheelZoomEnabled},setZoomScaleSensitivity:function(e){return t.options.zoomScaleSensitivity=e,t.pi},setMinZoom:function(e){return t.options.minZoom=e,t.pi},setMaxZoom:function(e){return t.options.maxZoom=e,t.pi},setBeforeZoom:function(e){return t.options.beforeZoom=null===e?null:i.proxy(e,t.publicInstance),t.pi},setOnZoom:function(e){return t.options.onZoom=null===e?null:i.proxy(e,t.publicInstance),t.pi},zoom:function(e){return t.publicZoom(e,!0),t.pi},zoomBy:function(e){return t.publicZoom(e,!1),t.pi},zoomAtPoint:function(e,n){return t.publicZoomAtPoint(e,n,!0),t.pi},zoomAtPointBy:function(e,n){return t.publicZoomAtPoint(e,n,!1),t.pi},zoomIn:function(){return this.zoomBy(1+t.options.zoomScaleSensitivity),t.pi},zoomOut:function(){return this.zoomBy(1/(1+t.options.zoomScaleSensitivity)),t.pi},getZoom:function(){return t.getRelativeZoom()},setOnUpdatedCTM:function(e){return t.options.onUpdatedCTM=null===e?null:i.proxy(e,t.publicInstance),t.pi},resetZoom:function(){return t.resetZoom(),t.pi},resetPan:function(){return t.resetPan(),t.pi},reset:function(){return t.reset(),t.pi},fit:function(){return t.fit(),t.pi},contain:function(){return t.contain(),t.pi},center:function(){return t.center(),t.pi},updateBBox:function(){return t.updateBBox(),t.pi},resize:function(){return t.resize(),t.pi},getSizes:function(){return{width:t.width,height:t.height,realZoom:t.getZoom(),viewBox:t.viewport.getViewBox()}},destroy:function(){return t.destroy(),t.pi}}),this.publicInstance};var h=[];t.exports=function(t,e){var n=i.getSvg(t);if(null===n)return null;for(var o=h.length-1;o>=0;o--)if(h[o].svg===n)return h[o].instance.getPublicInstance();return h.push({svg:n,instance:new u(n,e)}),h[h.length-1].instance.getPublicInstance()}},"./node_modules/svg-pan-zoom/src/svg-utilities.js":
/*!********************************************************!*\
  !*** ./node_modules/svg-pan-zoom/src/svg-utilities.js ***!
  \********************************************************/
/*! no static exports found */function(t,e,n){var o=n(/*! ./utilities */"./node_modules/svg-pan-zoom/src/utilities.js"),r="unknown";document.documentMode&&(r="ie"),t.exports={svgNS:"http://www.w3.org/2000/svg",xmlNS:"http://www.w3.org/XML/1998/namespace",xmlnsNS:"http://www.w3.org/2000/xmlns/",xlinkNS:"http://www.w3.org/1999/xlink",evNS:"http://www.w3.org/2001/xml-events",getBoundingClientRectNormalized:function(t){if(t.clientWidth&&t.clientHeight)return{width:t.clientWidth,height:t.clientHeight};if(t.getBoundingClientRect())return t.getBoundingClientRect();throw new Error("Cannot get BoundingClientRect for SVG.")},getOrCreateViewport:function(t,e){var n=null;if(!(n=o.isElement(e)?e:t.querySelector(e))){var r=Array.prototype.slice.call(t.childNodes||t.children).filter((function(t){return"defs"!==t.nodeName&&"#text"!==t.nodeName}));1===r.length&&"g"===r[0].nodeName&&null===r[0].getAttribute("transform")&&(n=r[0])}if(!n){var i="viewport-"+(new Date).toISOString().replace(/\D/g,"");(n=document.createElementNS(this.svgNS,"g")).setAttribute("id",i);var s=t.childNodes||t.children;if(s&&s.length>0)for(var a=s.length;a>0;a--)"defs"!==s[s.length-a].nodeName&&n.appendChild(s[s.length-a]);t.appendChild(n)}var u=[];return n.getAttribute("class")&&(u=n.getAttribute("class").split(" ")),~u.indexOf("svg-pan-zoom_viewport")||(u.push("svg-pan-zoom_viewport"),n.setAttribute("class",u.join(" "))),n},setupSvgAttributes:function(t){if(t.setAttribute("xmlns",this.svgNS),t.setAttributeNS(this.xmlnsNS,"xmlns:xlink",this.xlinkNS),t.setAttributeNS(this.xmlnsNS,"xmlns:ev",this.evNS),null!==t.parentNode){var e=t.getAttribute("style")||"";-1===e.toLowerCase().indexOf("overflow")&&t.setAttribute("style","overflow: hidden; "+e)}},internetExplorerRedisplayInterval:300,refreshDefsGlobal:o.throttle((function(){for(var t=document.querySelectorAll("defs"),e=t.length,n=0;n<e;n++){var o=t[n];o.parentNode.insertBefore(o,o)}}),this?this.internetExplorerRedisplayInterval:null),setCTM:function(t,e,n){var o=this,i="matrix("+e.a+","+e.b+","+e.c+","+e.d+","+e.e+","+e.f+")";t.setAttributeNS(null,"transform",i),"transform"in t.style?t.style.transform=i:"-ms-transform"in t.style?t.style["-ms-transform"]=i:"-webkit-transform"in t.style&&(t.style["-webkit-transform"]=i),"ie"===r&&n&&(n.parentNode.insertBefore(n,n),window.setTimeout((function(){o.refreshDefsGlobal()}),o.internetExplorerRedisplayInterval))},getEventPoint:function(t,e){var n=e.createSVGPoint();return o.mouseAndTouchNormalize(t,e),n.x=t.clientX,n.y=t.clientY,n},getSvgCenterPoint:function(t,e,n){return this.createSVGPoint(t,e/2,n/2)},createSVGPoint:function(t,e,n){var o=t.createSVGPoint();return o.x=e,o.y=n,o}}},"./node_modules/svg-pan-zoom/src/uniwheel.js":
/*!***************************************************!*\
  !*** ./node_modules/svg-pan-zoom/src/uniwheel.js ***!
  \***************************************************/
/*! no static exports found */function(t,e){t.exports=function(){var t,e,n,o="",r=[],i={passive:!0};function s(e,s,a,u){var c;c="wheel"===n?a:function(t,e){var o=function(t){!t&&(t=window.event);var o={originalEvent:t,target:t.target||t.srcElement,type:"wheel",deltaMode:"MozMousePixelScroll"==t.type?0:1,deltaX:0,delatZ:0,preventDefault:function(){t.preventDefault?t.preventDefault():t.returnValue=!1}};return"mousewheel"==n?(o.deltaY=-1/40*t.wheelDelta,t.wheelDeltaX&&(o.deltaX=-1/40*t.wheelDeltaX)):o.deltaY=t.detail,e(o)};return r.push({element:t,fn:o}),o}(e,a),e[t](o+s,c,!!u&&i)}function a(t,s,a,u){var c;c="wheel"===n?a:function(t){for(var e=0;e<r.length;e++)if(r[e].element===t)return r[e].fn;return function(){}}(t),t[e](o+s,c,!!u&&i),function(t){for(var e=0;e<r.length;e++)if(r[e].element===t)return r.splice(e,1)}(t)}return window.addEventListener?(t="addEventListener",e="removeEventListener"):(t="attachEvent",e="detachEvent",o="on"),n="onwheel"in document.createElement("div")?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll",{on:function(t,e,o){s(t,n,e,o),"DOMMouseScroll"==n&&s(t,"MozMousePixelScroll",e,o)},off:function(t,e,o){a(t,n,e,o),"DOMMouseScroll"==n&&a(t,"MozMousePixelScroll",e,o)}}}()},"./node_modules/svg-pan-zoom/src/utilities.js":
/*!****************************************************!*\
  !*** ./node_modules/svg-pan-zoom/src/utilities.js ***!
  \****************************************************/
/*! no static exports found */function(t,e){function n(t){return function(e){window.setTimeout(e,t)}}t.exports={extend:function(t,e){for(var n in t=t||{},e)this.isObject(e[n])?t[n]=this.extend(t[n],e[n]):t[n]=e[n];return t},isElement:function(t){return t instanceof HTMLElement||t instanceof SVGElement||t instanceof SVGSVGElement||t&&"object"==typeof t&&null!==t&&1===t.nodeType&&"string"==typeof t.nodeName},isObject:function(t){return"[object Object]"===Object.prototype.toString.call(t)},isNumber:function(t){return!isNaN(parseFloat(t))&&isFinite(t)},getSvg:function(t){var e,n;if(this.isElement(t))e=t;else{if(!("string"==typeof t||t instanceof String))throw new Error("Provided selector is not an HTML object nor String");if(!(e=document.querySelector(t)))throw new Error("Provided selector did not find any elements. Selector: "+t)}if("svg"===e.tagName.toLowerCase())n=e;else if("object"===e.tagName.toLowerCase())n=e.contentDocument.documentElement;else{if("embed"!==e.tagName.toLowerCase())throw"img"===e.tagName.toLowerCase()?new Error('Cannot script an SVG in an "img" element. Please use an "object" element or an in-line SVG.'):new Error("Cannot get SVG.");n=e.getSVGDocument().documentElement}return n},proxy:function(t,e){return function(){return t.apply(e,arguments)}},getType:function(t){return Object.prototype.toString.apply(t).replace(/^\[object\s/,"").replace(/\]$/,"")},mouseAndTouchNormalize:function(t,e){if(void 0===t.clientX||null===t.clientX)if(t.clientX=0,t.clientY=0,void 0!==t.touches&&t.touches.length){if(void 0!==t.touches[0].clientX)t.clientX=t.touches[0].clientX,t.clientY=t.touches[0].clientY;else if(void 0!==t.touches[0].pageX){var n=e.getBoundingClientRect();t.clientX=t.touches[0].pageX-n.left,t.clientY=t.touches[0].pageY-n.top}}else void 0!==t.originalEvent&&void 0!==t.originalEvent.clientX&&(t.clientX=t.originalEvent.clientX,t.clientY=t.originalEvent.clientY)},isDblClick:function(t,e){if(2===t.detail)return!0;if(null!=e){var n=t.timeStamp-e.timeStamp,o=Math.sqrt(Math.pow(t.clientX-e.clientX,2)+Math.pow(t.clientY-e.clientY,2));return n<250&&o<10}return!1},now:Date.now||function(){return(new Date).getTime()},throttle:function(t,e,n){var o,r,i,s=this,a=null,u=0;n||(n={});var c=function(){u=!1===n.leading?0:s.now(),a=null,i=t.apply(o,r),a||(o=r=null)};return function(){var l=s.now();u||!1!==n.leading||(u=l);var h=e-(l-u);return o=this,r=arguments,h<=0||h>e?(clearTimeout(a),a=null,u=l,i=t.apply(o,r),a||(o=r=null)):a||!1===n.trailing||(a=setTimeout(c,h)),i}},createRequestAnimationFrame:function(t){var e=null;return"auto"!==t&&t<60&&t>1&&(e=Math.floor(1e3/t)),null===e?window.requestAnimationFrame||n(33):n(e)}}},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},"./scripts/funciones/BarraProgreso.js":
/*!********************************************!*\
  !*** ./scripts/funciones/BarraProgreso.js ***!
  \********************************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e),e.default=function(t,e){var n=document.getElementById("progressbar"),r=250/(e+1),i=o("rect",{x:2,y:2,width:250,height:32,fill:"none",stroke:"#CCCBCB",strokeWidth:"1",rx:5,ry:5});n.appendChild(i);var s=Number(250-2*r),a=o("rect",{x:r,y:17,width:s,height:2,fill:"#E7E5E5",rx:2,ry:2});n.appendChild(a);for(var u=0;u<e;u++){var c=void 0,l=void 0;t.length>u?(l=4,c=t[u].correcto?1===t[u].NUMEROINTENTOS?"#00AC4D":"#E2C04D":"#E24B4A"):t.length===u?(l=8,c="#1280B1"):(l=4,c="#CCCBCB");var h=r*(u+1)+2,p=o("circle",{cx:h,cy:18,r:l,fill:c,stroke:"none"});if(n.appendChild(p),t.length===u){var f=o("text",{x:h,y:22,fontFamily:"sans-serif",fontSize:"11px",textAnchor:"middle",fill:"white"});f.textContent=t.length+1,n.appendChild(f)}}};var o=function(t,e){var n=document.createElementNS("http://www.w3.org/2000/svg",t);for(var o in e)n.setAttributeNS(null,o.replace(/[A-Z]/g,(function(t,e,n,o){return"-"+t.toLowerCase()})),e[o]);return n}},"./scripts/funciones/ConexionPlataforma.js":
/*!*************************************************!*\
  !*** ./scripts/funciones/ConexionPlataforma.js ***!
  \*************************************************/
/*! exports provided: enviar, cerrarFeed, pressConsulta, cerrarFeedGlosa, sgteGlosa */function(t,e,n){"use strict";function o(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var o=0,i=function(){};return{s:i,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw s}}}}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}n.r(e),n.d(e,"enviar",(function(){return h})),n.d(e,"cerrarFeed",(function(){return p})),n.d(e,"pressConsulta",(function(){return f})),n.d(e,"cerrarFeedGlosa",(function(){return d})),n.d(e,"sgteGlosa",(function(){return v}));var i=(new Date).toLocaleTimeString(),s=window.parent.parent.varHidden,a=window.parent.parent.varTutorial,u=window.parent.parent.varSegundoError,c=window.parent.parent.cerrarFeedbackHijo,l=window.parent.parent.pressConsulta;Date.prototype.yyyymmdd=function(){var t=this.getMonth()+1,e=this.getDate();return[this.getFullYear(),(t>9?"":"0")+t,(e>9?"":"0")+e].join("-")};var h=function(t){var e=t.idEjercicio,n=t.tipoejercicio,r=t.errorFrecuente,a=new Date,u=window.location.href.substring(window.location.href.search(e)+(e.length+1),window.location.href.search(".html")),c=new Date,l="";if("radio"===n)l="Valor radio= "+document.querySelector("input[name=answer]:checked").value;else{var h,p=o(document.querySelectorAll(".contenido input[name=answer]"));try{for(p.s();!(h=p.n()).done;){var f=h.value;l+=f.id+" = "+f.value+" "}}catch(t){p.e(t)}finally{p.f()}}var d=JSON.stringify({idejercicioversion:u,correcto:r?0:1,estarea:0,idtareaiematricula:0,tiempoInicio:c.yyyymmdd()+" "+i,tiempoRespuesta:c.yyyymmdd()+" "+a.toLocaleTimeString(),feedback:r?"":"Respuesta Correcta",codigoErrorComun:r?0:r,respuesta:l,glosa:2==numeroIntento});m(s,d),window.numeroIntento++},p=function(){m(c,!0)},f=function(){m(l,"1")},d=function(){m(u,!0)},v=function(){a.value=!0;var t=document.createEvent("Event");t.initEvent("change",!0,!0),a.dispatchEvent(t)},m=function(t,e){try{t.value=e;var n=document.createEvent("Event");n.initEvent("change",!0,!0),t.dispatchEvent(n);var o=document.createEvent("Event");o.initEvent("click",!0,!0),t.dispatchEvent(o)}catch(t){console.log(t)}}},"./scripts/funciones/ContinuarEjercicio.js":
/*!*************************************************!*\
  !*** ./scripts/funciones/ContinuarEjercicio.js ***!
  \*************************************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e),e.default=function(t,e){e.querySelector("button").disabled=!0,e.style.display="none",document.querySelector("footer").style.display="grid","seleccion multiple"===t?(document.querySelector("input[type=radio]:checked").checked=!1,document.getElementsByName("answer").forEach((function(t){t.disabled=!1}))):document.querySelectorAll("input[type=text].inputTexto-incorrecto").forEach((function(t){t.disabled=!1,t.classList.remove("inputTexto-incorrecto"),t.value=""}))}},"./scripts/funciones/HandleRespuesta.js":
/*!**********************************************!*\
  !*** ./scripts/funciones/HandleRespuesta.js ***!
  \**********************************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e);var o=n(/*! ./ValidaRespuesta */"./scripts/funciones/ValidaRespuesta.js"),r=n(/*! ./ContinuarEjercicio */"./scripts/funciones/ContinuarEjercicio.js"),i=n(/*! ./ConexionPlataforma */"./scripts/funciones/ConexionPlataforma.js"),s=n(/*! ./Zoom */"./scripts/funciones/Zoom.js");e.default=function(t,e){t.target.disabled=!0;var n=e.idEjercicio,l=e.validaciones,h=e.tipoEjercicio,p=e.tmpProgreso;document.querySelector("footer").style.display="none",document.getElementsByName("answer").forEach((function(t){t.disabled=!0}));var f,d,v,m=Object(o.default)(l,h),g=m.feedback,y=m.errorFrecuente;if(y?(f=document.querySelector(".feedback-incorrecto"),d=document.querySelector(".feedback-incorrecto span.feedback-span"),v=document.querySelector(".feedback-incorrecto p.feedback-p")):(f=document.querySelector(".feedback-correcto"),d=document.querySelector(".feedback-correcto span.feedback-span"),v=document.querySelector(".feedback-correcto p.feedback-p")),y)1===window.numeroIntento?(d.innerHTML=c[Math.floor(4*Math.random())],v.innerHTML=g,f.querySelector("button").addEventListener("click",(function(){return Object(r.default)(h,f)})),window.renderMathInElement&&window.renderMathInElement(f,{delimiters:[{left:"((",right:"))",display:!1},{left:"[[",right:"]]",display:!0}]}),f.style.display="block"):(document.querySelector("#btnCerrarGlosa").addEventListener("click",i.cerrarFeedGlosa),document.getElementById("glosa").style.display="block",Object(s.default)("#glosa"));else{f.style.display="block",d.innerHTML=u[Math.floor(4*Math.random())];var b=a(p);b&&(v.innerHTML="Tienes una racha de <b>".concat(b,"</b> respuestas correctas.")),2===window.numeroIntento&&f.querySelector("button").removeEventListener("click",(function(){return Object(r.default)(h,f)})),f.querySelector("button").addEventListener("click",i.cerrarFeed)}Object(i.enviar)({idEjercicio:n,tipoEjercicio:h,errorFrecuente:y})};var a=function(t){for(var e=0,n=t.length-1;n>-1&&t[n].correcto;n--)e++;return e+1>1?e+1:null},u=["¡Muy bien!","¡Lo has logrado!","¡Genial!","¡Así se hace!"],c=["¡Atención!","¡Algo anda mal!","¡Vuelve a intentarlo!","¡Ten cuidado!"]},"./scripts/funciones/IniciaListeners.js":
/*!**********************************************!*\
  !*** ./scripts/funciones/IniciaListeners.js ***!
  \**********************************************/
/*! exports provided: default */function(t,e,n){"use strict";function o(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var o=0,i=function(){};return{s:i,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw s}}}}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}n.r(e),e.default=function(t){var e=function(t){return t.preventDefault(),!1};document.getElementById("body").addEventListener("drop",e),document.getElementById("body").addEventListener("contextmenu",e),"seleccion multiple"===t?document.querySelectorAll("input[type=radio]").forEach((function(t){t.addEventListener("change",(function(){document.getElementById("btnResponder").disabled=!1}))})):(document.querySelectorAll("input[type=text]").forEach((function(t){t.addEventListener("keyup",(function(){var t,e=!0,n=o(document.querySelectorAll("input[type=text]"));try{for(n.s();!(t=n.n()).done;){if(""===t.value.value.trim()){e=!1;break}}}catch(t){n.e(t)}finally{n.f()}document.getElementById("btnResponder").disabled=!e})),t.addEventListener("copy",e),t.addEventListener("paste",e),t.addEventListener("cut",e)})),document.querySelectorAll('[data-tipoinput="alfanumerico"]').forEach((function(t){t.addEventListener("keypress",(function(t){if(!(t.keyCode>=48&&t.keyCode<=57||t.keyCode>=65&&t.keyCode<=90||t.keyCode>=97&&t.keyCode<=122||241==t.keyCode||209==t.keyCode||225==t.keyCode||233==t.keyCode||237==t.keyCode||243==t.keyCode||250==t.keyCode||193==t.keyCode||201==t.keyCode||205==t.keyCode||211==t.keyCode||218==t.keyCode||32==t.keyCode))return t.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="texto-numerico"],[data-tipoinput="texto"]').forEach((function(t){t.addEventListener("keypress",(function(t){if(!(t.keyCode>=65&&t.keyCode<=90||t.keyCode>=97&&t.keyCode<=122||241==t.keyCode||209==t.keyCode||225==t.keyCode||233==t.keyCode||237==t.keyCode||243==t.keyCode||250==t.keyCode||193==t.keyCode||201==t.keyCode||205==t.keyCode||211==t.keyCode||218==t.keyCode||32==t.keyCode))return t.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="comparacion"]').forEach((function(t){t.addEventListener("keypress",(function(t){if(!(60===t.keyCode||61===t.keyCode||62===t.keyCode))return t.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="numero"]').forEach((function(t){t.addEventListener("keypress",(function(t){if(!(t.keyCode>=48&&t.keyCode<=57))return t.preventDefault(),!1})),t.addEventListener("keyup",(function(t){for(var e=String(t.target.value).replace(/\s/g,"").split("").reverse(),n=0,o=0,r="";n<e.length;n++)3===++o&&e[n+1]?(r=" "+e[n]+r,o=0):r=e[n]+r;t.target.value=r}))})),document.querySelectorAll('[data-tipoinput="decimal"]').forEach((function(t){t.addEventListener("keypress",(function(t){if(!(t.keyCode>=48&&t.keyCode<=57||44===t.keyCode))return t.preventDefault(),!1})),t.addEventListener("keyup",(function(t){var e=String(t.target.value).replace(" ",""),n=String(e).split(",")[0],o=String(e).split(",")[1],r=n.length>=4?"":n;if(n.length>=4){var i=n.split("").reverse(),s=1;i.forEach((function(t){3===s?(r=" "+t+r,s=1):(r=t+r,s++)}))}t.target.value="".concat(r).concat(void 0===o?"":",").concat(void 0===o?"":o)}))})))}},"./scripts/funciones/ValidaRespuesta.js":
/*!**********************************************!*\
  !*** ./scripts/funciones/ValidaRespuesta.js ***!
  \**********************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(Buffer){var _utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ../utils/FormateaNumeros */"./scripts/utils/FormateaNumeros.js");function _createForOfIteratorHelper(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var o=0,r=function(){};return{s:r,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,a=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return s=t.done,t},e:function(t){a=!0,i=t},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw i}}}}function _unsupportedIterableToArray(t,e){if(t){if("string"==typeof t)return _arrayLikeToArray(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(t,e):void 0}}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}function coloreaInputTextoPorDefecto(t){var e,n=t.getAttribute("data-tipoinput"),o=Buffer.from(t.getAttribute("data-content"),"base64").toString("utf-8"),r=!1;switch(n){case"numero":e=t.value.replace(/\s/g,""),o.split(",").forEach((function(n){e===n&&(t.classList.add("inputTexto-correcto"),r=!0)}));break;case"decimal":e=t.value.replace(/\s/g,"").replace(",","."),o.split(",").forEach((function(n){e===n&&(t.classList.add("inputTexto-correcto"),r=!0)}));break;case"texto-numerico":e=t.value,o.split(",").forEach((function(n){var o=3===n.length?("0"+n).split(""):n.split("");ValidaNumeroEscrito(e,o)&&(t.classList.add("inputTexto-correcto"),r=!0)}));break;case"texto":case"alfanumerico":e=t.value,o.split(",").forEach((function(n){String(e).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")===String(n).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&(t.classList.add("inputTexto-correcto"),r=!0)}))}r||t.classList.add("inputTexto-incorrecto")}function coloreaInputsTextoPorCoincidencia(t){t.validaciones.forEach((function(t){var e=t.color,n=t.inputId,o=document.getElementById(n);"ok"===e?o.classList.add("inputTexto-correcto"):"bad"===e?o.classList.add("inputTexto-incorrecto"):o.value.replace(/\s/g,"")==e.correcta?o.classList.add("inputTexto-correcto"):o.classList.add("inputTexto-incorrecto")}))}__webpack_exports__.default=function(validaciones,tipo){var feedback,errorFrecuente;if("seleccion multiple"===tipo){var respuesta=document.querySelector("input[type=radio]:checked").value,_iterator=_createForOfIteratorHelper(validaciones),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var validacion=_step.value;if(respuesta==validacion.opcion){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.default)(validacion.feedback,"&nbsp;"),errorFrecuente=validacion.errorFrecuente;break}}}catch(t){_iterator.e(t)}finally{_iterator.f()}return{feedback:feedback,errorFrecuente:errorFrecuente}}if("respuesta breve"===tipo){var respuestas=validaciones.respuestas,errFrecDefecto=validaciones.errFrecDefecto,feedbackDefecto=validaciones.feedbackDefecto,_iterator2=_createForOfIteratorHelper(respuestas),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _respuesta=_step2.value,coincidenTodas=!0;if(_respuesta.validaciones.forEach((function(t,e){var n=document.getElementById(t.inputId);switch(n.getAttribute("data-tipoinput")){case"numero":n.value.replace(/\s/g,"")!==t.valor&&"-any-"!==t.valor&&(coincidenTodas=!1);break;case"decimal":n.value.replace(/\s/g,"").replace(",",".")!==t.valor&&"-any-"!==t.valor&&(coincidenTodas=!1);break;case"texto-numerico":var o=String(t.valor).padStart(4,"0").split("");ValidaNumeroEscrito(n.value.trim(),o)||"-any-"===t.valor||(coincidenTodas=!1);break;case"texto":case"alfanumerico":String(n.value).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")!==String(t.valor).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&"-any-"!==t.valor&&(coincidenTodas=!1);break;case"comparacion":n.value!==t.valor&&"-any-"!==t.valor&&(coincidenTodas=!1)}})),coincidenTodas){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.default)(_respuesta.feedback,"&nbsp;"),errorFrecuente=_respuesta.errFrec,null!==errorFrecuente?coloreaInputsTextoPorCoincidencia(_respuesta):document.querySelectorAll("input[name='answer']").forEach((function(t){t.classList.add("inputTexto-correcto")}));break}}}catch(t){_iterator2.e(t)}finally{_iterator2.f()}if(!feedback){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.default)(feedbackDefecto,"&nbsp;"),errorFrecuente=errFrecDefecto;var inputs=document.querySelectorAll("input[name='answer']"),_iterator3=_createForOfIteratorHelper(inputs),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var input=_step3.value;coloreaInputTextoPorDefecto(input)}}catch(t){_iterator3.e(t)}finally{_iterator3.f()}}return{feedback:feedback,errorFrecuente:errorFrecuente}}var _respuestas=validaciones.respuestas,_errFrecDefecto=validaciones.errFrecDefecto,_feedbackDefecto=validaciones.feedbackDefecto,_iterator4=_createForOfIteratorHelper(_respuestas),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var resp=_step4.value,evaluacion=resp.opcion.replace(/input\d/g,(function(t){return document.getElementById(t).value.replace(",",".").replace(/\s/,"")}));if(eval(evaluacion)){feedback=resp.feedback,errorFrecuente=resp.errorFrecuente;break}}}catch(t){_iterator4.e(t)}finally{_iterator4.f()}return feedback?document.querySelectorAll("input[name='answer']").forEach((function(t){t.classList.add("inputTexto-correcto")})):(feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.default)(_feedbackDefecto,"&nbsp;"),errorFrecuente=_errFrecDefecto,document.querySelectorAll("input[name='answer']").forEach((function(t){t.classList.add("inputTexto-incorrecto")}))),{feedback:feedback,errorFrecuente:errorFrecuente}}}.call(this,__webpack_require__(/*! ./../../node_modules/buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./scripts/funciones/Zoom.js":
/*!***********************************!*\
  !*** ./scripts/funciones/Zoom.js ***!
  \***********************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e);var o=n(/*! svg-pan-zoom */"./node_modules/svg-pan-zoom/src/browserify.js"),r=n.n(o),i=n(/*! hammerjs */"./node_modules/hammerjs/hammer.js"),s=n.n(i);e.default=function(t){window.innerWidth>800||document.querySelectorAll("".concat(t," svg[name=funcionalidad]")).forEach((function(t){t.style.borderRadius="16px",t.style.background="#F2F4F7",r()(t,{zoomEnabled:!0,minZomm:1,maxZoom:2,customEventsHandler:a,beforePan:u})}))};var a={haltEventListeners:["touchstart","touchend","touchmove","touchleave","touchcancel"],init:function(t){var e=t.instance,n=1,o=0,r=0;this.hammer=s()(t.svgElement,{inputClass:s.a.SUPPORT_POINTER_EVENTS?s.a.PointerEventInput:s.a.TouchInput}),this.hammer.get("pinch").set({enable:!0}),this.hammer.on("doubletap",(function(t){e.zoomIn()})),this.hammer.on("panstart panmove",(function(t){"panstart"===t.type&&(o=0,r=0),e.panBy({x:t.deltaX-o,y:t.deltaY-r}),o=t.deltaX,r=t.deltaY})),this.hammer.on("pinchstart pinchmove",(function(t){"pinchstart"===t.type&&(n=e.getZoom(),e.zoomAtPoint(n*t.scale,{x:t.center.x,y:t.center.y})),e.zoomAtPoint(n*t.scale,{x:t.center.x,y:t.center.y})})),t.svgElement.addEventListener("touchmove",(function(t){t.preventDefault()}))},destroy:function(){this.hammer.destroy()}};function u(t,e){var n=this.getSizes(),o=-(n.viewBox.x+n.viewBox.width)*n.realZoom+50,r=n.width-50-n.viewBox.x*n.realZoom,i=-(n.viewBox.y+n.viewBox.height)*n.realZoom+50,s=n.height-50-n.viewBox.y*n.realZoom,a={};return a.x=Math.max(o,Math.min(r,e.x)),a.y=Math.max(i,Math.min(s,e.y)),a}},"./scripts/index.js":
/*!**************************!*\
  !*** ./scripts/index.js ***!
  \**************************/
/*! no exports provided */function(t,e,n){"use strict";n.r(e),function(t){var e=n(/*! ./utils/ReemplazaFunciones */"./scripts/utils/ReemplazaFunciones.js"),o=n(/*! ./utils/DatosProgreso */"./scripts/utils/DatosProgreso.js"),r=n(/*! ./funciones/IniciaListeners */"./scripts/funciones/IniciaListeners.js"),i=n(/*! ./funciones/HandleRespuesta */"./scripts/funciones/HandleRespuesta.js"),s=n(/*! ./funciones/BarraProgreso */"./scripts/funciones/BarraProgreso.js"),a=n(/*! ./funciones/ConexionPlataforma */"./scripts/funciones/ConexionPlataforma.js"),u=n(/*! ./funciones/Zoom */"./scripts/funciones/Zoom.js"),c=function(){var n=document.getElementById("body");console.log(t(n.dataset.x,"base64").toString("utf8")),window.numeroIntento=parseInt(document.getElementById("hiddenIntento").value)||1,document.querySelector("#hiddenIntento").addEventListener("change",(function(t){window.numeroIntento=parseInt(t.target.value)})),document.querySelector("#btnConsulta").addEventListener("click",a.pressConsulta);var c=Object(o.default)(),l=c.tmpProgreso,h=c.tmpTotal;Object(s.default)(l,h),Object(u.default)("section");var p=n.dataset.id,f=JSON.parse(Object(e.default)(t(n.dataset.x,"base64").toString("utf8"))),d=n.dataset.tipoejercicio;Object(r.default)(d),document.getElementById("btnResponder").addEventListener("click",(function(t){return Object(i.default)(t,{idEjercicio:p,validaciones:f,tipoEjercicio:d,tmpProgreso:l})}))};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",c):c()}.call(this,n(/*! ./../node_modules/buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./scripts/utils/DatosProgreso.js":
/*!****************************************!*\
  !*** ./scripts/utils/DatosProgreso.js ***!
  \****************************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e),e.default=function(){var t=window.parent.parent.barraProgreso;if(t){var e=JSON.parse(t.value);return{tmpProgreso:e.tmpProgreso?e.tmpProgreso:[],tmpTotal:e.tmpTotal?Number(e.tmpTotal):0}}return{tmpProgreso:localStorage.getItem("tmpProgreso")?JSON.parse(localStorage.getItem("tmpProgreso")):[],tmpTotal:localStorage.getItem("tmpTotal")?Number(localStorage.getItem("tmpTotal")):0}}},"./scripts/utils/FormateaNumeros.js":
/*!******************************************!*\
  !*** ./scripts/utils/FormateaNumeros.js ***!
  \******************************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e),e.default=function(t,e){return t.replace(/\d{1,}(\.\d{1,})?/g,(function(t){var n=t.split(".")[0],o=t.split(".")[1],r=n.length>=4?"":n;if(n.length>=4){var i=n.split("").reverse(),s=1;i.forEach((function(t,n){3===s&&n+1<i.length?(r=e+t+r,s=1):(r=t+r,s++)}))}return"".concat(r).concat(o?",":"").concat(o||"")}))}},"./scripts/utils/ReemplazaFunciones.js":
/*!*********************************************!*\
  !*** ./scripts/utils/ReemplazaFunciones.js ***!
  \*********************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";function frac(t,e,n){return'<span class=\\"eq\\">'.concat(t?'<span class=\\"integer\\">'.concat(t,"</span>"):"",'<span class=\\"fraction\\"><span class=\\"fup\\">&nbsp;').concat(e,'&nbsp;</span><span class=\\"bar\\">/</span><span class=\\"fdn\\">&nbsp;').concat(n,"&nbsp;</span></span></span>")}function capitalize(t){return t.charAt(0).toUpperCase()+t.slice(1)}__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=function(text){var result=text.replace(/\/\[.*?\/\]/g,(function(coincidencia){var _final=coincidencia.length-4,funcion=coincidencia.substr(2,_final).replace(/&gt;/g,">").replace(/&lt;/,"<");try{return eval(funcion)}catch(t){return console.log(t),console.log(funcion),coincidencia}}));return result}},"./styles/index.scss":
/*!***************************!*\
  !*** ./styles/index.scss ***!
  \***************************/
/*! no static exports found */function(t,e,n){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,