!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./index.js")}({"./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */function(e,t,r){"use strict";r.r(t);r(/*! ./scripts/index */"./scripts/index.js"),r(/*! ./styles/index.scss */"./styles/index.scss")},"./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,r){"use strict";t.byteLength=function(e){var t=u(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=u(e),i=n[0],s=n[1],c=new a(function(e,t,r){return 3*(t+r)/4-r}(0,i,s)),f=0,l=s>0?i-4:i;for(r=0;r<l;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],c[f++]=t>>16&255,c[f++]=t>>8&255,c[f++]=255&t;2===s&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,c[f++]=255&t);1===s&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,c[f++]=t>>8&255,c[f++]=255&t);return c},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,a=[],i=0,s=r-o;i<s;i+=16383)a.push(f(e,i,i+16383>s?s:i+16383));1===o?(t=e[r-1],a.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],a.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return a.join("")};for(var n=[],o=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,c=i.length;s<c;++s)n[s]=i[s],o[i.charCodeAt(s)]=s;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function f(e,t,r){for(var o,a,i=[],s=t;s<r;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(n[(a=o)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return i.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},"./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(/*! base64-js */"./node_modules/base64-js/index.js"),o=r(/*! ieee754 */"./node_modules/ieee754/index.js"),a=r(/*! isarray */"./node_modules/isarray/index.js");function i(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,r){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return u(this,e,t,r)}function u(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=d(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!c.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|h(t,r),o=(e=s(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(c.isBuffer(t)){var r=0|p(t.length);return 0===(e=s(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):d(e,t);if("Buffer"===t.type&&a(t.data))return d(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(f(t),e=s(e,t<0?0:0|p(t)),!c.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function d(e,t){var r=t.length<0?0:0|p(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function p(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function h(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return Y(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return N(e).length;default:if(n)return Y(e).length;t=(""+t).toLowerCase(),n=!0}}function g(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,r);case"utf8":case"utf-8":return S(this,t,r);case"ascii":return C(this,t,r);case"latin1":case"binary":return T(this,t,r);case"base64":return j(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function _(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,o);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,o){var a,i=1,s=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,s/=2,c/=2,r/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){var f=-1;for(a=r;a<s;a++)if(u(e,a)===u(t,-1===f?0:a-f)){if(-1===f&&(f=a),a-f+1===c)return f*i}else-1!==f&&(a-=a-f),f=-1}else for(r+c>s&&(r=s-c),a=r;a>=0;a--){for(var l=!0,d=0;d<c;d++)if(u(e,a+d)!==u(t,d)){l=!1;break}if(l)return a}return-1}function m(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var i=0;i<n;++i){var s=parseInt(t.substr(2*i,2),16);if(isNaN(s))return i;e[r+i]=s}return i}function b(e,t,r,n){return q(Y(t,e.length-r),e,r,n)}function E(e,t,r,n){return q(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function w(e,t,r,n){return E(e,t,r,n)}function k(e,t,r,n){return q(N(t),e,r,n)}function A(e,t,r,n){return q(function(e,t){for(var r,n,o,a=[],i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),n=r>>8,o=r%256,a.push(o),a.push(n);return a}(t,e.length-r),e,r,n)}function j(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function S(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var a,i,s,c,u=e[o],f=null,l=u>239?4:u>223?3:u>191?2:1;if(o+l<=r)switch(l){case 1:u<128&&(f=u);break;case 2:128==(192&(a=e[o+1]))&&(c=(31&u)<<6|63&a)>127&&(f=c);break;case 3:a=e[o+1],i=e[o+2],128==(192&a)&&128==(192&i)&&(c=(15&u)<<12|(63&a)<<6|63&i)>2047&&(c<55296||c>57343)&&(f=c);break;case 4:a=e[o+1],i=e[o+2],s=e[o+3],128==(192&a)&&128==(192&i)&&128==(192&s)&&(c=(15&u)<<18|(63&a)<<12|(63&i)<<6|63&s)>65535&&c<1114112&&(f=c)}null===f?(f=65533,l=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=l}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,r){return u(null,e,t,r)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,r){return function(e,t,r,n){return f(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},c.allocUnsafe=function(e){return l(null,e)},c.allocUnsafeSlow=function(e){return l(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,a=Math.min(r,n);o<a;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=c.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var i=e[r];if(!c.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},c.byteLength=h,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?S(this,0,e):g.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,r,n,o){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),s=Math.min(a,i),u=this.slice(n,o),f=e.slice(t,r),l=0;l<s;++l)if(u[l]!==f[l]){a=u[l],i=f[l];break}return a<i?-1:i<a?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return _(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return _(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return m(this,e,t,r);case"utf8":case"utf-8":return b(this,e,t,r);case"ascii":return E(this,e,t,r);case"latin1":case"binary":return w(this,e,t,r);case"base64":return k(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function C(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function T(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function P(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",a=t;a<r;++a)o+=U(e[a]);return o}function M(e,t,r){for(var n=e.slice(t,r),o="",a=0;a<n.length;a+=2)o+=String.fromCharCode(n[a]+256*n[a+1]);return o}function R(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,r,n,o,a){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function x(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,a=Math.min(e.length-r,2);o<a;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function B(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,a=Math.min(e.length-r,4);o<a;++o)e[r+o]=t>>>8*(n?o:3-o)&255}function L(e,t,r,n,o,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function O(e,t,r,n,a){return a||L(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function F(e,t,r,n,a){return a||L(e,0,r,8),o.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=c.prototype;else{var o=t-e;r=new c(o,void 0);for(var a=0;a<o;++a)r[a]=this[a+e]}return r},c.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n},c.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},c.prototype.readUInt8=function(e,t){return t||R(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||R(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||R(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=t,o=1,a=this[e+--n];n>0&&(o*=256);)a+=this[e+--n]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*t)),a},c.prototype.readInt8=function(e,t){return t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||R(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){t||R(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||R(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||R(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||R(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||R(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,a=0;for(this[t]=255&e;++a<r&&(o*=256);)this[t+a]=e/o&255;return t+r},c.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+r},c.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):x(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):x(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):B(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);I(this,e,t,r,o-1,-o)}var a=0,i=1,s=0;for(this[t]=255&e;++a<r&&(i*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/i>>0)-s&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);I(this,e,t,r,o-1,-o)}var a=r-1,i=1,s=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/i>>0)-s&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):x(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):x(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):B(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,r){return O(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return O(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return F(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return F(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,a=n-r;if(this===e&&r<t&&t<n)for(o=a-1;o>=0;--o)e[o+t]=this[o+r];else if(a<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var i=c.isBuffer(e)?e:Y(new c(e,n).toString()),s=i.length;for(a=0;a<r-t;++a)this[a+t]=i[a%s]}return this};var D=/[^+\/0-9A-Za-z-_]/g;function U(e){return e<16?"0"+e.toString(16):e.toString(16)}function Y(e,t){var r;t=t||1/0;for(var n=e.length,o=null,a=[],i=0;i<n;++i){if((r=e.charCodeAt(i))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&a.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&a.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function N(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(D,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t){t.read=function(e,t,r,n,o){var a,i,s=8*o-n-1,c=(1<<s)-1,u=c>>1,f=-7,l=r?o-1:0,d=r?-1:1,p=e[t+l];for(l+=d,a=p&(1<<-f)-1,p>>=-f,f+=s;f>0;a=256*a+e[t+l],l+=d,f-=8);for(i=a&(1<<-f)-1,a>>=-f,f+=n;f>0;i=256*i+e[t+l],l+=d,f-=8);if(0===a)a=1-u;else{if(a===c)return i?NaN:1/0*(p?-1:1);i+=Math.pow(2,n),a-=u}return(p?-1:1)*i*Math.pow(2,a-n)},t.write=function(e,t,r,n,o,a){var i,s,c,u=8*a-o-1,f=(1<<u)-1,l=f>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:a-1,h=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,i=f):(i=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-i))<1&&(i--,c*=2),(t+=i+l>=1?d/c:d*Math.pow(2,1-l))*c>=2&&(i++,c/=2),i+l>=f?(s=0,i=f):i+l>=1?(s=(t*c-1)*Math.pow(2,o),i+=l):(s=t*Math.pow(2,l-1)*Math.pow(2,o),i=0));o>=8;e[r+p]=255&s,p+=h,s/=256,o-=8);for(i=i<<o|s,u+=o;u>0;e[r+p]=255&i,p+=h,i/=256,u-=8);e[r+p-h]|=128*g}},"./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},"./scripts/funciones/AgregaImagenes.js":
/*!*********************************************!*\
  !*** ./scripts/funciones/AgregaImagenes.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n={"01":{correcta:["../../../../imagenes_front/Mascotas_Eje1/Eje1_CorrectFeedback_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_CorrectFeedback_Pato.svg"],incorrecta:["../../../../imagenes_front/Mascotas_Eje1/Eje1_MistakeFeedback_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_MistakeFeedback_Pato.svg"],glosa:["../../../../imagenes_front/Mascotas_Eje1/Eje1_Glosa_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_Glosa_Pato.svg"]},"02":{correcta:["../../../../imagenes_front/Mascotas_Eje2/Eje2_CorrectFeedback_Alce.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_CorrectFeedback_Zorro.svg"],incorrecta:["../../../../imagenes_front/Mascotas_Eje2/Eje2_MistakeFeedback_Alce.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_MistakeFeedback_Zorro.svg"],glosa:["../../../../imagenes_front/Mascotas_Eje2/Eje2_Glosa_Zorro.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_Glosa_Alce.svg"]},"03":{correcta:["../../../../imagenes_front/Mascotas_Eje3/Eje3_CorrectFeedback_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_CorrectFeedback_Tigre.svg"],incorrecta:["../../../../imagenes_front/Mascotas_Eje3/Eje3_MistakeFeedback_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_MistakeFeedback_Tigre.svg"],glosa:["../../../../imagenes_front/Mascotas_Eje3/Eje3_Glosa_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_Glosa_Tigre.svg"]},"04":{correcta:["../../../../imagenes_front/Mascotas_Eje4/Eje4_CorrectFeedback_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_CorrectFeedback_PandaRojo.svg"],incorrecta:["../../../../imagenes_front/Mascotas_Eje4/Eje4_MistakeFeedback_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_MistakeFeedback_PandaRojo.svg"],glosa:["../../../../imagenes_front/Mascotas_Eje4/Eje4_Glosa_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_Glosa_PandaRojo.svg"]},"05":{correcta:["../../../../imagenes_front/Mascotas_Eje5/Eje5_CorrectFeedback_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_CorrectFeedback_Tortuga.svg"],incorrecta:["../../../../imagenes_front/Mascotas_Eje5/Eje5_MistakeFeedback_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_MistakeFeedback_Tortuga.svg"],glosa:["../../../../imagenes_front/Mascotas_Eje5/Eje5_Glosa_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_Glosa_Tortuga.svg"]}};t.default=function(e){var t=e.substr(2,2),r=document.querySelector("div.d-none.d-sm-block.col-sm-2"),o=document.createElement("img");o.src=n[t].glosa[Math.floor(2*Math.random())],o.alt="Imagen Glosa",r.appendChild(o);var a=document.querySelector(".feedback-correcto div.text-container"),i=document.createElement("img");i.src=n[t].correcta[Math.floor(2*Math.random())],i.alt="Imagen feedback respuesta correcta",i.classList.add("imagen-feedback"),a.parentElement.insertBefore(i,a);var s=document.querySelector(".feedback-incorrecto div.text-container"),c=document.createElement("img");c.src=n[t].incorrecta[Math.floor(2*Math.random())],c.alt="Imagen feedback respuesta incorrecta",c.classList.add("imagen-feedback"),s.parentElement.insertBefore(c,s)}},"./scripts/funciones/BarraProgreso.js":
/*!********************************************!*\
  !*** ./scripts/funciones/BarraProgreso.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),t.default=function(e,t){var r=document.getElementById("progressbar"),o=250/(t+1),a=n("rect",{x:2,y:2,width:250,height:32,fill:"none",stroke:"#CCCBCB",strokeWidth:"1",rx:5,ry:5});r.appendChild(a);var i=Number(250-2*o),s=n("rect",{x:o,y:17,width:i,height:2,fill:"#E7E5E5",rx:2,ry:2});r.appendChild(s);for(var c=0;c<t;c++){var u=void 0,f=void 0;e.length>c?(f=4,u=e[c].correcto?1===e[c].NUMEROINTENTOS?"#00AC4D":"#E2C04D":"#E24B4A"):e.length===c?(f=8,u="#1280B1"):(f=4,u="#CCCBCB");var l=o*(c+1)+2,d=n("circle",{cx:l,cy:18,r:f,fill:u,stroke:"none"});if(r.appendChild(d),e.length===c){var p=n("text",{x:l,y:22,fontFamily:"sans-serif",fontSize:"11px",textAnchor:"middle",fill:"white"});p.textContent=e.length+1,r.appendChild(p)}}};var n=function(e,t){var r=document.createElementNS("http://www.w3.org/2000/svg",e);for(var n in t)r.setAttributeNS(null,n.replace(/[A-Z]/g,(function(e,t,r,n){return"-"+e.toLowerCase()})),t[n]);return r}},"./scripts/funciones/ConexionPlataforma.js":
/*!*************************************************!*\
  !*** ./scripts/funciones/ConexionPlataforma.js ***!
  \*************************************************/
/*! exports provided: enviar, cerrarFeed, pressConsulta, cerrarFeedGlosa, sgteGlosa */function(e,t,r){"use strict";function n(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,c=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return s=e.done,e},e:function(e){c=!0,i=e},f:function(){try{s||null==r.return||r.return()}finally{if(c)throw i}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.r(t),r.d(t,"enviar",(function(){return l})),r.d(t,"cerrarFeed",(function(){return d})),r.d(t,"pressConsulta",(function(){return p})),r.d(t,"cerrarFeedGlosa",(function(){return h})),r.d(t,"sgteGlosa",(function(){return g}));var a=(new Date).toLocaleTimeString(),i=window.parent.parent.varHidden,s=window.parent.parent.varTutorial,c=window.parent.parent.varSegundoError,u=window.parent.parent.cerrarFeedbackHijo,f=window.parent.parent.pressConsulta;Date.prototype.yyyymmdd=function(){var e=this.getMonth()+1,t=this.getDate();return[this.getFullYear(),(e>9?"":"0")+e,(t>9?"":"0")+t].join("-")};var l=function(e){var t=e.idEjercicio,r=e.tipoejercicio,o=e.errorFrecuente,s=new Date,c=window.location.href.substring(window.location.href.search(t)+(t.length+1),window.location.href.search(".html")),u=new Date,f="";if("radio"===r)f="Valor radio= "+document.querySelector("input[name=answer]:checked").value;else{var l,d=n(document.querySelectorAll(".contenido input[name=answer]"));try{for(d.s();!(l=d.n()).done;){var p=l.value;f+=p.id+" = "+p.value+" "}}catch(e){d.e(e)}finally{d.f()}}var h=JSON.stringify({idejercicioversion:c,correcto:o?0:1,estarea:0,idtareaiematricula:0,tiempoInicio:u.yyyymmdd()+" "+a,tiempoRespuesta:u.yyyymmdd()+" "+s.toLocaleTimeString(),feedback:o?"":"Respuesta Correcta",codigoErrorComun:o?0:o,respuesta:f,glosa:2==numeroIntento});y(i,h),window.numeroIntento++},d=function(){y(u,!0)},p=function(){y(f,"1")},h=function(){y(c,!0)},g=function(){s.value=!0;var e=document.createEvent("Event");e.initEvent("change",!0,!0),s.dispatchEvent(e)},y=function(e,t){try{e.value=t;var r=document.createEvent("Event");r.initEvent("change",!0,!0),e.dispatchEvent(r);var n=document.createEvent("Event");n.initEvent("click",!0,!0),e.dispatchEvent(n)}catch(e){console.log(e)}}},"./scripts/funciones/ContinuarEjercicio.js":
/*!*************************************************!*\
  !*** ./scripts/funciones/ContinuarEjercicio.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),t.default=function(e,t){t.querySelector("button").disabled=!0,t.style.display="none",document.querySelector("footer").style.display="grid","seleccion multiple"===e?(document.querySelector("input[type=radio]:checked").checked=!1,document.getElementsByName("answer").forEach((function(e){e.disabled=!1}))):document.querySelectorAll("input[type=text].inputTexto-incorrecto").forEach((function(e){e.disabled=!1,e.classList.remove("inputTexto-incorrecto"),e.value=""}))}},"./scripts/funciones/HandleRespuesta.js":
/*!**********************************************!*\
  !*** ./scripts/funciones/HandleRespuesta.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./ValidaRespuesta */"./scripts/funciones/ValidaRespuesta.js"),o=r(/*! ./ContinuarEjercicio */"./scripts/funciones/ContinuarEjercicio.js"),a=r(/*! ./ConexionPlataforma */"./scripts/funciones/ConexionPlataforma.js");t.default=function(e,t){e.target.disabled=!0;var r=t.idEjercicio,u=t.validaciones,f=t.tipoEjercicio,l=t.tmpProgreso;document.querySelector("footer").style.display="none",document.getElementsByName("answer").forEach((function(e){e.disabled=!0}));var d,p,h,g=Object(n.default)(u,f),y=g.feedback,_=g.errorFrecuente;if(_?(d=document.querySelector(".feedback-incorrecto"),p=document.querySelector(".feedback-incorrecto span.feedback-span"),h=document.querySelector(".feedback-incorrecto p.feedback-p")):(d=document.querySelector(".feedback-correcto"),p=document.querySelector(".feedback-correcto span.feedback-span"),h=document.querySelector(".feedback-correcto p.feedback-p")),_)1===window.numeroIntento?(p.innerHTML=c[Math.floor(4*Math.random())],h.innerHTML=y,d.querySelector("button").addEventListener("click",(function(){return Object(o.default)(f,d)})),d.style.display="block"):(document.querySelector("#btnCerrarGlosa").addEventListener("click",a.cerrarFeedGlosa),document.getElementById("glosa").style.display="block");else{d.style.display="block",p.innerHTML=s[Math.floor(4*Math.random())];var v=i(l);v&&(h.innerHTML="Tienes una racha de <b>".concat(v,"</b> respuestas correctas.")),2===window.numeroIntento&&d.querySelector("button").removeEventListener("click",(function(){return Object(o.default)(f,d)})),d.querySelector("button").addEventListener("click",a.cerrarFeed)}Object(a.enviar)({idEjercicio:r,tipoEjercicio:f,errorFrecuente:_})};var i=function(e){for(var t=0,r=e.length-1;r>-1&&e[r].correcto;r--)t++;return t+1>1?t+1:null},s=["¡Muy bien!","¡Lo has logrado!","¡Genial!","¡Así se hace!"],c=["¡Atención!","¡Algo anda mal!","¡Vuelve a intentarlo!","¡Ten cuidado!"]},"./scripts/funciones/IniciaListeners.js":
/*!**********************************************!*\
  !*** ./scripts/funciones/IniciaListeners.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,r){"use strict";function n(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,c=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return s=e.done,e},e:function(e){c=!0,i=e},f:function(){try{s||null==r.return||r.return()}finally{if(c)throw i}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.r(t),t.default=function(e){var t=function(e){return e.preventDefault(),!1};document.body.addEventListener("drop",t),document.body.addEventListener("contextmenu",t),"seleccion multiple"===e?document.querySelectorAll("input[type=radio]").forEach((function(e){e.addEventListener("change",(function(){document.getElementById("btnResponder").disabled=!1}))})):(document.querySelectorAll("input[type=text]").forEach((function(e){e.addEventListener("keyup",(function(){var e,t=!0,r=n(document.querySelectorAll("input[type=text]"));try{for(r.s();!(e=r.n()).done;){if(""===e.value.value.trim()){t=!1;break}}}catch(e){r.e(e)}finally{r.f()}document.getElementById("btnResponder").disabled=!t})),e.addEventListener("copy",t),e.addEventListener("paste",t),e.addEventListener("cut",t)})),document.querySelectorAll('[data-tipoinput="alfanumerico"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(e.keyCode>=48&&e.keyCode<=57||e.keyCode>=65&&e.keyCode<=90||e.keyCode>=97&&e.keyCode<=122||241==e.keyCode||209==e.keyCode||225==e.keyCode||233==e.keyCode||237==e.keyCode||243==e.keyCode||250==e.keyCode||193==e.keyCode||201==e.keyCode||205==e.keyCode||211==e.keyCode||218==e.keyCode||32==e.keyCode))return e.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="texto-numerico"],[data-tipoinput="texto"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(e.keyCode>=65&&e.keyCode<=90||e.keyCode>=97&&e.keyCode<=122||241==e.keyCode||209==e.keyCode||225==e.keyCode||233==e.keyCode||237==e.keyCode||243==e.keyCode||250==e.keyCode||193==e.keyCode||201==e.keyCode||205==e.keyCode||211==e.keyCode||218==e.keyCode||32==e.keyCode))return e.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="comparacion"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(60===e.keyCode||61===e.keyCode||62===e.keyCode))return e.preventDefault(),!1}))})),document.querySelectorAll('[data-tipoinput="numero"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(e.keyCode>=48&&e.keyCode<=57))return e.preventDefault(),!1})),e.addEventListener("keyup",(function(e){for(var t=String(e.target.value).replace(/\s/g,"").split("").reverse(),r=0,n=0,o="";r<t.length;r++)3===++n&&t[r+1]?(o=" "+t[r]+o,n=0):o=t[r]+o;e.target.value=o}))})),document.querySelectorAll('[data-tipoinput="decimal"]').forEach((function(e){e.addEventListener("keypress",(function(e){if(!(e.keyCode>=48&&e.keyCode<=57||44===e.keyCode))return e.preventDefault(),!1})),e.addEventListener("keyup",(function(e){var t=String(e.target.value).replace(" ",""),r=String(t).split(",")[0],n=String(t).split(",")[1],o=r.length>=4?"":r;if(r.length>=4){var a=r.split("").reverse(),i=1;a.forEach((function(e){3===i?(o=" "+e+o,i=1):(o=e+o,i++)}))}e.target.value="".concat(o).concat(void 0===n?"":",").concat(void 0===n?"":n)}))})))}},"./scripts/funciones/ValidaRespuesta.js":
/*!**********************************************!*\
  !*** ./scripts/funciones/ValidaRespuesta.js ***!
  \**********************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(Buffer){var _utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ../utils/FormateaNumeros */"./scripts/utils/FormateaNumeros.js");function _createForOfIteratorHelper(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==r.return||r.return()}finally{if(s)throw a}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function coloreaInputTextoPorDefecto(e){var t=e.getAttribute("data-tipoinput"),r=Buffer.from(e.getAttribute("data-content"),"base64").toString("utf-8");r=ReemplazaVariables(r,version.vars,!1);var n,o=!1;switch(t){case"numero":n=e.value.replace(/\s/g,""),r.split(",").forEach((function(t){n===t&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"decimal":n=e.value.replace(/\s/g,"").replace(",","."),r.split(",").forEach((function(t){n===t&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"texto-numerico":n=e.value,r.split(",").forEach((function(t){var r=3===t.length?("0"+t).split(""):t.split("");ValidaNumeroEscrito(n,r)&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"texto":case"alfanumerico":n=e.value,r.split(",").forEach((function(t){String(n).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")===String(t).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&(e.classList.add("inputTexto-correcto"),o=!0)}))}o||e.classList.add("inputTexto-incorrecto")}function coloreaInputsTextoPorCoincidencia(e){e.validaciones.forEach((function(e){var t=e.color,r=e.inputId,n=document.getElementById(r);"ok"===t?n.classList.add("inputTexto-correcto"):"bad"===t?n.classList.add("inputTexto-incorrecto"):n.value.replace(/\s/g,"")==t.correcta?n.classList.add("inputTexto-correcto"):n.classList.add("inputTexto-incorrecto")}))}__webpack_exports__.default=function(validaciones,tipo){var feedback,errorFrecuente;if("seleccion multiple"===tipo){var respuesta=document.querySelector("input[type=radio]:checked").value,_iterator=_createForOfIteratorHelper(validaciones),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var validacion=_step.value;if(respuesta==validacion.opcion){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.default)(validacion.feedback,"&nbsp;"),errorFrecuente=validacion.errorFrecuente;break}}}catch(e){_iterator.e(e)}finally{_iterator.f()}return{feedback:feedback,errorFrecuente:errorFrecuente}}if("respuesta breve"===tipo){var respuestas=validaciones.respuestas,errFrecDefecto=validaciones.errFrecDefecto,feedbackDefecto=validaciones.feedbackDefecto,_iterator2=_createForOfIteratorHelper(respuestas),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _respuesta=_step2.value,coincidenTodas=!0;if(_respuesta.validaciones.forEach((function(e,t){var r=document.getElementById(e.inputId);switch(r.getAttribute("data-tipoinput")){case"numero":r.value.replace(/\s/g,"")!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"decimal":r.value.replace(/\s/g,"").replace(",",".")!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"texto-numerico":var n=String(e.valor).padStart(4,"0").split("");ValidaNumeroEscrito(r.value.trim(),n)||"-any-"===e.valor||(coincidenTodas=!1);break;case"texto":case"alfanumerico":String(r.value).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")!==String(e.valor).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"comparacion":r.value!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1)}})),coincidenTodas){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.default)(_respuesta.feedback,"&nbsp;"),errorFrecuente=_respuesta.errFrec,null!==errorFrecuente?coloreaInputsTextoPorCoincidencia(_respuesta):document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")}));break}}}catch(e){_iterator2.e(e)}finally{_iterator2.f()}if(!feedback){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.default)(feedbackDefecto,"&nbsp;"),errorFrecuente=errFrecDefecto;var inputs=document.querySelectorAll("input[name='answer']"),_iterator3=_createForOfIteratorHelper(inputs),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var input=_step3.value;coloreaInputTextoPorDefecto(input)}}catch(e){_iterator3.e(e)}finally{_iterator3.f()}}return{feedback:feedback,errorFrecuente:errorFrecuente}}var _respuestas=validaciones.respuestas,_errFrecDefecto=validaciones.errFrecDefecto,_feedbackDefecto=validaciones.feedbackDefecto,_iterator4=_createForOfIteratorHelper(_respuestas),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var resp=_step4.value,evaluacion=resp.opcion.replace(/input\d/g,(function(e){return document.getElementById(e).value.replace(",",".").replace(/\s/,"")}));if(eval(evaluacion)){feedback=resp.feedback,errorFrecuente=resp.errorFrecuente;break}}}catch(e){_iterator4.e(e)}finally{_iterator4.f()}return feedback?document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")})):(feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.default)(_feedbackDefecto,"&nbsp;"),errorFrecuente=_errFrecDefecto,document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-incorrecto")}))),{feedback:feedback,errorFrecuente:errorFrecuente}}}.call(this,__webpack_require__(/*! ./../../node_modules/buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./scripts/index.js":
/*!**************************!*\
  !*** ./scripts/index.js ***!
  \**************************/
/*! no exports provided */function(e,t,r){"use strict";r.r(t),function(e){var t=r(/*! ./utils/ReemplazaVariables */"./scripts/utils/ReemplazaVariables.js"),n=r(/*! ./utils/ReemplazaFunciones */"./scripts/utils/ReemplazaFunciones.js"),o=r(/*! ./utils/DatosProgreso */"./scripts/utils/DatosProgreso.js"),a=r(/*! ./funciones/AgregaImagenes */"./scripts/funciones/AgregaImagenes.js"),i=r(/*! ./funciones/IniciaListeners */"./scripts/funciones/IniciaListeners.js"),s=r(/*! ./funciones/HandleRespuesta */"./scripts/funciones/HandleRespuesta.js"),c=r(/*! ./funciones/BarraProgreso */"./scripts/funciones/BarraProgreso.js"),u=r(/*! ./funciones/ConexionPlataforma */"./scripts/funciones/ConexionPlataforma.js"),f=function(){window.numeroIntento=parseInt(document.getElementById("hiddenIntento").value)||1,document.querySelector("#hiddenIntento").addEventListener("change",(function(e){window.numeroIntento=parseInt(e.target.value)})),document.querySelector("#btnConsulta").addEventListener("click",u.pressConsulta);var r=Object(o.default)(),f=r.tmpProgreso,l=r.tmpTotal;Object(c.default)(f,l);var d=document.body.dataset.id,p=JSON.parse(e(document.body.dataset.version,"base64").toString("utf8")),h=JSON.parse(Object(n.default)(Object(t.default)(e(document.body.dataset.x,"base64").toString("utf8"),p.vars,!1))),g=document.body.dataset.tipoejercicio;Object(a.default)(d),Object(i.default)(g),document.getElementById("btnResponder").addEventListener("click",(function(e){return Object(s.default)(e,{idEjercicio:d,validaciones:h,tipoEjercicio:g,tmpProgreso:f})}))};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",f):f()}.call(this,r(/*! ./../node_modules/buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./scripts/utils/DatosProgreso.js":
/*!****************************************!*\
  !*** ./scripts/utils/DatosProgreso.js ***!
  \****************************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),t.default=function(){var e=window.parent.parent.barraProgreso;if(e){var t=JSON.parse(e.value);return{tmpProgreso:t.tmpProgreso?t.tmpProgreso:[],tmpTotal:t.tmpTotal?Number(t.tmpTotal):0}}return{tmpProgreso:localStorage.getItem("tmpProgreso")?JSON.parse(localStorage.getItem("tmpProgreso")):[],tmpTotal:localStorage.getItem("tmpTotal")?Number(localStorage.getItem("tmpTotal")):0}}},"./scripts/utils/FormateaNumeros.js":
/*!******************************************!*\
  !*** ./scripts/utils/FormateaNumeros.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),t.default=function(e,t){return e.replace(/\d{1,}(\.\d{1,})?/g,(function(e){var r=e.split(".")[0],n=e.split(".")[1],o=r.length>=4?"":r;if(r.length>=4){var a=r.split("").reverse(),i=1;a.forEach((function(e,r){3===i&&r+1<a.length?(o=t+e+o,i=1):(o=e+o,i++)}))}return"".concat(o).concat(n?",":"").concat(n||"")}))}},"./scripts/utils/ReemplazaFunciones.js":
/*!*********************************************!*\
  !*** ./scripts/utils/ReemplazaFunciones.js ***!
  \*********************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";function frac(e,t,r){return'<span class=\\"eq\\">'.concat(e?'<span class=\\"integer\\">'.concat(e,"</span>"):"",'<span class=\\"fraction\\"><span class=\\"fup\\">&nbsp;').concat(t,'&nbsp;</span><span class=\\"bar\\">/</span><span class=\\"fdn\\">&nbsp;').concat(r,"&nbsp;</span></span></span>")}function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=function(text){var result=text.replace(/\/\[.*?\/\]/g,(function(coincidencia){var _final=coincidencia.length-4,funcion=coincidencia.substr(2,_final).replace(/&gt;/g,">").replace(/&lt;/,"<");try{return eval(funcion)}catch(e){return console.log(e),console.log(funcion),coincidencia}}));return result}},"./scripts/utils/ReemplazaVariables.js":
/*!*********************************************!*\
  !*** ./scripts/utils/ReemplazaVariables.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),t.default=function(e,t,r){return e.toString().replace(/\$[a-z]/g,(function(e){for(var n=0;n<t.length;n++)if(t[n].var==e[1])return r?t[n].vt:t[n].val}))}},"./styles/index.scss":
/*!***************************!*\
  !*** ./styles/index.scss ***!
  \***************************/
/*! no static exports found */function(e,t,r){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy9mdW5jaW9uZXMvQWdyZWdhSW1hZ2VuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy9mdW5jaW9uZXMvQmFycmFQcm9ncmVzby5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2Z1bmNpb25lcy9Db25leGlvblBsYXRhZm9ybWEuanMiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy9mdW5jaW9uZXMvQ29udGludWFyRWplcmNpY2lvLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvZnVuY2lvbmVzL0hhbmRsZVJlc3B1ZXN0YS5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2Z1bmNpb25lcy9JbmljaWFMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy9mdW5jaW9uZXMvVmFsaWRhUmVzcHVlc3RhLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy91dGlscy9EYXRvc1Byb2dyZXNvLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvdXRpbHMvRm9ybWF0ZWFOdW1lcm9zLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvdXRpbHMvUmVlbXBsYXphRnVuY2lvbmVzLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvdXRpbHMvUmVlbXBsYXphVmFyaWFibGVzLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYnl0ZUxlbmd0aCIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0b0J5dGVBcnJheSIsInRtcCIsImFyciIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsImxlbiIsInJldkxvb2t1cCIsImNoYXJDb2RlQXQiLCJmcm9tQnl0ZUFycmF5IiwidWludDgiLCJsZW5ndGgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJsZW4yIiwicHVzaCIsImVuY29kZUNodW5rIiwibG9va3VwIiwiam9pbiIsIlVpbnQ4QXJyYXkiLCJBcnJheSIsImNvZGUiLCJFcnJvciIsImluZGV4T2YiLCJzdGFydCIsImVuZCIsIm51bSIsIm91dHB1dCIsImJhc2U2NCIsImllZWU3NTQiLCJpc0FycmF5Iiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsIl9fcHJvdG9fXyIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJ0aGlzIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwiVHlwZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJ1bmRlZmluZWQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJvYmoiLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJjb3B5IiwiYnVmZmVyIiwidmFsIiwidHlwZSIsImRhdGEiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJ0b1N0cmluZyIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImIiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImlzTmFOIiwiYXJyYXlJbmRleE9mIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJTdHJpbmciLCJyZWFkIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImhleFdyaXRlIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsInN0ciIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsIk1hdGgiLCJtaW4iLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJnbG9iYWwiLCJmb28iLCJzdWJhcnJheSIsImUiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiY29uZmlndXJhYmxlIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiYXJndW1lbnRzIiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1heCIsIm1hdGNoIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0Iiwic2V0IiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJ0cmltIiwicmVwbGFjZSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJhYnMiLCJsb2ciLCJMTjIiLCJnIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJpbWFnZW5lc1BvckVqZSIsImNvcnJlY3RhIiwiaW5jb3JyZWN0YSIsImdsb3NhIiwicmFuZG9tIiwiaWRFamVyY2ljaW8iLCJuaXZlbCIsImRpdkltZ0dsb3NhIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW1nR2xvc2EiLCJjcmVhdGVFbGVtZW50IiwiYWx0IiwiYXBwZW5kQ2hpbGQiLCJicm90aGVySW1nRmVlZGJhY2tDb3JyZWN0byIsImltZ0ZlZWNiYWNrQ29ycmVjdG8iLCJjbGFzc0xpc3QiLCJhZGQiLCJwYXJlbnRFbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwiYnJvdGhlckltZ0ZlZWRiYWNrSW5jb3JyZWN0byIsImltZ0ZlZWNiYWNrSW5jb3JyZWN0byIsInRtcFByb2dyZXNvIiwidG1wVG90YWwiLCJzdmciLCJnZXRFbGVtZW50QnlJZCIsInNlcGFyYWNpb24iLCJib3JkZUJhcnJhIiwiY3JlYXJFbGVtZW50byIsIndpZHRoIiwiaGVpZ2h0Iiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJyeCIsInJ5IiwiYW5jaG9MaW5lYSIsImxpbmVhQmFycmEiLCJjb2xvckNpcmN1bG8iLCJyQ2lyY2xlIiwiY29ycmVjdG8iLCJOVU1FUk9JTlRFTlRPUyIsImN4Q2lyY2xlIiwiY2lyY2xlIiwiY3giLCJjeSIsInRleHRQb3NpY2lvbiIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsInRleHRBbmNob3IiLCJ0ZXh0Q29udGVudCIsIm5vbWJyZSIsImF0cmlidXRvcyIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImZlY2hhRW50cmFkYSIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJoaWRkZW5QYXJlbnQiLCJwYXJlbnQiLCJ2YXJIaWRkZW4iLCJoaWRkZW5UdXRvcmlhbCIsInZhclR1dG9yaWFsIiwiaGlkZGVuU2VndW5kb0Vycm9yIiwidmFyU2VndW5kb0Vycm9yIiwiaGlkZGVuQ2llcnJhRmVlZCIsImNlcnJhckZlZWRiYWNrSGlqbyIsImhpZGRlblByZXNzQ29uc3VsdGEiLCJwcmVzc0NvbnN1bHRhIiwieXl5eW1tZGQiLCJtbSIsImdldE1vbnRoIiwiZGQiLCJnZXREYXRlIiwiZ2V0RnVsbFllYXIiLCJlbnZpYXIiLCJkYXRvcyIsInRpcG9lamVyY2ljaW8iLCJlcnJvckZyZWN1ZW50ZSIsImZlY2hhVGVybWlub0ludGVudG8iLCJ2ZXJzaW9uRWplcmNpY2lvIiwibG9jYXRpb24iLCJocmVmIiwic3Vic3RyaW5nIiwic2VhcmNoIiwiZGF0ZSIsInZhbHVlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dCIsImlkIiwiZW52aW9JbnRlbnRvIiwiSlNPTiIsInN0cmluZ2lmeSIsIm51bWVyb0ludGVudG8iLCJkaXNwYXRjaEV2ZW50IiwiY2VycmFyRmVlZCIsImNlcnJhckZlZWRHbG9zYSIsInNndGVHbG9zYSIsImNoYW5nZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjbGlja0V2ZW50IiwiZXJyb3IiLCJjb25zb2xlIiwidGlwb0VqZXJjaWNpbyIsImZlZWRiYWNrRWxlbWVudCIsImRpc2FibGVkIiwic3R5bGUiLCJkaXNwbGF5IiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmb3JFYWNoIiwicmVtb3ZlIiwiZXZlbnQiLCJ2YWxpZGFjaW9uZXMiLCJmZWVkYmFja1NwYW4iLCJmZWVkYmFja1RleHQiLCJ2YWxpZGFSZXNwdWVzdGEiLCJmZWVkYmFjayIsImlubmVySFRNTCIsImZlZWROZWdhdGl2b3MiLCJhZGRFdmVudExpc3RlbmVyIiwiY29udGludWFyRWplcmNpY2lvIiwiZmVlZFBvc2l0aXZvcyIsInJhY2hhIiwicmFjaGFDb3JyZWN0YXMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29ycmVjdG9zIiwicHJldmVudEFjdGlvbiIsInByZXZlbnREZWZhdWx0IiwiYm9keSIsInRvZGFzUmVzcG9uZGlkYXMiLCJrZXlDb2RlIiwiYXJyYXlSZXZlcnNlIiwic3BsaXQiLCJyZXZlcnNlIiwiY291bnQiLCJ2YWxvciIsInZhbG9yUmVhbCIsImVudGVybyIsImRlY2ltYWwiLCJlbnRlcm9Fc3BhY2lhZG8iLCJlbnRlcm9SZXZlcnNlIiwibnVtZXJvIiwiY29sb3JlYUlucHV0VGV4dG9Qb3JEZWZlY3RvIiwiaW5wdXRFbGVtZW50IiwidGlwb0lucHV0IiwiZ2V0QXR0cmlidXRlIiwiY29ycmVjdGFzIiwiUmVlbXBsYXphVmFyaWFibGVzIiwidmVyc2lvbiIsInZhcnMiLCJyZXNwIiwibnVtYmVyQXJyIiwiVmFsaWRhTnVtZXJvRXNjcml0byIsIm5vcm1hbGl6ZSIsImNvbG9yZWFJbnB1dHNUZXh0b1BvckNvaW5jaWRlbmNpYSIsImNvaW5jaWRlbmNpYSIsImNvbG9yIiwiaW5wdXRJZCIsInRpcG8iLCJyZXNwdWVzdGEiLCJ2YWxpZGFjaW9uIiwib3BjaW9uIiwiZm9ybWF0ZWFOdW1lcm9zIiwicmVzcHVlc3RhcyIsImVyckZyZWNEZWZlY3RvIiwiZmVlZGJhY2tEZWZlY3RvIiwiY29pbmNpZGVuVG9kYXMiLCJpbmRleCIsInBhZFN0YXJ0IiwiZXJyRnJlYyIsImlucHV0cyIsImV2YWx1YWNpb24iLCJldmFsIiwiaW5pdCIsImRhdG9zUHJvZ3Jlc28iLCJiYXJyYVByb2dyZXNvIiwiZGF0YXNldCIsInBhcnNlIiwicmVlbXBsYXphRnVuY2lvbmVzIiwicmVlbXBsYXphVmFyaWFibGVzIiwiYWdyZWdhSW1hZ2VuZXMiLCJpbmljaWFMaXN0ZW5lcnMiLCJoYW5kbGVSZXNwdWVzdGEiLCJyZWFkeVN0YXRlIiwiaGlkZGVuQmFycmFEYXRvcyIsImRhdG9zQmFycmFEZVByb2dyZXNvIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInRleHRvIiwiZXNwYWNpbyIsImZyYWMiLCJudW1lcmFkb3IiLCJkZW5vbWluYWRvciIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInRleHQiLCJyZXN1bHQiLCJmaW5hbCIsImZ1bmNpb24iLCJ2YXJpYWJsZXMiLCJpc1R1dG9yaWFsIiwiaW5kZXhWYXIiLCJ2dCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFP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WCxXQUFXc0ssUUFBUSxZQUFZLFNBQVVnTCxHQUN4RCxJQUFLLElBQUkrQyxFQUFXLEVBQUdBLEVBQVdGLEVBQVU1YixPQUFROGIsSUFDaEQsR0FBSUYsRUFBVUUsR0FBVixLQUEyQi9DLEVBQWEsR0FDeEMsT0FBTzhDLEVBQWFELEVBQVVFLEdBQVVDLEdBQUtILEVBQVVFLEdBQVUzWSxTIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vaW5kZXguanNcIik7XG4iLCJpbXBvcnQgJy4vc2NyaXB0cy9pbmRleCdcbmltcG9ydCAnLi9zdHlsZXMvaW5kZXguc2NzcyciLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiY29uc3QgaW1hZ2VuZXNQb3JFamUgPSB7XG5cdCcwMSc6IHtcblx0XHRjb3JyZWN0YTogW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTEvRWplMV9Db3JyZWN0RmVlZGJhY2tfUGF0YS5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTEvRWplMV9Db3JyZWN0RmVlZGJhY2tfUGF0by5zdmcnXG5cdFx0XSxcblx0XHRpbmNvcnJlY3RhOiBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMS9FamUxX01pc3Rha2VGZWVkYmFja19QYXRhLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMS9FamUxX01pc3Rha2VGZWVkYmFja19QYXRvLnN2Zydcblx0XHRdLFxuXHRcdGdsb3NhOiBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMS9FamUxX0dsb3NhX1BhdGEuc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUxL0VqZTFfR2xvc2FfUGF0by5zdmcnXG5cdFx0XVxuXHR9LFxuXHQnMDInOiB7XG5cdFx0Y29ycmVjdGE6IFtcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUyL0VqZTJfQ29ycmVjdEZlZWRiYWNrX0FsY2Uuc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUyL0VqZTJfQ29ycmVjdEZlZWRiYWNrX1pvcnJvLnN2Zydcblx0XHRdLFxuXHRcdGluY29ycmVjdGE6IFtcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUyL0VqZTJfTWlzdGFrZUZlZWRiYWNrX0FsY2Uuc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamUyL0VqZTJfTWlzdGFrZUZlZWRiYWNrX1pvcnJvLnN2Zydcblx0XHRdLFxuXHRcdGdsb3NhOiBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMi9FamUyX0dsb3NhX1pvcnJvLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMi9FamUyX0dsb3NhX0FsY2Uuc3ZnJ1xuXHRcdF1cblx0fSxcblx0JzAzJzoge1xuXHRcdGNvcnJlY3RhOiBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMy9FamUzX0NvcnJlY3RGZWVkYmFja19NYW5kcmlsLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMy9FamUzX0NvcnJlY3RGZWVkYmFja19UaWdyZS5zdmcnXG5cdFx0XSxcblx0XHRpbmNvcnJlY3RhOiBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMy9FamUzX01pc3Rha2VGZWVkYmFja19NYW5kcmlsLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMy9FamUzX01pc3Rha2VGZWVkYmFja19UaWdyZS5zdmcnXG5cdFx0XSxcblx0XHRnbG9zYTogW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTMvRWplM19HbG9zYV9NYW5kcmlsLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplMy9FamUzX0dsb3NhX1RpZ3JlLnN2Zydcblx0XHRdXG5cdH0sXG5cdCcwNCc6IHtcblx0XHRjb3JyZWN0YTogW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTQvRWplNF9Db3JyZWN0RmVlZGJhY2tfT3NvUGFuZGEuc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamU0L0VqZTRfQ29ycmVjdEZlZWRiYWNrX1BhbmRhUm9qby5zdmcnXG5cdFx0XSxcblx0XHRpbmNvcnJlY3RhOiBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplNC9FamU0X01pc3Rha2VGZWVkYmFja19Pc29QYW5kYS5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTQvRWplNF9NaXN0YWtlRmVlZGJhY2tfUGFuZGFSb2pvLnN2Zydcblx0XHRdLFxuXHRcdGdsb3NhOiBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplNC9FamU0X0dsb3NhX09zb1BhbmRhLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplNC9FamU0X0dsb3NhX1BhbmRhUm9qby5zdmcnXG5cdFx0XVxuXHR9LFxuXHQnMDUnOiB7XG5cdFx0Y29ycmVjdGE6IFtcblx0XHRcdGAuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamU1L0VqZTVfQ29ycmVjdEZlZWRiYWNrX0NhbWFsZW9uJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqNSkrMX0uc3ZnYCxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9NYXNjb3Rhc19FamU1L0VqZTVfQ29ycmVjdEZlZWRiYWNrX1RvcnR1Z2Euc3ZnJ1xuXHRcdF0sXG5cdFx0aW5jb3JyZWN0YTogW1xuXHRcdFx0YC4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTUvRWplNV9NaXN0YWtlRmVlZGJhY2tfQ2FtYWxlb24ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSo1KSsxfS5zdmdgLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTUvRWplNV9NaXN0YWtlRmVlZGJhY2tfVG9ydHVnYS5zdmcnXG5cdFx0XSxcblx0XHRnbG9zYTogW1xuXHRcdFx0YC4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L01hc2NvdGFzX0VqZTUvRWplNV9HbG9zYV9DYW1hbGVvbiR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjUpKzF9LnN2Z2AsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvTWFzY290YXNfRWplNS9FamU1X0dsb3NhX1RvcnR1Z2Euc3ZnJ1xuXHRcdF1cblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBpZEVqZXJjaWNpbyA9PiB7XG5cdGxldCBuaXZlbCA9IGlkRWplcmNpY2lvLnN1YnN0cigyLCAyKVxuXHQvL2FncmVnYSBpbWFnZW4gZGUgZ2xvc2EgXG5cdGxldCBkaXZJbWdHbG9zYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5kLW5vbmUuZC1zbS1ibG9jay5jb2wtc20tMicpXG5cdGxldCBpbWdHbG9zYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXG5cdGltZ0dsb3NhLnNyYyA9IGltYWdlbmVzUG9yRWplW25pdmVsXS5nbG9zYVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMildXG5cdGltZ0dsb3NhLmFsdCA9ICdJbWFnZW4gR2xvc2EnXG5cdGRpdkltZ0dsb3NhLmFwcGVuZENoaWxkKGltZ0dsb3NhKVxuXHQvL2FncmVnYSBpbWFnZW4gZmVlZGJhY2sgY29ycmVjdG9cblx0bGV0IGJyb3RoZXJJbWdGZWVkYmFja0NvcnJlY3RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrLWNvcnJlY3RvIGRpdi50ZXh0LWNvbnRhaW5lcicpXG5cdGxldCBpbWdGZWVjYmFja0NvcnJlY3RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJylcblx0aW1nRmVlY2JhY2tDb3JyZWN0by5zcmMgPSBpbWFnZW5lc1BvckVqZVtuaXZlbF0uY29ycmVjdGFbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjIpXVxuXHRpbWdGZWVjYmFja0NvcnJlY3RvLmFsdCA9ICdJbWFnZW4gZmVlZGJhY2sgcmVzcHVlc3RhIGNvcnJlY3RhJ1xuXHRpbWdGZWVjYmFja0NvcnJlY3RvLmNsYXNzTGlzdC5hZGQoJ2ltYWdlbi1mZWVkYmFjaycpXG5cdGJyb3RoZXJJbWdGZWVkYmFja0NvcnJlY3RvLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGltZ0ZlZWNiYWNrQ29ycmVjdG8sIGJyb3RoZXJJbWdGZWVkYmFja0NvcnJlY3RvKVxuXG5cdGxldCBicm90aGVySW1nRmVlZGJhY2tJbmNvcnJlY3RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrLWluY29ycmVjdG8gZGl2LnRleHQtY29udGFpbmVyJylcblx0bGV0IGltZ0ZlZWNiYWNrSW5jb3JyZWN0byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXG5cdGltZ0ZlZWNiYWNrSW5jb3JyZWN0by5zcmMgPSBpbWFnZW5lc1BvckVqZVtuaXZlbF0uaW5jb3JyZWN0YVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMildXG5cdGltZ0ZlZWNiYWNrSW5jb3JyZWN0by5hbHQgPSAnSW1hZ2VuIGZlZWRiYWNrIHJlc3B1ZXN0YSBpbmNvcnJlY3RhJ1xuXHRpbWdGZWVjYmFja0luY29ycmVjdG8uY2xhc3NMaXN0LmFkZCgnaW1hZ2VuLWZlZWRiYWNrJylcblx0YnJvdGhlckltZ0ZlZWRiYWNrSW5jb3JyZWN0by5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShpbWdGZWVjYmFja0luY29ycmVjdG8sIGJyb3RoZXJJbWdGZWVkYmFja0luY29ycmVjdG8pXG59IiwiZXhwb3J0IGRlZmF1bHQgKHRtcFByb2dyZXNvLCB0bXBUb3RhbCkgPT4ge1xuXHRsZXQgYW5jaG9CYXJyYSA9IDI1MDsvLzI1NCBwYXJhIGVsIGVzcGFjaW8gZGVsIG1hcmdlblxuXHRsZXQgc3ZnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzYmFyJylcblx0bGV0IHNlcGFyYWNpb24gPSBhbmNob0JhcnJhIC8gKHRtcFRvdGFsICsgMSlcblx0bGV0IGJvcmRlQmFycmEgPSBjcmVhckVsZW1lbnRvKCdyZWN0Jywge1xuXHRcdHg6IDIsXG5cdFx0eTogMixcblx0XHR3aWR0aDogYW5jaG9CYXJyYSxcblx0XHRoZWlnaHQ6IDMyLFxuXHRcdGZpbGw6ICdub25lJyxcblx0XHRzdHJva2U6ICcjQ0NDQkNCJyxcblx0XHRzdHJva2VXaWR0aDogJzEnLFxuXHRcdHJ4OiA1LFxuXHRcdHJ5OiA1XG5cdH0pXG5cdHN2Zy5hcHBlbmRDaGlsZChib3JkZUJhcnJhKVxuXG5cdGxldCBhbmNob0xpbmVhID0gTnVtYmVyKGFuY2hvQmFycmEgLSAoc2VwYXJhY2lvbiAqIDIpKVxuXHRsZXQgbGluZWFCYXJyYSA9IGNyZWFyRWxlbWVudG8oJ3JlY3QnLCB7XG5cdFx0eDogc2VwYXJhY2lvbixcblx0XHR5OiAxNyxcblx0XHR3aWR0aDogYW5jaG9MaW5lYSxcblx0XHRoZWlnaHQ6IDIsXG5cdFx0ZmlsbDogJyNFN0U1RTUnLFxuXHRcdHJ4OiAyLFxuXHRcdHJ5OiAyXG5cdH0pO1xuXHRzdmcuYXBwZW5kQ2hpbGQobGluZWFCYXJyYSlcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRtcFRvdGFsOyBpKyspIHtcblx0XHRsZXQgY29sb3JDaXJjdWxvLCByQ2lyY2xlO1xuXHRcdGlmICh0bXBQcm9ncmVzby5sZW5ndGggPiBpKSB7XG5cdFx0XHRyQ2lyY2xlID0gNDtcblx0XHRcdGlmICh0bXBQcm9ncmVzb1tpXS5jb3JyZWN0bykge1xuXHRcdFx0XHRjb2xvckNpcmN1bG8gPSB0bXBQcm9ncmVzb1tpXS5OVU1FUk9JTlRFTlRPUyA9PT0gMSA/ICcjMDBBQzREJyA6ICcjRTJDMDREJ1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29sb3JDaXJjdWxvID0gJyNFMjRCNEEnXG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0bXBQcm9ncmVzby5sZW5ndGggPT09IGkpIHtcblx0XHRcdHJDaXJjbGUgPSA4XG5cdFx0XHRjb2xvckNpcmN1bG8gPSAnIzEyODBCMSdcblx0XHR9IGVsc2Uge1xuXHRcdFx0ckNpcmNsZSA9IDRcblx0XHRcdGNvbG9yQ2lyY3VsbyA9ICcjQ0NDQkNCJ1xuXHRcdH1cblx0XHRsZXQgY3hDaXJjbGUgPSBzZXBhcmFjaW9uICogKGkgKyAxKSArIDI7XG5cdFx0bGV0IGNpcmNsZSA9IGNyZWFyRWxlbWVudG8oJ2NpcmNsZScsIHtcblx0XHRcdGN4OiBjeENpcmNsZSxcblx0XHRcdGN5OiAxOCxcblx0XHRcdHI6IHJDaXJjbGUsXG5cdFx0XHRmaWxsOiBjb2xvckNpcmN1bG8sXG5cdFx0XHRzdHJva2U6ICdub25lJ1xuXHRcdH0pXG5cdFx0c3ZnLmFwcGVuZENoaWxkKGNpcmNsZSk7XG5cdFx0aWYgKHRtcFByb2dyZXNvLmxlbmd0aCA9PT0gaSkge1xuXHRcdFx0bGV0IHRleHRQb3NpY2lvbiA9IGNyZWFyRWxlbWVudG8oJ3RleHQnLCB7XG5cdFx0XHRcdHg6IGN4Q2lyY2xlLFxuXHRcdFx0XHR5OiAyMixcblx0XHRcdFx0Zm9udEZhbWlseTogJ3NhbnMtc2VyaWYnLFxuXHRcdFx0XHRmb250U2l6ZTogJzExcHgnLFxuXHRcdFx0XHR0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcblx0XHRcdFx0ZmlsbDogJ3doaXRlJ1xuXHRcdFx0fSlcblx0XHRcdHRleHRQb3NpY2lvbi50ZXh0Q29udGVudCA9IHRtcFByb2dyZXNvLmxlbmd0aCArIDFcblx0XHRcdHN2Zy5hcHBlbmRDaGlsZCh0ZXh0UG9zaWNpb24pXG5cdFx0fVxuXHR9XG59XG5cbmNvbnN0IGNyZWFyRWxlbWVudG8gPSAobm9tYnJlLCBhdHJpYnV0b3MpID0+IHtcbiAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIG5vbWJyZSlcbiAgICBmb3IgKGxldCBwIGluIGF0cmlidXRvcykge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIHAucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24gKG0sIHAsIG8sIHMpIHtcbiAgICAgICAgICAgIHJldHVybiBcIi1cIiArIG0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSksIGF0cmlidXRvc1twXSlcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRcbn0iLCJsZXQgZmVjaGFFbnRyYWRhID0gKG5ldyBEYXRlKCkpLnRvTG9jYWxlVGltZVN0cmluZygpXG52YXIgaGlkZGVuUGFyZW50ID0gd2luZG93LnBhcmVudC5wYXJlbnQudmFySGlkZGVuIC8vQ29tdW5pY2Fjw7NuIGNvbiBmcmFtZSBwYXJhIHJlc29sdmVyIGVqZXJjaWNpb1xudmFyIGhpZGRlblR1dG9yaWFsID0gd2luZG93LnBhcmVudC5wYXJlbnQudmFyVHV0b3JpYWwgLy9Db211bmljYWPDs24gY29uIGZyYW1lIHBvciB2aWRlbyB0dXRvcmlhbFxudmFyIGhpZGRlblNlZ3VuZG9FcnJvciA9IHdpbmRvdy5wYXJlbnQucGFyZW50LnZhclNlZ3VuZG9FcnJvciAvL0NvbXVuaWNhY8OzbiBjb24gZnJhbWUgU2VndW5kbyBlcnJvclxudmFyIGhpZGRlbkNpZXJyYUZlZWQgPSB3aW5kb3cucGFyZW50LnBhcmVudC5jZXJyYXJGZWVkYmFja0hpam8gLy9Db211bmljYWPDs24gY29uIGZyYW1lIFNlZ3VuZG8gZXJyb3JcbnZhciBoaWRkZW5QcmVzc0NvbnN1bHRhID0gd2luZG93LnBhcmVudC5wYXJlbnQucHJlc3NDb25zdWx0YSAvL0NvbXVuaWNhY8OzbiBjb24gZnJhbWUgU2VndW5kbyBlcnJvclxuXG5EYXRlLnByb3RvdHlwZS55eXl5bW1kZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbW0gPSB0aGlzLmdldE1vbnRoKCkgKyAxIC8vIGdldE1vbnRoKCkgaXMgemVyby1iYXNlZFxuICAgIGxldCBkZCA9IHRoaXMuZ2V0RGF0ZSgpXG5cbiAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLmdldEZ1bGxZZWFyKCksXG4gICAgICAgIChtbSA+IDkgPyAnJyA6ICcwJykgKyBtbSxcbiAgICAgICAgKGRkID4gOSA/ICcnIDogJzAnKSArIGRkXG4gICAgXS5qb2luKCctJylcbn1cblxuZXhwb3J0IGNvbnN0IGVudmlhciA9IGRhdG9zID0+IHtcbiAgICBjb25zdCB7IGlkRWplcmNpY2lvLCB0aXBvZWplcmNpY2lvLCBlcnJvckZyZWN1ZW50ZSB9ID0gZGF0b3NcbiAgICBsZXQgZmVjaGFUZXJtaW5vSW50ZW50byA9IG5ldyBEYXRlKClcbiAgICBsZXQgdmVyc2lvbkVqZXJjaWNpbyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnN1YnN0cmluZyh3aW5kb3cubG9jYXRpb24uaHJlZi5zZWFyY2goaWRFamVyY2ljaW8pICsgKGlkRWplcmNpY2lvLmxlbmd0aCArIDEpLCB3aW5kb3cubG9jYXRpb24uaHJlZi5zZWFyY2goJy5odG1sJykpXG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpXG5cbiAgICAvKi0tLWNhcHR1cmEgdmFsb3JlcyBkZSBsb3MgZWxlbWVudG9zLS0tLS0qL1xuICAgIGxldCB2YWx1ZXMgPSAnJztcbiAgICBpZiAodGlwb2VqZXJjaWNpbyA9PT0gJ3JhZGlvJykge1xuICAgICAgICB2YWx1ZXMgPSAnVmFsb3IgcmFkaW89ICcgKyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPWFuc3dlcl06Y2hlY2tlZCcpLnZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250ZW5pZG8gaW5wdXRbbmFtZT1hbnN3ZXJdJylcbiAgICAgICAgZm9yIChsZXQgaW5wdXQgb2YgaW5wdXRzKSB7XG4gICAgICAgICAgICB2YWx1ZXMgKz0gaW5wdXQuaWQgKyAnID0gJysgaW5wdXQudmFsdWUgKyAnICc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIGxldCBlbnZpb0ludGVudG8gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICdpZGVqZXJjaWNpb3ZlcnNpb24nOiB2ZXJzaW9uRWplcmNpY2lvLFxuICAgICAgICAnY29ycmVjdG8nOiBlcnJvckZyZWN1ZW50ZSA/IDAgOiAxLFxuICAgICAgICAnZXN0YXJlYSc6IDAsXG4gICAgICAgICdpZHRhcmVhaWVtYXRyaWN1bGEnOiAwLFxuICAgICAgICAndGllbXBvSW5pY2lvJzogJycgKyBkYXRlLnl5eXltbWRkKCkgKyAnICcgKyBmZWNoYUVudHJhZGEgKyAnJyxcbiAgICAgICAgJ3RpZW1wb1Jlc3B1ZXN0YSc6ICcnICsgZGF0ZS55eXl5bW1kZCgpICsgJyAnICsgZmVjaGFUZXJtaW5vSW50ZW50by50b0xvY2FsZVRpbWVTdHJpbmcoKSArICcnLFxuICAgICAgICAnZmVlZGJhY2snOiBlcnJvckZyZWN1ZW50ZSA/ICcnIDogJ1Jlc3B1ZXN0YSBDb3JyZWN0YScsXG4gICAgICAgICdjb2RpZ29FcnJvckNvbXVuJzogZXJyb3JGcmVjdWVudGUgPyAwIDogZXJyb3JGcmVjdWVudGUsXG4gICAgICAgICdyZXNwdWVzdGEnOiB2YWx1ZXMsXG4gICAgICAgICdnbG9zYSc6IG51bWVyb0ludGVudG8gPT0gMiA/IHRydWUgOiBmYWxzZVxuICAgIH0pXG4gICAgLyotLS0tQ29tdW5pY2FjaW9uIGRlIGZyYW1lIGEgcMOhZ2luYSBwYWRyZS0tLS0qL1xuICAgIGRpc3BhdGNoRXZlbnQoaGlkZGVuUGFyZW50LCBlbnZpb0ludGVudG8pXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgd2luZG93Lm51bWVyb0ludGVudG8rKztcbn1cblxuZXhwb3J0IGNvbnN0IGNlcnJhckZlZWQgPSAoKSA9PiB7Ly9zaWd1aWVudGUgZWplcmNjaW8gcmVzcHVlc3RhIGNvcnJlY3Rhc1xuICAgIGRpc3BhdGNoRXZlbnQoaGlkZGVuQ2llcnJhRmVlZCwgdHJ1ZSlcbiAgICAvLyQoaGlkZGVuQ2llcnJhRmVlZCkudmFsKHRydWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIC8vJChoaWRkZW5DaWVycmFGZWVkKS52YWwodHJ1ZSkudHJpZ2dlcignY2xpY2snKTtcbn1cblxuZXhwb3J0IGNvbnN0IHByZXNzQ29uc3VsdGEgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2hFdmVudChoaWRkZW5QcmVzc0NvbnN1bHRhLCAnMScpXG4gICAgLy8kKGhpZGRlblByZXNzQ29uc3VsdGEpLnZhbCgnMScpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIC8vJChoaWRkZW5QcmVzc0NvbnN1bHRhKS52YWwoJzEnKS50cmlnZ2VyKCdjbGljaycpO1xufVxuXG5leHBvcnQgY29uc3QgY2VycmFyRmVlZEdsb3NhID0gKCkgPT4gey8vc2lndWllbnRlIGVqZXJjaWNpbyByZXNwdWVzdGEgaW5jb3JyZWN0YSBwb3Igc2VndW5kYSB2ZXpcbiAgICBkaXNwYXRjaEV2ZW50KGhpZGRlblNlZ3VuZG9FcnJvciwgdHJ1ZSlcbiAgICAvLyQoaGlkZGVuU2VndW5kb0Vycm9yKS52YWwodHJ1ZSkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgLy8kKGhpZGRlblNlZ3VuZG9FcnJvcikudmFsKHRydWUpLnRyaWdnZXIoJ2NsaWNrJyk7XG59XG5cbmV4cG9ydCBjb25zdCBzZ3RlR2xvc2EgPSAoKSA9PiB7XG4gICAgaGlkZGVuVHV0b3JpYWwudmFsdWUgPSB0cnVlXG4gICAgbGV0IGNoYW5nZUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JylcbiAgICBjaGFuZ2VFdmVudC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpXG4gICAgaGlkZGVuVHV0b3JpYWwuZGlzcGF0Y2hFdmVudChjaGFuZ2VFdmVudClcbn1cblxuXG5jb25zdCBkaXNwYXRjaEV2ZW50ID0gKGVsZW1lbnQsIHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlXG4gICAgXG4gICAgICAgIGxldCBjaGFuZ2VFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLy8gQ3JlYXRlIHRoZSBldmVudC5cbiAgICAgICAgY2hhbmdlRXZlbnQuaW5pdEV2ZW50KCdjaGFuZ2UnLCB0cnVlLCB0cnVlKS8vIERlZmluZSB0aGF0IHRoZSBldmVudCBuYW1lIGlzICdjaGFuZ2UnLlxuICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoY2hhbmdlRXZlbnQpLy8gVGFyZ2V0IGNhbiBiZSBhbnkgRWxlbWVudCBvciBvdGhlciBFdmVudFRhcmdldC5cbiAgICBcbiAgICAgICAgbGV0IGNsaWNrRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKVxuICAgICAgICBjbGlja0V2ZW50LmluaXRFdmVudCgnY2xpY2snLCB0cnVlLCB0cnVlKVxuICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoY2xpY2tFdmVudClcbiAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgIH1cbiAgICBcbn0gIiwiZXhwb3J0IGRlZmF1bHQgKHRpcG9FamVyY2ljaW8sIGZlZWRiYWNrRWxlbWVudCkgPT4ge1xuXHRmZWVkYmFja0VsZW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uJykuZGlzYWJsZWQgPSB0cnVlXG5cdGZlZWRiYWNrRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvb3RlcicpLnN0eWxlLmRpc3BsYXkgPSAnZ3JpZCdcblxuXHRpZiAodGlwb0VqZXJjaWNpbyA9PT0gJ3NlbGVjY2lvbiBtdWx0aXBsZScpIHtcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPXJhZGlvXTpjaGVja2VkJykuY2hlY2tlZCA9IGZhbHNlXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ2Fuc3dlcicpLmZvckVhY2goaW5wdXQgPT4ge1xuXHRcdFx0aW5wdXQuZGlzYWJsZWQgPSBmYWxzZVxuXHRcdH0pXG5cdH0gZWxzZSB7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT10ZXh0XS5pbnB1dFRleHRvLWluY29ycmVjdG8nKS5mb3JFYWNoKGlucHV0ID0+IHtcblx0XHRcdGlucHV0LmRpc2FibGVkID0gZmFsc2Vcblx0XHRcdGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ2lucHV0VGV4dG8taW5jb3JyZWN0bycpXG5cdFx0XHRpbnB1dC52YWx1ZSA9ICcnXG5cdFx0fSlcblx0fVxufVxuIiwiaW1wb3J0IHZhbGlkYVJlc3B1ZXN0YSBmcm9tICcuL1ZhbGlkYVJlc3B1ZXN0YSdcbmltcG9ydCBjb250aW51YXJFamVyY2ljaW8gZnJvbSAnLi9Db250aW51YXJFamVyY2ljaW8nXG5pbXBvcnQgeyBlbnZpYXIsIGNlcnJhckZlZWRHbG9zYSwgY2VycmFyRmVlZCB9IGZyb20gJy4vQ29uZXhpb25QbGF0YWZvcm1hJ1xuXG5leHBvcnQgZGVmYXVsdCAoZXZlbnQsIGRhdG9zKSA9PiB7XG5cdGV2ZW50LnRhcmdldC5kaXNhYmxlZCA9IHRydWVcblx0bGV0IHsgaWRFamVyY2ljaW8sIHZhbGlkYWNpb25lcywgdGlwb0VqZXJjaWNpbywgdG1wUHJvZ3Jlc28gfSA9IGRhdG9zXG5cblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9vdGVyJykuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuXG5cdGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdhbnN3ZXInKS5mb3JFYWNoKGlucHV0ID0+IHtcblx0XHRpbnB1dC5kaXNhYmxlZCA9IHRydWVcblx0fSlcblxuXHRsZXQgeyBmZWVkYmFjaywgZXJyb3JGcmVjdWVudGUgfSA9IHZhbGlkYVJlc3B1ZXN0YSh2YWxpZGFjaW9uZXMsIHRpcG9FamVyY2ljaW8pXG5cdFxuXHRsZXQgZmVlZGJhY2tFbGVtZW50LCBmZWVkYmFja1NwYW4sIGZlZWRiYWNrVGV4dFxuXHRpZihlcnJvckZyZWN1ZW50ZSkge1xuXHRcdGZlZWRiYWNrRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjay1pbmNvcnJlY3RvJylcblx0XHRmZWVkYmFja1NwYW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmVlZGJhY2staW5jb3JyZWN0byBzcGFuLmZlZWRiYWNrLXNwYW4nKVxuXHRcdGZlZWRiYWNrVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjay1pbmNvcnJlY3RvIHAuZmVlZGJhY2stcCcpIFxuXHR9IGVsc2Uge1xuXHRcdGZlZWRiYWNrRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjay1jb3JyZWN0bycpXG5cdFx0ZmVlZGJhY2tTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrLWNvcnJlY3RvIHNwYW4uZmVlZGJhY2stc3BhbicpXG5cdFx0ZmVlZGJhY2tUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrLWNvcnJlY3RvIHAuZmVlZGJhY2stcCcpIFxuXHR9XG5cblx0aWYgKCFlcnJvckZyZWN1ZW50ZSkge1xuXHRcdC8vcmVzcHVlc3RhIGNvcnJlY3RhXG5cdFx0ZmVlZGJhY2tFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG5cblx0XHRmZWVkYmFja1NwYW4uaW5uZXJIVE1MID0gZmVlZFBvc2l0aXZvc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqNCldXG5cdFx0bGV0IHJhY2hhID0gcmFjaGFDb3JyZWN0YXModG1wUHJvZ3Jlc28pXG5cdFx0aWYgKHJhY2hhKSB7XG5cdFx0XHRmZWVkYmFja1RleHQuaW5uZXJIVE1MID0gYFRpZW5lcyB1bmEgcmFjaGEgZGUgPGI+JHtyYWNoYX08L2I+IHJlc3B1ZXN0YXMgY29ycmVjdGFzLmBcblx0XHR9XG5cdFx0aWYod2luZG93Lm51bWVyb0ludGVudG8gPT09IDIpIHtcblx0XHRcdGZlZWRiYWNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGNvbnRpbnVhckVqZXJjaWNpbyh0aXBvRWplcmNpY2lvLCBmZWVkYmFja0VsZW1lbnQpKS8vc2kgZXMgcXVlIGVzIGVsIHNlZ3VuZG8gaW50ZW50b1xuXHRcdH1cblx0XHRmZWVkYmFja0VsZW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjZXJyYXJGZWVkKVxuXHR9IGVsc2Uge1xuXHRcdC8vcmVzcHVlc3RhIGluY29ycmVjdGFcblx0XHRpZiAod2luZG93Lm51bWVyb0ludGVudG8gPT09IDEpIHtcblx0XHRcdGZlZWRiYWNrU3Bhbi5pbm5lckhUTUwgPSBmZWVkTmVnYXRpdm9zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSo0KV1cblx0XHRcdGZlZWRiYWNrVGV4dC5pbm5lckhUTUwgPSBmZWVkYmFja1xuXHRcdFx0ZmVlZGJhY2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gY29udGludWFyRWplcmNpY2lvKHRpcG9FamVyY2ljaW8sIGZlZWRiYWNrRWxlbWVudCkpXG5cdFx0XHRmZWVkYmFja0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2J0bkNlcnJhckdsb3NhJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjZXJyYXJGZWVkR2xvc2EpXG5cdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2xvc2EnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuXG5cdFx0fVxuXHR9XG5cdGVudmlhcih7IGlkRWplcmNpY2lvLCB0aXBvRWplcmNpY2lvLCBlcnJvckZyZWN1ZW50ZSB9KVxufVxuXG5jb25zdCByYWNoYUNvcnJlY3RhcyA9IHRtcFByb2dyZXNvID0+IHtcblx0dmFyIGNvcnJlY3RvcyA9IDBcblx0Zm9yICh2YXIgaSA9IHRtcFByb2dyZXNvLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG5cdFx0aWYgKHRtcFByb2dyZXNvW2ldLmNvcnJlY3RvKSB7XG5cdFx0XHRjb3JyZWN0b3MrK1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRicmVha1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gY29ycmVjdG9zICsgMSA+IDEgPyBjb3JyZWN0b3MgKyAxIDogbnVsbFxufVxuXG5jb25zdCBmZWVkUG9zaXRpdm9zID0gW1xuXHQnwqFNdXkgYmllbiEnLFxuXHQnwqFMbyBoYXMgbG9ncmFkbyEnLFxuXHQnwqFHZW5pYWwhJyxcblx0J8KhQXPDrSBzZSBoYWNlISdcbl1cblxuY29uc3QgZmVlZE5lZ2F0aXZvcyA9IFtcblx0J8KhQXRlbmNpw7NuIScsXG5cdCfCoUFsZ28gYW5kYSBtYWwhJyxcblx0J8KhVnVlbHZlIGEgaW50ZW50YXJsbyEnLFxuXHQnwqFUZW4gY3VpZGFkbyEnXG5dIiwiZXhwb3J0IGRlZmF1bHQgdGlwb0VqZXJjaWNpbyA9PiB7XG5cdGNvbnN0IHByZXZlbnRBY3Rpb24gPSBldmVudCA9PiB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxuXHRcdHJldHVybiBmYWxzZVxuICAgIH1cblxuXHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBwcmV2ZW50QWN0aW9uKVxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBwcmV2ZW50QWN0aW9uKVxuICAgIFxuICAgIGlmKHRpcG9FamVyY2ljaW8gPT09ICdzZWxlY2Npb24gbXVsdGlwbGUnKSB7XG4gICAgICAgIC8vaW5wdXRzIGRlIHRpcG8gcmFkaW9cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1yYWRpb10nKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuUmVzcG9uZGVyJykuZGlzYWJsZWQgPSBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICAvL2lucHV0cyBkZSB0aXBvIHRleHRcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT10ZXh0XScpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRvZGFzUmVzcG9uZGlkYXMgPSB0cnVlXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5wdXQgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT10ZXh0XScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2Rhc1Jlc3BvbmRpZGFzID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0blJlc3BvbmRlcicpLmRpc2FibGVkID0gIXRvZGFzUmVzcG9uZGlkYXNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjb3B5JywgcHJldmVudEFjdGlvbilcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgcHJldmVudEFjdGlvbilcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2N1dCcsIHByZXZlbnRBY3Rpb24pXG4gICAgICAgIH0pXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRpcG9pbnB1dD1cImFsZmFudW1lcmljb1wiXScpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB2YWxpZGFjaW9uID0gKGUua2V5Q29kZSA+PSA0OCAmJiBlLmtleUNvZGUgPD0gNTcpIC8vbnVtZXJvc1xuICAgICAgICAgICAgICAgICAgICB8fCAoZS5rZXlDb2RlID49IDY1ICYmIGUua2V5Q29kZSA8PSA5MCkgLy9sZXRyYSBtYXl1emNcbiAgICAgICAgICAgICAgICAgICAgfHwgKGUua2V5Q29kZSA+PSA5NyAmJiBlLmtleUNvZGUgPD0gMTIyKSAvL2xldHJhIG1pbnVzY1xuICAgICAgICAgICAgICAgICAgICB8fCAoZS5rZXlDb2RlID09IDI0MSB8fCBlLmtleUNvZGUgPT0gMjA5KSAvL8OxIHkgw5FcbiAgICAgICAgICAgICAgICAgICAgfHwgKGUua2V5Q29kZSA9PSAyMjUgfHwgZS5rZXlDb2RlID09IDIzMyB8fCBlLmtleUNvZGUgPT0gMjM3IHx8IGUua2V5Q29kZSA9PSAyNDMgfHwgZS5rZXlDb2RlID09IDI1MCkgLy/DocOpw63Ds8O6XG4gICAgICAgICAgICAgICAgICAgIHx8IChlLmtleUNvZGUgPT0gMTkzIHx8IGUua2V5Q29kZSA9PSAyMDEgfHwgZS5rZXlDb2RlID09IDIwNSB8fCBlLmtleUNvZGUgPT0gMjExIHx8IGUua2V5Q29kZSA9PSAyMTgpIC8vw4HDicONw5PDmlxuICAgICAgICAgICAgICAgICAgICB8fCAoZS5rZXlDb2RlID09IDMyKSAvL2VzcGFjaW9cbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYWNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGlwb2lucHV0PVwidGV4dG8tbnVtZXJpY29cIl0sW2RhdGEtdGlwb2lucHV0PVwidGV4dG9cIl0nKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsaWRhY2lvbiA9IChlLmtleUNvZGUgPj0gNjUgJiYgZS5rZXlDb2RlIDw9IDkwKSAvL2xldHJhIG1heXV6Y1xuICAgICAgICAgICAgICAgICAgICB8fCAoZS5rZXlDb2RlID49IDk3ICYmIGUua2V5Q29kZSA8PSAxMjIpIC8vbGV0cmEgbWludXNjXG4gICAgICAgICAgICAgICAgICAgIHx8IChlLmtleUNvZGUgPT0gMjQxIHx8IGUua2V5Q29kZSA9PSAyMDkpIC8vw7EgeSDDkVxuICAgICAgICAgICAgICAgICAgICB8fCAoZS5rZXlDb2RlID09IDIyNSB8fCBlLmtleUNvZGUgPT0gMjMzIHx8IGUua2V5Q29kZSA9PSAyMzcgfHwgZS5rZXlDb2RlID09IDI0MyB8fCBlLmtleUNvZGUgPT0gMjUwKSAvL8Ohw6nDrcOzw7pcbiAgICAgICAgICAgICAgICAgICAgfHwgKGUua2V5Q29kZSA9PSAxOTMgfHwgZS5rZXlDb2RlID09IDIwMSB8fCBlLmtleUNvZGUgPT0gMjA1IHx8IGUua2V5Q29kZSA9PSAyMTEgfHwgZS5rZXlDb2RlID09IDIxOCkgLy/DgcOJw43Dk8OaXG4gICAgICAgICAgICAgICAgICAgIHx8IChlLmtleUNvZGUgPT0gMzIpIC8vZXNwYWNpb1xuICAgICAgICAgICAgICAgIGlmICghdmFsaWRhY2lvbikge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10aXBvaW5wdXQ9XCJjb21wYXJhY2lvblwiXScpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB2YWxpZGFjaW9uID0gKGUua2V5Q29kZSA9PT0gNjAgfHwgZS5rZXlDb2RlID09PSA2MSB8fCBlLmtleUNvZGUgPT09IDYyKVxuICAgICAgICAgICAgICAgIGlmICghdmFsaWRhY2lvbikge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10aXBvaW5wdXQ9XCJudW1lcm9cIl0nKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsaWRhY2lvbiA9IGUua2V5Q29kZSA+PSA0OCAmJiBlLmtleUNvZGUgPD0gNTcgLy9zb2xvIG51bWVyb1xuICAgICAgICAgICAgICAgIGlmICghdmFsaWRhY2lvbikge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBhcnJheVJldmVyc2UgPSBTdHJpbmcoZS50YXJnZXQudmFsdWUpLnJlcGxhY2UoL1xccy9nLCAnJykuc3BsaXQoXCJcIikucmV2ZXJzZSgpOyAvL2VzcGFjaW8gY2FkYSAzIG51bWVyb3NcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY291bnQgPSAwLCB2YWxvciA9ICcnOyBpIDwgYXJyYXlSZXZlcnNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMyAmJiBhcnJheVJldmVyc2VbaSArIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxvciA9ICcgJyArIGFycmF5UmV2ZXJzZVtpXSArIHZhbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsb3IgPSBhcnJheVJldmVyc2VbaV0gKyB2YWxvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLnRhcmdldC52YWx1ZSA9IHZhbG9yO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGlwb2lucHV0PVwiZGVjaW1hbFwiXScpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciB2YWxpZGFjaW9uID0gZS5rZXlDb2RlID49IDQ4ICYmIGUua2V5Q29kZSA8PSA1NyB8fCAvL3NvbG8gbnVtZXJvXG4gICAgICAgICAgICAgICAgICAgIGUua2V5Q29kZSA9PT0gNDQgLy9jb21hXG4gICAgICAgICAgICAgICAgaWYgKCF2YWxpZGFjaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbG9yUmVhbCA9IFN0cmluZyhlLnRhcmdldC52YWx1ZSkucmVwbGFjZSgnICcsICcnKVxuICAgICAgICAgICAgICAgIGxldCBlbnRlcm8gPSBTdHJpbmcodmFsb3JSZWFsKS5zcGxpdCgnLCcpWzBdXG4gICAgICAgICAgICAgICAgbGV0IGRlY2ltYWwgPSBTdHJpbmcodmFsb3JSZWFsKS5zcGxpdCgnLCcpWzFdXG4gICAgICAgICAgICAgICAgbGV0IGVudGVyb0VzcGFjaWFkbyA9IGVudGVyby5sZW5ndGggPj0gNCA/ICcnIDogZW50ZXJvXG4gICAgICAgICAgICAgICAgaWYgKGVudGVyby5sZW5ndGggPj0gNCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZW50ZXJvUmV2ZXJzZSA9IGVudGVyby5zcGxpdCgnJykucmV2ZXJzZSgpXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDFcbiAgICAgICAgICAgICAgICAgICAgZW50ZXJvUmV2ZXJzZS5mb3JFYWNoKGZ1bmN0aW9uIChudW1lcm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGVyb0VzcGFjaWFkbyA9ICcgJyArIG51bWVybyArIGVudGVyb0VzcGFjaWFkb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ID0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlcm9Fc3BhY2lhZG8gPSBudW1lcm8gKyBlbnRlcm9Fc3BhY2lhZG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLnRhcmdldC52YWx1ZSA9IGAke2VudGVyb0VzcGFjaWFkb30ke3R5cGVvZiBkZWNpbWFsID09PSAndW5kZWZpbmVkJyA/ICcnIDogJywnfSR7dHlwZW9mIGRlY2ltYWwgPT09ICd1bmRlZmluZWQnID8gJycgOiBkZWNpbWFsfWBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxufSIsImltcG9ydCBmb3JtYXRlYU51bWVyb3MgZnJvbSAnLi4vdXRpbHMvRm9ybWF0ZWFOdW1lcm9zJ1xuXG5leHBvcnQgZGVmYXVsdCAodmFsaWRhY2lvbmVzLCB0aXBvKSA9PiB7XG5cdGxldCBmZWVkYmFjaywgZXJyb3JGcmVjdWVudGVcblx0aWYodGlwbyA9PT0gJ3NlbGVjY2lvbiBtdWx0aXBsZScpIHtcbiAgICAgICAgbGV0IHJlc3B1ZXN0YSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9cmFkaW9dOmNoZWNrZWQnKS52YWx1ZVxuXHRcdGZvcihsZXQgdmFsaWRhY2lvbiBvZiB2YWxpZGFjaW9uZXMpIHtcblx0XHRcdGlmKHJlc3B1ZXN0YSA9PSB2YWxpZGFjaW9uLm9wY2lvbikge1xuXHRcdFx0XHRmZWVkYmFjayA9IGZvcm1hdGVhTnVtZXJvcyh2YWxpZGFjaW9uLmZlZWRiYWNrLCAnJm5ic3A7Jylcblx0XHRcdFx0ZXJyb3JGcmVjdWVudGUgPSB2YWxpZGFjaW9uLmVycm9yRnJlY3VlbnRlXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB7IGZlZWRiYWNrLCBlcnJvckZyZWN1ZW50ZSB9XG5cdH0gZWxzZSBpZiAodGlwbyA9PT0gJ3Jlc3B1ZXN0YSBicmV2ZScpIHtcblx0XHRjb25zdCB7IHJlc3B1ZXN0YXMsIGVyckZyZWNEZWZlY3RvLCBmZWVkYmFja0RlZmVjdG8gfSA9IHZhbGlkYWNpb25lc1xuXHRcdGZvciAobGV0IHJlc3B1ZXN0YSBvZiByZXNwdWVzdGFzKSB7XG5cdFx0XHRsZXQgY29pbmNpZGVuVG9kYXMgPSB0cnVlXG5cdFx0XHRyZXNwdWVzdGEudmFsaWRhY2lvbmVzLmZvckVhY2goZnVuY3Rpb24odmFsLCBpbmRleCkge1xuXHRcdFx0XHRsZXQgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh2YWwuaW5wdXRJZCk7XG5cdFx0XHRcdGxldCB0aXBvSW5wdXQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwb2lucHV0Jylcblx0XHRcdFx0c3dpdGNoICh0aXBvSW5wdXQpIHtcblx0XHRcdFx0XHRjYXNlICdudW1lcm8nOlxuXHRcdFx0XHRcdFx0aWYgKGlucHV0LnZhbHVlLnJlcGxhY2UoL1xccy9nLCAnJykgIT09IHZhbC52YWxvciAmJiB2YWwudmFsb3IgIT09ICctYW55LScpIHtcblx0XHRcdFx0XHRcdFx0Y29pbmNpZGVuVG9kYXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGVjaW1hbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsdWUucmVwbGFjZSgvXFxzL2csICcnKS5yZXBsYWNlKCcsJywnLicpICE9PSB2YWwudmFsb3IgJiYgdmFsLnZhbG9yICE9PSAnLWFueS0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29pbmNpZGVuVG9kYXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGV4dG8tbnVtZXJpY28nOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG51bWJlckFyciA9IFN0cmluZyh2YWwudmFsb3IpLnBhZFN0YXJ0KDQsICcwJykuc3BsaXQoJycpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShWYWxpZGFOdW1lcm9Fc2NyaXRvKGlucHV0LnZhbHVlLnRyaW0oKSwgbnVtYmVyQXJyKSkgJiYgdmFsLnZhbG9yICE9PSAnLWFueS0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29pbmNpZGVuVG9kYXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGV4dG8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoU3RyaW5nKGlucHV0LnZhbHVlKS50cmltKCkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICE9PSBTdHJpbmcodmFsLnZhbG9yKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdmFsLnZhbG9yICE9PSAnLWFueS0nKSBcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhbGZhbnVtZXJpY28nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoU3RyaW5nKGlucHV0LnZhbHVlKS50cmltKCkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICE9PSBTdHJpbmcodmFsLnZhbG9yKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdmFsLnZhbG9yICE9PSAnLWFueS0nKSBcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21wYXJhY2lvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpbnB1dC52YWx1ZSAhPT0gdmFsLnZhbG9yICYmIHZhbC52YWxvciAhPT0gJy1hbnktJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvaW5jaWRlblRvZGFzID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG5cdFx0XHRcdH1cbiAgICAgICAgICAgIH0pXG5cdFx0XHRpZiAoY29pbmNpZGVuVG9kYXMpIHtcblx0XHRcdFx0ZmVlZGJhY2sgPSBmb3JtYXRlYU51bWVyb3MocmVzcHVlc3RhLmZlZWRiYWNrLCAnJm5ic3A7Jylcblx0XHRcdFx0ZXJyb3JGcmVjdWVudGUgPSByZXNwdWVzdGEuZXJyRnJlY1xuXHRcdFx0XHRpZiAoZXJyb3JGcmVjdWVudGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRjb2xvcmVhSW5wdXRzVGV4dG9Qb3JDb2luY2lkZW5jaWEocmVzcHVlc3RhKSAvL2NvbG9yZWFyIGlucHV0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9J2Fuc3dlciddXCIpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICghZmVlZGJhY2spIHtcblx0XHRcdGZlZWRiYWNrID0gZm9ybWF0ZWFOdW1lcm9zKGZlZWRiYWNrRGVmZWN0bywgJyZuYnNwOycpXG5cdFx0XHRlcnJvckZyZWN1ZW50ZSA9IGVyckZyZWNEZWZlY3RvXG5cdFx0XHR2YXIgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9J2Fuc3dlciddXCIpO1xuXHRcdFx0Zm9yICh2YXIgaW5wdXQgb2YgaW5wdXRzKSB7XG5cdFx0XHQgICAgY29sb3JlYUlucHV0VGV4dG9Qb3JEZWZlY3RvKGlucHV0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHsgZmVlZGJhY2ssIGVycm9yRnJlY3VlbnRlIH1cblx0fSBlbHNlIHtcbiAgICAgICAgY29uc3QgeyByZXNwdWVzdGFzLCBlcnJGcmVjRGVmZWN0bywgZmVlZGJhY2tEZWZlY3RvIH0gPSB2YWxpZGFjaW9uZXNcbiAgICAgICAgZm9yKGxldCByZXNwIG9mIHJlc3B1ZXN0YXMpIHtcbiAgICAgICAgICAgIGxldCBldmFsdWFjaW9uID0gcmVzcC5vcGNpb24ucmVwbGFjZSgvaW5wdXRcXGQvZywgY29pbmNpZGVuY2lhID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvaW5jaWRlbmNpYSkudmFsdWUucmVwbGFjZSgnLCcsICcuJykucmVwbGFjZSgvXFxzLywgJycpKVxuICAgICAgICAgICAgaWYoZXZhbChldmFsdWFjaW9uKSkge1xuICAgICAgICAgICAgICAgIGZlZWRiYWNrID0gcmVzcC5mZWVkYmFja1xuXHRcdFx0XHRlcnJvckZyZWN1ZW50ZSA9IHJlc3AuZXJyb3JGcmVjdWVudGVcblx0XHRcdFx0YnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZighZmVlZGJhY2spIHtcbiAgICAgICAgICAgIGZlZWRiYWNrID0gZm9ybWF0ZWFOdW1lcm9zKGZlZWRiYWNrRGVmZWN0bywgJyZuYnNwOycpXG4gICAgICAgICAgICBlcnJvckZyZWN1ZW50ZSA9IGVyckZyZWNEZWZlY3RvXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT0nYW5zd2VyJ11cIikuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1pbmNvcnJlY3RvJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT0nYW5zd2VyJ11cIikuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZlZWRiYWNrLCBlcnJvckZyZWN1ZW50ZSB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb2xvcmVhSW5wdXRUZXh0b1BvckRlZmVjdG8oaW5wdXRFbGVtZW50KSB7XG4gICAgbGV0IHRpcG9JbnB1dCA9IGlucHV0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwb2lucHV0JylcbiAgICBsZXQgY29ycmVjdGFzID0gQnVmZmVyLmZyb20oaW5wdXRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1jb250ZW50JyksICdiYXNlNjQnKS50b1N0cmluZygndXRmLTgnKVxuICAgIGNvcnJlY3RhcyA9IFJlZW1wbGF6YVZhcmlhYmxlcyhjb3JyZWN0YXMsIHZlcnNpb24udmFycywgZmFsc2UpXG4gICAgbGV0IG1hdGNoID0gZmFsc2UsIHJlc3A7XG4gICAgc3dpdGNoICh0aXBvSW5wdXQpIHtcbiAgICAgICAgY2FzZSAnbnVtZXJvJzpcbiAgICAgICAgICAgIHJlc3AgPSBpbnB1dEVsZW1lbnQudmFsdWUucmVwbGFjZSgvXFxzL2csICcnKVxuICAgICAgICAgICAgY29ycmVjdGFzLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwID09PSBjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpO1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2RlY2ltYWwnOlxuICAgICAgICAgICAgcmVzcCA9IGlucHV0RWxlbWVudC52YWx1ZS5yZXBsYWNlKC9cXHMvZywgJycpLnJlcGxhY2UoJywnLCAnLicpXG4gICAgICAgICAgICBjb3JyZWN0YXMuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uKGNvcnJlY3RhKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3AgPT09IGNvcnJlY3RhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJyk7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAndGV4dG8tbnVtZXJpY28nOlxuICAgICAgICAgICAgcmVzcCA9IGlucHV0RWxlbWVudC52YWx1ZVxuICAgICAgICAgICAgY29ycmVjdGFzLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgIGxldCBudW1iZXJBcnIgPSBjb3JyZWN0YS5sZW5ndGggPT09IDMgPyAoJzAnICsgY29ycmVjdGEpLnNwbGl0KCcnKSA6IGNvcnJlY3RhLnNwbGl0KCcnKVxuICAgICAgICAgICAgICAgIGlmIChWYWxpZGFOdW1lcm9Fc2NyaXRvKHJlc3AsIG51bWJlckFycikpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8tY29ycmVjdG8nKVxuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAndGV4dG8nOlxuICAgICAgICAgICAgcmVzcCA9IGlucHV0RWxlbWVudC52YWx1ZVxuICAgICAgICAgICAgY29ycmVjdGFzLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgIGlmKFN0cmluZyhyZXNwKS50cmltKCkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpIFxuICAgICAgICAgICAgICAgICAgICA9PT0gU3RyaW5nKGNvcnJlY3RhKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikpIFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8tY29ycmVjdG8nKVxuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnYWxmYW51bWVyaWNvJzpcbiAgICAgICAgICAgIHJlc3AgPSBpbnB1dEVsZW1lbnQudmFsdWVcbiAgICAgICAgICAgIGNvcnJlY3Rhcy5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24oY29ycmVjdGEpIHtcbiAgICAgICAgICAgICAgICBpZihTdHJpbmcocmVzcCkudHJpbSgpLnRvTG93ZXJDYXNlKCkubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKSBcbiAgICAgICAgICAgICAgICAgICAgPT09IFN0cmluZyhjb3JyZWN0YSkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpKSBcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJylcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8taW5jb3JyZWN0bycpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb2xvcmVhSW5wdXRzVGV4dG9Qb3JDb2luY2lkZW5jaWEoY29pbmNpZGVuY2lhKSB7IC8vIGNvbG9yZWEgaW5wdXRzIGRlIGFjdWVyZG8gYSBcbiAgICBsZXQgeyB2YWxpZGFjaW9uZXMgfSA9IGNvaW5jaWRlbmNpYVxuICAgIHZhbGlkYWNpb25lcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBsZXQgeyBjb2xvciwgaW5wdXRJZCB9ID0gdmFsXG4gICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpXG4gICAgICAgIGlmIChjb2xvciA9PT0gJ29rJykge1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpXG4gICAgICAgIH0gZWxzZSBpZiAoY29sb3IgPT09ICdiYWQnKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWluY29ycmVjdG8nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlLnJlcGxhY2UoL1xccy9nLCAnJykgPT0gY29sb3IuY29ycmVjdGEpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1pbmNvcnJlY3RvJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG59IiwiaW1wb3J0IHJlZW1wbGF6YVZhcmlhYmxlcyBmcm9tICcuL3V0aWxzL1JlZW1wbGF6YVZhcmlhYmxlcydcbmltcG9ydCByZWVtcGxhemFGdW5jaW9uZXMgZnJvbSAnLi91dGlscy9SZWVtcGxhemFGdW5jaW9uZXMnXG5pbXBvcnQgZGF0b3NQcm9ncmVzbyBmcm9tICcuL3V0aWxzL0RhdG9zUHJvZ3Jlc28nXG5pbXBvcnQgYWdyZWdhSW1hZ2VuZXMgZnJvbSAnLi9mdW5jaW9uZXMvQWdyZWdhSW1hZ2VuZXMnXG5pbXBvcnQgaW5pY2lhTGlzdGVuZXJzIGZyb20gJy4vZnVuY2lvbmVzL0luaWNpYUxpc3RlbmVycydcbmltcG9ydCBoYW5kbGVSZXNwdWVzdGEgZnJvbSAnLi9mdW5jaW9uZXMvSGFuZGxlUmVzcHVlc3RhJ1xuaW1wb3J0IGJhcnJhUHJvZ3Jlc28gZnJvbSAnLi9mdW5jaW9uZXMvQmFycmFQcm9ncmVzbydcbmltcG9ydCB7IHByZXNzQ29uc3VsdGEgfSBmcm9tICcuL2Z1bmNpb25lcy9Db25leGlvblBsYXRhZm9ybWEnXG5cbmNvbnN0IGluaXQgPSAoKSA9PiB7XG5cdC8vc2UgZW5jYXJnYSBkZWwgbnVtZXJvIGRlIGludGVudG8sIGVzY3VjaGFuZG8gYWwgaGlkZGVuIHF1ZSBwdWVkZSBzZXIgY2FtYmlhZG8gcG9yIGxhIHBsYXRhZm9ybWFcblx0d2luZG93Lm51bWVyb0ludGVudG8gPSBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGlkZGVuSW50ZW50bycpLnZhbHVlKSB8fCAxXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoaWRkZW5JbnRlbnRvJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZXZlbnQgPT4ge1xuXHRcdHdpbmRvdy5udW1lcm9JbnRlbnRvID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlKVxuXHR9KVxuXHQvL3NlIGVuY2FyZ2EgZGUgbW9zdHJhciBsYXMgZmljaGFzIGN1YW5kbyBzZSBwcmVzaW9uYSBlbCBib3RvbiBkZSBjb25zdWx0YVxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnRuQ29uc3VsdGEnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHByZXNzQ29uc3VsdGEpXG5cdC8vZGlidWphIGxhIGJhcnJhIGRlIHBvcmdyZXNvIGRlbCBlamVyY2ljaW9cblx0Y29uc3QgeyB0bXBQcm9ncmVzbywgdG1wVG90YWwgfSA9IGRhdG9zUHJvZ3Jlc28oKVxuXHRiYXJyYVByb2dyZXNvKHRtcFByb2dyZXNvLCB0bXBUb3RhbClcblx0Ly9sZWUgdmFyaWFibGVzIGRhdGFzZXQgZGVsIGJvZHlcblx0Y29uc3QgaWRFamVyY2ljaW8gPSBkb2N1bWVudC5ib2R5LmRhdGFzZXQuaWRcblx0Y29uc3QgdmVyc2lvbiA9IEpTT04ucGFyc2UoQnVmZmVyKGRvY3VtZW50LmJvZHkuZGF0YXNldC52ZXJzaW9uLCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0ZjgnKSlcblx0Y29uc3QgdmFsaWRhY2lvbmVzID0gSlNPTi5wYXJzZShyZWVtcGxhemFGdW5jaW9uZXMocmVlbXBsYXphVmFyaWFibGVzKEJ1ZmZlcihkb2N1bWVudC5ib2R5LmRhdGFzZXQueCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGY4JyksIHZlcnNpb24udmFycywgZmFsc2UpKSlcblx0Y29uc3QgdGlwb0VqZXJjaWNpbyA9IGRvY3VtZW50LmJvZHkuZGF0YXNldC50aXBvZWplcmNpY2lvXG5cdC8vYWdyZWdhIGltYWdlbmVzIGRlIGZlZWRiYWNrIHkgZ2xvc2Fcblx0YWdyZWdhSW1hZ2VuZXMoaWRFamVyY2ljaW8pXG5cdC8vY3JlYSBsb3MgZXZlbnRvcyBwYXJhIGhhYmlsaXRhciBlbCBib3RvbiBkZSByZXNwdWVzdGEgeSBjb250cm9sYXIgYWxndW5hcyBpbnRlcmFjY2lvbmVzIG5vIGRlYmlkYXNcblx0aW5pY2lhTGlzdGVuZXJzKHRpcG9FamVyY2ljaW8pXG5cdC8vYWdyZWdhIGV2ZW50byBhIGJvdG9uIHJlc3BvbmRlclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuUmVzcG9uZGVyJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiBoYW5kbGVSZXNwdWVzdGEoZXZlbnQsIHtcblx0XHRpZEVqZXJjaWNpbyxcblx0XHR2YWxpZGFjaW9uZXMsXG5cdFx0dGlwb0VqZXJjaWNpbyxcblx0XHR0bXBQcm9ncmVzb1xuXHR9KSlcbn1cblxuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7ICAvLyBMb2FkaW5nIGhhc24ndCBmaW5pc2hlZCB5ZXRcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXQpXG59IGVsc2UgeyAgLy8gYERPTUNvbnRlbnRMb2FkZWRgIGhhcyBhbHJlYWR5IGZpcmVkXG5cdGluaXQoKVxufSIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgICBsZXQgaGlkZGVuQmFycmFEYXRvcyA9IHdpbmRvdy5wYXJlbnQucGFyZW50LmJhcnJhUHJvZ3Jlc29cbiAgICBpZihoaWRkZW5CYXJyYURhdG9zKSB7XG4gICAgICAgIGxldCBkYXRvc0JhcnJhRGVQcm9ncmVzbyA9IEpTT04ucGFyc2UoaGlkZGVuQmFycmFEYXRvcy52YWx1ZSlcbiAgICAgICAgbGV0IHRtcFByb2dyZXNvID0gZGF0b3NCYXJyYURlUHJvZ3Jlc28udG1wUHJvZ3Jlc28gPyBcbiAgICAgICAgICAgIGRhdG9zQmFycmFEZVByb2dyZXNvLnRtcFByb2dyZXNvIDogW11cbiAgICAgICAgbGV0IHRtcFRvdGFsID0gZGF0b3NCYXJyYURlUHJvZ3Jlc28udG1wVG90YWwgP1xuICAgICAgICAgICAgTnVtYmVyKGRhdG9zQmFycmFEZVByb2dyZXNvLnRtcFRvdGFsKSA6IDBcbiAgICAgICAgcmV0dXJuIHsgdG1wUHJvZ3Jlc28sIHRtcFRvdGFsIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdG1wUHJvZ3Jlc28gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG1wUHJvZ3Jlc28nKSA/IFxuICAgICAgICAgICAgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG1wUHJvZ3Jlc28nKSkgOiBbXVxuICAgICAgICBsZXQgdG1wVG90YWwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG1wVG90YWwnKSA/XG4gICAgICAgICAgICBOdW1iZXIobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RtcFRvdGFsJykpIDogMFxuICAgICAgICByZXR1cm4geyB0bXBQcm9ncmVzbywgdG1wVG90YWwgfVxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCAodGV4dG8sIGVzcGFjaW8pID0+IHtcbiAgICByZXR1cm4gdGV4dG8ucmVwbGFjZSgvXFxkezEsfShcXC5cXGR7MSx9KT8vZywgZnVuY3Rpb24gKGNvaW5jaWRlbmNpYSkgeyAvL2NvaW5jaWRlbmNpYSA9PiAyMDAwXG4gICAgICAgIGxldCBlbnRlcm8gPSBjb2luY2lkZW5jaWEuc3BsaXQoJy4nKVswXVxuICAgICAgICBsZXQgZGVjaW1hbCA9IGNvaW5jaWRlbmNpYS5zcGxpdCgnLicpWzFdXG4gICAgICAgIGxldCBlbnRlcm9Fc3BhY2lhZG8gPSBlbnRlcm8ubGVuZ3RoID49IDQgPyAnJyA6IGVudGVyb1xuICAgICAgICBpZiAoZW50ZXJvLmxlbmd0aCA+PSA0KSB7XG4gICAgICAgICAgICBsZXQgZW50ZXJvUmV2ZXJzZSA9IGVudGVyby5zcGxpdCgnJykucmV2ZXJzZSgpXG4gICAgICAgICAgICBsZXQgY291bnQgPSAxXG4gICAgICAgICAgICBlbnRlcm9SZXZlcnNlLmZvckVhY2goZnVuY3Rpb24gKG51bWVybywgaW5kZXgpIHtcblx0XHRcdFx0aWYgKGNvdW50ID09PSAzICYmIChpbmRleCsxKSA8IGVudGVyb1JldmVyc2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudGVyb0VzcGFjaWFkbyA9IGVzcGFjaW8gKyBudW1lcm8gKyBlbnRlcm9Fc3BhY2lhZG9cbiAgICAgICAgICAgICAgICAgICAgY291bnQgPSAxXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXJvRXNwYWNpYWRvID0gbnVtZXJvICsgZW50ZXJvRXNwYWNpYWRvXG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7ZW50ZXJvRXNwYWNpYWRvfSR7ZGVjaW1hbCA/ICcsJyA6ICcnfSR7ZGVjaW1hbCA/IGRlY2ltYWwgOiAnJ31gXG4gICAgfSlcbn0iLCJleHBvcnQgZGVmYXVsdCB0ZXh0ID0+IHtcbiAgICB2YXIgcmVzdWx0ID0gdGV4dC5yZXBsYWNlKC9cXC9cXFsuKj9cXC9cXF0vZywgZnVuY3Rpb24gKGNvaW5jaWRlbmNpYSkgeyAvL2NvaW5jaWRlbmNpYSA9PiAnL1tmdW5jaW9uKCkvXSdcbiAgICAgICAgdmFyIGZpbmFsID0gY29pbmNpZGVuY2lhLmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBmdW5jaW9uID0gY29pbmNpZGVuY2lhLnN1YnN0cigyLCBmaW5hbCkucmVwbGFjZSgvJmd0Oy9nLCAnPicpLnJlcGxhY2UoLyZsdDsvLCAnPCcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGV2YWwoZnVuY2lvbilcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgY29uc29sZS5sb2coZnVuY2lvbilcbiAgICAgICAgICAgIHJldHVybiBjb2luY2lkZW5jaWE7XG4gICAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZyYWMoZW50ZXJvLCBudW1lcmFkb3IsIGRlbm9taW5hZG9yKSB7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cXFxcXCJlcVxcXFxcIj4ke2VudGVybyA/IGA8c3BhbiBjbGFzcz1cXFxcXCJpbnRlZ2VyXFxcXFwiPiR7ZW50ZXJvfTwvc3Bhbj5gIDogJyd9PHNwYW4gY2xhc3M9XFxcXFwiZnJhY3Rpb25cXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwiZnVwXFxcXFwiPiZuYnNwOyR7bnVtZXJhZG9yfSZuYnNwOzwvc3Bhbj48c3BhbiBjbGFzcz1cXFxcXCJiYXJcXFxcXCI+Lzwvc3Bhbj48c3BhbiBjbGFzcz1cXFxcXCJmZG5cXFxcXCI+Jm5ic3A7JHtkZW5vbWluYWRvcn0mbmJzcDs8L3NwYW4+PC9zcGFuPjwvc3Bhbj5gXG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUoYSkge1xuICAgIHJldHVybiBhLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSlcbn0iLCJleHBvcnQgZGVmYXVsdCAodGV4dG8sIHZhcmlhYmxlcywgaXNUdXRvcmlhbCkgPT4ge1xuICAgIHZhciByZXN1bHQgPSB0ZXh0by50b1N0cmluZygpLnJlcGxhY2UoL1xcJFthLXpdL2csIGZ1bmN0aW9uIChjb2luY2lkZW5jaWEpIHsgLy9jb2luY2lkZW5jaWEgPT4gJyRhJ1xuICAgICAgICBmb3IgKHZhciBpbmRleFZhciA9IDA7IGluZGV4VmFyIDwgdmFyaWFibGVzLmxlbmd0aDsgaW5kZXhWYXIrKykge1xuICAgICAgICAgICAgaWYgKHZhcmlhYmxlc1tpbmRleFZhcl0udmFyID09IGNvaW5jaWRlbmNpYVsxXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1R1dG9yaWFsID8gdmFyaWFibGVzW2luZGV4VmFyXS52dCA6IHZhcmlhYmxlc1tpbmRleFZhcl0udmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn0iXSwic291cmNlUm9vdCI6IiJ9