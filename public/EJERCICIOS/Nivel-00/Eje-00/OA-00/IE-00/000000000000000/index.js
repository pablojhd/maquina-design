!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=14)}([function(t,e,r){"use strict";(function(t){r.d(e,"i",function(){return h}),r.d(e,"f",function(){return p}),r.d(e,"a",function(){return d}),r.d(e,"b",function(){return g}),r.d(e,"d",function(){return n}),r.d(e,"e",function(){return o}),r.d(e,"c",function(){return i}),r.d(e,"g",function(){return a}),r.d(e,"h",function(){return u});var n,o,i,a,u,s=r(5),c=r(6),f=document.body.dataset.id,l=JSON.parse(document.body.dataset.version.replace(/'/g,'"')),h=JSON.parse(Object(c.a)(Object(s.a)(t(document.body.dataset.x,"base64").toString("utf8"),l.vars,!1))),p=document.body.dataset.tipoejercicio,d=parseInt(document.getElementById("hiddenIntento").value)||1,g=function(){d++};switch(document.getElementById("hiddenIntento").addEventListener("change",function(t){d=parseInt(t.target.value)}),f.substr(2,2)){case"00":case"01":n=["../../../../imagenes_front/patos/Correct_feedback_PATO_nino.svg","../../../../imagenes_front/patos/Correct_feedback_PATO_nina.svg"],o=["../../../../imagenes_front/patos/Mistake_feedback_PATO_nino.svg","../../../../imagenes_front/patos/Mistake_feedback_PATO_nina.svg"],i=["../../../../imagenes_front/patos/Pato_nina_glosa.svg","../../../../imagenes_front/patos/Pato_nino_glosa.svg"];break;case"02":n=["../../../../imagenes_front/pumas/Correct_feedback_PUMA_nino.svg","../../../../imagenes_front/pumas/Correct_feedback_PUMA_nina.svg"],o=["../../../../imagenes_front/pumas/Mistake_feedback_PUMA_nino.svg","../../../../imagenes_front/pumas/Mistake_feedback_PUMA_nina.svg"],i=["../../../../imagenes_front/pumas/Puma_nina_glosa.svg","../../../../imagenes_front/pumas/Puma_nino_glosa.svg"]}var _=window.parent.parent.barraProgreso;if(_){var y=JSON.parse(_.value);a=y.tmpProgreso?y.tmpProgreso:[],u=y.tmpTotal?Number(y.tmpTotal):0}else a=localStorage.getItem("tmpProgreso")?JSON.parse(localStorage.getItem("tmpProgreso")):[],u=localStorage.getItem("tmpTotal")?Number(localStorage.getItem("tmpTotal")):0}).call(this,r(4).Buffer)},function(t,e,r){"use strict";e.a=function(t,e){return t.replace(/\d{1,}(\.\d{1,})?/g,function(t){var r=t.split(".")[0],n=t.split(".")[1],o=r.length>=4?"":r;if(r.length>=4){var i=r.split("").reverse(),a=1;i.forEach(function(t){3===a?(o=e+t+o,a=1):(o=t+o,a++)})}return"".concat(o).concat(n?",":"").concat(n||"")})}},function(t,e,r){"use strict";var n={0:["","","","",""],1:["uno","on","die[sz]","[csz]ien"],2:["do[sz]","do","[vb]einte","do[csz]{1,2}iento[sz]"],3:["tre[sz]","tre","treinta","tre[szc]{1,2}iento[sz]"],4:["[ckq]uatro","[ckq]ator","[ckq]uarenta","[ckq]uatro[szc]{1,2}iento[sz]"],5:["[csz]in[ck]o","(quin|kin)","[csz]in[cqk]uenta","(quin|kin)iento[sz]"],6:["[scz]ei[sz]","","[scz]e[scz]enta","[scz]ei[scz]{1,2}iento[sz]"],7:["[scz]iete","","[scz]etenta","[scz]ete[szc]{1,2}iento[sz]"],8:["o[sc]ho","","o[sc]henta","o[sc]ho[scz]{1,2}iento[sz]"],9:["nue[vb]e","","no[vb]enta","no[vb]e[scz]{1,2}iento[sz]"]};e.a=function(t,e){var r=e[0],o=e[1],i=e[2],a=e[3],u=t.toLowerCase().trim(),s="";return a>0?0==i?s=n[a][0]:1==i?a>0&&a<6?s=n[a][1]+"[scz]e":a>=6&&(s="die[csz]i"+n[a][0]):2==i?s="[vb]einti"+n[a][0]:i>2&&(s=n[i][2]+" y "+n[a][0]):0==a&&i>0&&(s=n[i][2]),o>0&&(1==o?(0==i&&0==a&&(s=n[o][3]+" "+s),0==i&&0==a||(s="[szc]iento "+s)):o>1&&(s=n[o][3]+" "+s)),1==r?s="mil "+s:r>1&&(s=n[r][0]+" mil "+s),s=(s=s.trim()).replace(/^/,"^"),s+="$",new RegExp(s).test(u)}},function(t,e,r){"use strict";r.d(e,"a",function(){return o});var n=r(0),o=function(){document.getElementById("btnContinuar").onclick=function(){return!1},document.querySelector(".feedback").style.display="none",document.querySelector(".feedback span").innerHTML="",document.querySelector(".feedback p").innerHTML="",document.querySelector(".feedback img").setAttribute("src",""),document.querySelector(".feedback").classList.remove("feedback-incorrecto"),document.querySelector("footer").style.display="grid","seleccion multiple"===n.f?(document.querySelector("input[type=radio]:checked").checked=!1,document.getElementsByName("answer").forEach(function(t){t.disabled=!1})):document.querySelectorAll("input[type=text].inputTexto-incorrecto").forEach(function(t){t.disabled=!1,t.classList.remove("inputTexto-incorrecto"),t.value=""})}},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(10),o=r(11),i=r(12);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=s.prototype:(null===t&&(t=new s(e)),t.length=e),t}function s(t,e,r){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);s.TYPED_ARRAY_SUPPORT?(t=e).__proto__=s.prototype:t=h(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!s.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),o=(t=u(t,n)).write(e,r);o!==n&&(t=t.slice(0,o));return t}(t,e,r):function(t,e){if(s.isBuffer(e)){var r=0|p(e.length);return 0===(t=u(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?u(t,0):h(t,e);if("Buffer"===e.type&&i(e.data))return h(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(f(e),t=u(t,e<0?0:0|p(e)),!s.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function h(t,e){var r=e.length<0?0:0|p(e.length);t=u(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function d(t,e){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(t).length;default:if(n)return q(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return S(this,e,r);case"utf8":case"utf-8":return T(this,e,r);case"ascii":return k(this,e,r);case"latin1":case"binary":return M(this,e,r);case"base64":return R(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function _(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=s.from(e,n)),s.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,o);if("number"==typeof e)return e&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function b(t,e,r,n,o){var i,a=1,u=t.length,s=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;a=2,u/=2,s/=2,r/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var f=-1;for(i=r;i<u;i++)if(c(t,i)===c(e,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===s)return f*a}else-1!==f&&(i-=i-f),f=-1}else for(r+s>u&&(r=u-s),i=r;i>=0;i--){for(var l=!0,h=0;h<s;h++)if(c(t,i+h)!==c(e,h)){l=!1;break}if(l)return i}return-1}function v(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var a=0;a<n;++a){var u=parseInt(e.substr(2*a,2),16);if(isNaN(u))return a;t[r+a]=u}return a}function m(t,e,r,n){return j(q(e,t.length-r),t,r,n)}function E(t,e,r,n){return j(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function w(t,e,r,n){return E(t,e,r,n)}function A(t,e,r,n){return j(F(e),t,r,n)}function P(t,e,r,n){return j(function(t,e){for(var r,n,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)r=t.charCodeAt(a),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function R(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function T(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,a,u,s,c=t[o],f=null,l=c>239?4:c>223?3:c>191?2:1;if(o+l<=r)switch(l){case 1:c<128&&(f=c);break;case 2:128==(192&(i=t[o+1]))&&(s=(31&c)<<6|63&i)>127&&(f=s);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(s=(15&c)<<12|(63&i)<<6|63&a)>2047&&(s<55296||s>57343)&&(f=s);break;case 4:i=t[o+1],a=t[o+2],u=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&u)&&(s=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&u)>65535&&s<1114112&&(f=s)}null===f?(f=65533,l=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=l}return function(t){var e=t.length;if(e<=B)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=B));return r}(n)}e.Buffer=s,e.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},e.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,e,r){return c(null,t,e,r)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,e,r){return function(t,e,r,n){return f(e),e<=0?u(t,e):void 0!==r?"string"==typeof n?u(t,e).fill(r,n):u(t,e).fill(r):u(t,e)}(null,t,e,r)},s.allocUnsafe=function(t){return l(null,t)},s.allocUnsafeSlow=function(t){return l(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,e){if(!s.isBuffer(t)||!s.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=s.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var a=t[r];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,o),o+=a.length}return n},s.byteLength=d,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)_(this,e,e+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)_(this,e,e+3),_(this,e+1,e+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)_(this,e,e+7),_(this,e+1,e+6),_(this,e+2,e+5),_(this,e+3,e+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?T(this,0,t):g.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,e,r,n,o){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),a=(r>>>=0)-(e>>>=0),u=Math.min(i,a),c=this.slice(n,o),f=t.slice(e,r),l=0;l<u;++l)if(c[l]!==f[l]){i=c[l],a=f[l];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},s.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},s.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},s.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return v(this,t,e,r);case"utf8":case"utf-8":return m(this,t,e,r);case"ascii":return E(this,t,e,r);case"latin1":case"binary":return w(this,t,e,r);case"base64":return A(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var B=4096;function k(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function M(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function S(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=N(t[i]);return o}function O(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function C(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,r,n,o,i){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function U(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function L(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255}function x(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(t,e,r,n,i){return i||x(t,0,r,4),o.write(t,e,r,n,23,4),r+4}function z(t,e,r,n,i){return i||x(t,0,r,8),o.write(t,e,r,n,52,8),r+8}s.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),s.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=s.prototype;else{var o=e-t;r=new s(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t]}return r},s.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},s.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},s.prototype.readUInt8=function(t,e){return e||C(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,e){return e||C(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,e){return e||C(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,e){return e||C(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,e){return e||C(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},s.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},s.prototype.readInt8=function(t,e){return e||C(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,e){e||C(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt16BE=function(t,e){e||C(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt32LE=function(t,e){return e||C(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,e){return e||C(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,e){return e||C(t,4,this.length),o.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,e){return e||C(t,4,this.length),o.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,e){return e||C(t,8,this.length),o.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,e){return e||C(t,8,this.length),o.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||I(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},s.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||I(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},s.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},s.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},s.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},s.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},s.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},s.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);I(this,t,e,r,o-1,-o)}var i=0,a=1,u=0;for(this[e]=255&t;++i<r&&(a*=256);)t<0&&0===u&&0!==this[e+i-1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+r},s.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);I(this,t,e,r,o-1,-o)}var i=r-1,a=1,u=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===u&&0!==this[e+i+1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+r},s.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},s.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},s.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},s.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},s.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},s.prototype.writeFloatLE=function(t,e,r){return D(this,t,e,!0,r)},s.prototype.writeFloatBE=function(t,e,r){return D(this,t,e,!1,r)},s.prototype.writeDoubleLE=function(t,e,r){return z(this,t,e,!0,r)},s.prototype.writeDoubleBE=function(t,e,r){return z(this,t,e,!1,r)},s.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},s.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!s.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var a=s.isBuffer(t)?t:q(new s(t,n).toString()),u=a.length;for(i=0;i<r-e;++i)this[i+e]=a[i%u]}return this};var Y=/[^+\/0-9A-Za-z-_]/g;function N(t){return t<16?"0"+t.toString(16):t.toString(16)}function q(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],a=0;a<n;++a){if((r=t.charCodeAt(a))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function F(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(Y,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function j(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}}).call(this,r(9))},function(t,e,r){"use strict";e.a=function(t,e,r){return t.toString().replace(/\$[a-z]/g,function(t){for(var n=0;n<e.length;n++)if(e[n].var==t[1])return r?e[n].vt:e[n].val})}},function(module,__webpack_exports__,__webpack_require__){"use strict";function capitalize(t){return t.charAt(0).toUpperCase()+t.slice(1)}__webpack_exports__.a=function(text){var result=text.replace(/\/\[.*?\/\]/g,function(coincidencia){var _final=coincidencia.length-4,funcion=coincidencia.substr(2,_final).replace(/&gt;/g,">").replace(/&lt;/,"<");try{return eval(funcion)}catch(t){return coincidencia}});return result}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return handleRespuesta});var _Variables__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(3),handleRespuesta=function handleRespuesta(){document.querySelector("footer").style.display="none",document.getElementById("btnResponder").disabled=!0,document.getElementsByName("answer").forEach(function(t){t.disabled=!0});var _validaRespuesta=Object(_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__.a)(_Variables__WEBPACK_IMPORTED_MODULE_0__.i,_Variables__WEBPACK_IMPORTED_MODULE_0__.f),feedback=_validaRespuesta.feedback,errorFrecuente=_validaRespuesta.errorFrecuente,feedbackElement=document.querySelector(".feedback"),feedbackStrong=document.querySelector(".feedback span"),feedbackText=document.querySelector(".feedback p"),imgFeedback=document.querySelector(".feedback img");if(errorFrecuente)1===_Variables__WEBPACK_IMPORTED_MODULE_0__.a?(imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.e[imgRandomIndex(!1)]),feedbackElement.style.display="block",feedbackElement.classList.add("feedback-incorrecto"),feedbackStrong.innerHTML="¡Ten Cuidado!",feedbackText.innerHTML=feedback,document.getElementById("btnContinuar").addEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),Object(_Variables__WEBPACK_IMPORTED_MODULE_0__.b)(),window.MathJax&&MathJax.Hub.Queue(["Typeset",MathJax.Hub])):(document.getElementById("imagenGlosa").setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.c[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.c.length)]),document.getElementById("glosa").style.display="block");else{feedbackElement.style.display="block",feedbackElement.classList.add("feedback-correcto"),feedbackStrong.innerHTML="¡Muy Bien!";var racha=rachaCorrectas();racha&&(feedbackText.innerHTML="Tienes una racha de <b>".concat(rachaCorrectas(),"</b> respuestas correctas.")),imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.d[imgRandomIndex(!0)]),2===_Variables__WEBPACK_IMPORTED_MODULE_0__.a&&document.getElementById("btnContinuar").removeEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),document.getElementById("btnContinuar").setAttribute("onClick","cerrarFeed();")}eval("enviar(".concat(null==errorFrecuente,", ").concat(null==errorFrecuente?errorFrecuente:'"'+errorFrecuente+'"',")"))},imgRandomIndex=function(t){return t?Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.d.length):Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.e.length)},rachaCorrectas=function(){for(var t=0,e=_Variables__WEBPACK_IMPORTED_MODULE_0__.g.length-1;e>-1&&_Variables__WEBPACK_IMPORTED_MODULE_0__.g[e].correcto;e--)t++;return t+1>1?t+1:null}},function(t,e,r){"use strict";(function(t){r.d(e,"a",function(){return i});var n=r(1),o=r(2),i=function(t,e){var r,i;if("seleccion multiple"===e){var s=document.querySelector("input[type=radio]:checked").value,c=!0,f=!1,l=void 0;try{for(var h,p=t[Symbol.iterator]();!(c=(h=p.next()).done);c=!0){var d=h.value;if(s==d.opcion){r=d.feedback,i=d.errorFrecuente;break}}}catch(t){f=!0,l=t}finally{try{c||null==p.return||p.return()}finally{if(f)throw l}}return{feedback:r,errorFrecuente:i}}var g=t.respuestas,_=t.errFrecDefecto,y=t.feedbackDefecto,b=!0,v=!1,m=void 0;try{for(var E,w=g[Symbol.iterator]();!(b=(E=w.next()).done);b=!0){var A=E.value,P=!0;if(A.validaciones.forEach(function(t,e){var r=document.getElementById(t.inputId);switch(r.getAttribute("data-tipoinput")){case"numero":r.value.replace(/\s/g,"")!==t.valor&&"-any-"!==t.valor&&(P=!1);break;case"decimal":r.value.replace(/\s/g,"").replace(",",".")!==t.valor&&"-any-"!==t.valor&&(P=!1);break;case"texto-numerico":var n=3===t.valor.length?("0"+t.valor).split(""):t.valor.split("");Object(o.a)(r.value.trim(),n)||"-any-"===t.valor||(P=!1);break;case"texto":case"alfanumerico":String(r.value).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")!==String(t.valor).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&"-any-"!==t.valor&&(P=!1)}}),P){r=Object(n.a)(A.feedback,"&nbsp;"),null!==(i=A.errFrec)?u(A):document.querySelectorAll("input[name='answer']").forEach(function(t){t.classList.add("inputTexto-correcto")});break}}}catch(t){v=!0,m=t}finally{try{b||null==w.return||w.return()}finally{if(v)throw m}}if(!r){r=Object(n.a)(y,"&nbsp;"),i=_;var R=document.querySelectorAll("input[name='answer']"),T=!0,B=!1,k=void 0;try{for(var M,S=R[Symbol.iterator]();!(T=(M=S.next()).done);T=!0){a(M.value)}}catch(t){B=!0,k=t}finally{try{T||null==S.return||S.return()}finally{if(B)throw k}}}return{feedback:r,errorFrecuente:i}};function a(e){var r,n=e.getAttribute("data-tipoinput"),i=t.from(e.getAttribute("data-content"),"base64").toString("utf-8"),a=!1;switch(n){case"numero":r=e.value.replace(/\s/g,""),i.split(",").forEach(function(t){r===t&&(e.classList.add("inputTexto-correcto"),a=!0)});break;case"decimal":r=e.value.replace(/\s/g,"").replace(",","."),i.split(",").forEach(function(t){r===t&&(e.classList.add("inputTexto-correcto"),a=!0)});break;case"texto-numerico":r=e.value,i.split(",").forEach(function(t){var n=3===t.length?("0"+t).split(""):t.split("");Object(o.a)(r,n)&&(e.classList.add("inputTexto-correcto"),a=!0)});break;case"texto":case"alfanumerico":r=e.value,i.split(",").forEach(function(t){String(r).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")===String(t).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&(e.classList.add("inputTexto-correcto"),a=!0)})}a||e.classList.add("inputTexto-incorrecto")}function u(t){t.validaciones.forEach(function(t){var e=t.color,r=t.inputId,n=document.getElementById(r);"ok"===e?n.classList.add("inputTexto-correcto"):"bad"===e?n.classList.add("inputTexto-incorrecto"):n.value.replace(/\s/g,"")==e.correcta?n.classList.add("inputTexto-correcto"):n.classList.add("inputTexto-incorrecto")})}}).call(this,r(4).Buffer)},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),a=n[0],u=n[1],s=new i(function(t,e,r){return 3*(e+r)/4-r}(0,a,u)),f=0,l=u>0?a-4:a;for(r=0;r<l;r+=4)e=o[t.charCodeAt(r)]<<18|o[t.charCodeAt(r+1)]<<12|o[t.charCodeAt(r+2)]<<6|o[t.charCodeAt(r+3)],s[f++]=e>>16&255,s[f++]=e>>8&255,s[f++]=255&e;2===u&&(e=o[t.charCodeAt(r)]<<2|o[t.charCodeAt(r+1)]>>4,s[f++]=255&e);1===u&&(e=o[t.charCodeAt(r)]<<10|o[t.charCodeAt(r+1)]<<4|o[t.charCodeAt(r+2)]>>2,s[f++]=e>>8&255,s[f++]=255&e);return s},e.fromByteArray=function(t){for(var e,r=t.length,o=r%3,i=[],a=0,u=r-o;a<u;a+=16383)i.push(f(t,a,a+16383>u?u:a+16383));1===o?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===o&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,s=a.length;u<s;++u)n[u]=a[u],o[a.charCodeAt(u)]=u;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,r){for(var o,i,a=[],u=e;u<r;u+=3)o=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),a.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,o){var i,a,u=8*o-n-1,s=(1<<u)-1,c=s>>1,f=-7,l=r?o-1:0,h=r?-1:1,p=t[e+l];for(l+=h,i=p&(1<<-f)-1,p>>=-f,f+=u;f>0;i=256*i+t[e+l],l+=h,f-=8);for(a=i&(1<<-f)-1,i>>=-f,f+=n;f>0;a=256*a+t[e+l],l+=h,f-=8);if(0===i)i=1-c;else{if(i===s)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,n),i-=c}return(p?-1:1)*a*Math.pow(2,i-n)},e.write=function(t,e,r,n,o,i){var a,u,s,c=8*i-o-1,f=(1<<c)-1,l=f>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,a=f):(a=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-a))<1&&(a--,s*=2),(e+=a+l>=1?h/s:h*Math.pow(2,1-l))*s>=2&&(a++,s/=2),a+l>=f?(u=0,a=f):a+l>=1?(u=(e*s-1)*Math.pow(2,o),a+=l):(u=e*Math.pow(2,l-1)*Math.pow(2,o),a=0));o>=8;t[r+p]=255&u,p+=d,u/=256,o-=8);for(a=a<<o|u,c+=o;c>0;t[r+p]=255&a,p+=d,a/=256,c-=8);t[r+p-d]|=128*g}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){},function(t,e,r){"use strict";r.r(e);var n=r(0),o=function(t,e){var r=document.createElementNS("http://www.w3.org/2000/svg",t);for(var n in e)r.setAttributeNS(null,n.replace(/[A-Z]/g,function(t,e,r,n){return"-"+t.toLowerCase()}),e[n]);return r},i=r(7);!function(){var t=document.getElementById("progressbar"),e=250/(n.h+1),r=o("rect",{x:2,y:2,width:250,height:32,fill:"none",stroke:"#CCCBCB",strokeWidth:"1",rx:5,ry:5});t.appendChild(r);var i=Number(250-2*e),a=o("rect",{x:e,y:17,width:i,height:2,fill:"#E7E5E5",rx:2,ry:2});t.appendChild(a);for(var u=0;u<n.h;u++){var s=void 0,c=void 0;n.g.length>u?(c=4,s=n.g[u].correcto?1===n.g[u].NUMEROINTENTOS?"#00AC4D":"#E2C04D":"#E24B4A"):n.g.length===u?(c=8,s="#1280B1"):(c=4,s="#CCCBCB");var f=e*(u+1)+2,l=o("circle",{cx:f,cy:18,r:c,fill:s,stroke:"none"});if(t.appendChild(l),n.g.length===u){var h=o("text",{x:f,y:22,fontFamily:"sans-serif",fontSize:"11px",textAnchor:"middle",fill:"white"});h.textContent=n.g.length+1,t.appendChild(h)}}}(),document.getElementById("btnResponder").addEventListener("click",i.a);r(13)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy9mdW5jaW9uZXMvVmFyaWFibGVzLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvdXRpbHMvRm9ybWF0ZWFOdW1lcm9zLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvdXRpbHMvVmFsaWRhTnVtZXJvRXNjcml0by5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2Z1bmNpb25lcy9Db250aW51YXJFamVyY2ljaW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL3V0aWxzL1JlZW1wbGF6YVZhcmlhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL3V0aWxzL1JlZW1wbGF6YUZ1bmNpb25lcy5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2Z1bmNpb25lcy9IYW5kbGVSZXNwdWVzdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc2NyaXB0cy9mdW5jaW9uZXMvVmFsaWRhUmVzcHVlc3RhLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2Z1bmNpb25lcy9CYXJyYVByb2dyZXNvLmpzIiwid2VicGFjazovLy8uL3NjcmlwdHMvc2NyaXB0cy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhIiwic3JjSW1nUmVzcHVlc3RhSW5jb3JyZWN0YSIsInNyY0ltZ0dsb3NhIiwidG1wUHJvZ3Jlc28iLCJ0bXBUb3RhbCIsImlkRWplcmNpY2lvIiwiZG9jdW1lbnQiLCJib2R5IiwiZGF0YXNldCIsImlkIiwidmVyc2lvbiIsIkpTT04iLCJwYXJzZSIsInJlcGxhY2UiLCJ2YWxpZGFjaW9uZXMiLCJSZWVtcGxhemFGdW5jaW9uZXMiLCJSZWVtcGxhemFWYXJpYWJsZXMiLCJCdWZmZXIiLCJ4IiwidG9TdHJpbmciLCJ2YXJzIiwidGlwbyIsInRpcG9lamVyY2ljaW8iLCJudW1lcm9JbnRlbnRvIiwicGFyc2VJbnQiLCJnZXRFbGVtZW50QnlJZCIsInNpZ3VpZW50ZUludGVudG8iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJzdWJzdHIiLCJoaWRkZW5CYXJyYURhdG9zIiwid2luZG93IiwicGFyZW50IiwiYmFycmFQcm9ncmVzbyIsImRhdG9zQmFycmFEZVByb2dyZXNvIiwiTnVtYmVyIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInRleHRvIiwiZXNwYWNpbyIsImNvaW5jaWRlbmNpYSIsImVudGVybyIsInNwbGl0IiwiZGVjaW1hbCIsImVudGVyb0VzcGFjaWFkbyIsImxlbmd0aCIsImVudGVyb1JldmVyc2UiLCJyZXZlcnNlIiwiY291bnQiLCJmb3JFYWNoIiwibnVtZXJvIiwicmVndWxhckV4cHJlc3Npb24iLCJfd29yZCIsIm51bWJlckFyciIsInVtaWwiLCJjZW50ZW5hIiwiZGVjZW5hIiwidW5pZGFkIiwid29yZCIsInRvTG93ZXJDYXNlIiwidHJpbSIsInJneCIsIlJlZ0V4cCIsInRlc3QiLCJjb250aW51YXJFamVyY2ljaW8iLCJvbmNsaWNrIiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwiZGlzcGxheSIsImlubmVySFRNTCIsInNldEF0dHJpYnV0ZSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImNoZWNrZWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImlucHV0IiwiZGlzYWJsZWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYmFzZTY0IiwiaWVlZTc1NCIsImlzQXJyYXkiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIl9fcHJvdG9fXyIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJ0aGlzIiwiRXJyb3IiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJUeXBlRXJyb3IiLCJBcnJheUJ1ZmZlciIsImFycmF5IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJ1bmRlZmluZWQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJvYmoiLCJpc0J1ZmZlciIsImxlbiIsImNvcHkiLCJidWZmZXIiLCJ2YWwiLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwic2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwic3RhcnQiLCJlbmQiLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImIiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImlzTmFOIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsImJ1ZiIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIm9mZnNldCIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwicHVzaCIsImNoYXJDb2RlQXQiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZ2xvYmFsIiwiZm9vIiwic3ViYXJyYXkiLCJlIiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImNvbmZpZ3VyYWJsZSIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsInkiLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiYXJndW1lbnRzIiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1heCIsIm1hdGNoIiwiam9pbiIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiQXJyYXkiLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0Iiwic2V0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJ2YXJpYWJsZXMiLCJpc1R1dG9yaWFsIiwiaW5kZXhWYXIiLCJ2dCIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInRleHQiLCJyZXN1bHQiLCJmaW5hbCIsImZ1bmNpb24iLCJldmFsIiwiZXJyb3IiLCJoYW5kbGVSZXNwdWVzdGEiLCJ2YWxpZGFSZXNwdWVzdGEiLCJmZWVkYmFjayIsImVycm9yRnJlY3VlbnRlIiwiZmVlZGJhY2tFbGVtZW50IiwiZmVlZGJhY2tTdHJvbmciLCJmZWVkYmFja1RleHQiLCJpbWdGZWVkYmFjayIsImltZ1JhbmRvbUluZGV4IiwiYWRkIiwiTWF0aEpheCIsIkh1YiIsIlF1ZXVlIiwicmFuZG9tIiwicmFjaGEiLCJyYWNoYUNvcnJlY3RhcyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlc0NvcnJlY3RhIiwiY29ycmVjdG9zIiwiY29ycmVjdG8iLCJyZXNwdWVzdGEiLCJ2YWxpZGFjaW9uIiwib3BjaW9uIiwicmVzcHVlc3RhcyIsImVyckZyZWNEZWZlY3RvIiwiZmVlZGJhY2tEZWZlY3RvIiwiY29pbmNpZGVuVG9kYXMiLCJpbmRleCIsImlucHV0SWQiLCJnZXRBdHRyaWJ1dGUiLCJ2YWxvciIsIlZhbGlkYU51bWVyb0VzY3JpdG8iLCJub3JtYWxpemUiLCJGb3JtYXRlYU51bWVyb3MiLCJlcnJGcmVjIiwiY29sb3JlYUlucHV0c1RleHRvUG9yQ29pbmNpZGVuY2lhIiwiaW5wdXRzIiwiY29sb3JlYUlucHV0VGV4dG9Qb3JEZWZlY3RvIiwiaW5wdXRFbGVtZW50IiwicmVzcCIsInRpcG9JbnB1dCIsImNvcnJlY3RhcyIsImNvcnJlY3RhIiwiY29sb3IiLCJnIiwiRnVuY3Rpb24iLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJudW0iLCJvdXRwdXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsInJ0IiwiYWJzIiwibG9nIiwiTE4yIiwiY3JlYXJFbGVtZW50byIsIm5vbWJyZSIsImF0cmlidXRvcyIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsInN2ZyIsInNlcGFyYWNpb24iLCJib3JkZUJhcnJhIiwid2lkdGgiLCJoZWlnaHQiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInJ4IiwicnkiLCJhcHBlbmRDaGlsZCIsImFuY2hvTGluZWEiLCJsaW5lYUJhcnJhIiwiY29sb3JDaXJjdWxvIiwickNpcmNsZSIsIk5VTUVST0lOVEVOVE9TIiwiY3hDaXJjbGUiLCJjaXJjbGUiLCJjeCIsImN5IiwidGV4dFBvc2ljaW9uIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwidGV4dEFuY2hvciIsInRleHRDb250ZW50IiwiYmFycmFEZVByb2dyZXNvIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixF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dUIsVUFBWSxVQUVsRCxXQUVOalosSUFBWTJDLFNBQVc5RSxHQUNqQ21iLEVBQVUsRUFDVkQsRUFBZSxZQUVmQyxFQUFVLEVBQ1ZELEVBQWUsV0FFaEIsSUFBSUcsRUFBV2QsR0FBY3ZhLEVBQUksR0FBSyxFQUNsQ3NiLEVBQVN0QixFQUFjLFNBQVUsQ0FDcEN1QixHQUFJRixFQUNKRyxHQUFJLEdBQ0oxYSxFQUFHcWEsRUFDSDFNLEtBQU15TSxFQUNOUCxPQUFRLFNBR1QsR0FEQUwsRUFBSVMsWUFBWU8sR0FDWm5aLElBQVkyQyxTQUFXOUUsRUFBRyxDQUM3QixJQUFJeWIsRUFBZXpCLEVBQWMsT0FBUSxDQUN4QzlXLEVBQUdtWSxFQUNIdk0sRUFBRyxHQUNINE0sV0FBWSxhQUNaQyxTQUFVLE9BQ1ZDLFdBQVksU0FDWm5OLEtBQU0sVUFFUGdOLEVBQWFJLFlBQWMxWixJQUFZMkMsT0FBUyxFQUNoRHdWLEVBQUlTLFlBQVlVLEtDL0RuQkssR0FFQXhaLFNBQVNtQixlQUFlLGdCQUFnQkUsaUJBQWlCLFFBQVN5UixLIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0KTtcbiIsImltcG9ydCBSZWVtcGxhemFWYXJpYWJsZXMgZnJvbSAnLi4vdXRpbHMvUmVlbXBsYXphVmFyaWFibGVzJ1xuaW1wb3J0IFJlZW1wbGF6YUZ1bmNpb25lcyBmcm9tICcuLi91dGlscy9SZWVtcGxhemFGdW5jaW9uZXMnXG5cbmV4cG9ydCBjb25zdCBpZEVqZXJjaWNpbyA9IGRvY3VtZW50LmJvZHkuZGF0YXNldC5pZFxuXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IEpTT04ucGFyc2UoXG5cdGRvY3VtZW50LmJvZHkuZGF0YXNldC52ZXJzaW9uLnJlcGxhY2UoLycvZywgJ1wiJylcbilcblxuZXhwb3J0IGNvbnN0IHZhbGlkYWNpb25lcyA9IEpTT04ucGFyc2UoXG5cdFJlZW1wbGF6YUZ1bmNpb25lcyhSZWVtcGxhemFWYXJpYWJsZXMoQnVmZmVyKGRvY3VtZW50LmJvZHkuZGF0YXNldC54LCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0ZjgnKSwgdmVyc2lvbi52YXJzLCBmYWxzZSkpXG4pXG5cbmV4cG9ydCBjb25zdCB0aXBvID0gZG9jdW1lbnQuYm9keS5kYXRhc2V0LnRpcG9lamVyY2ljaW9cblxuZXhwb3J0IGxldCBudW1lcm9JbnRlbnRvID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hpZGRlbkludGVudG8nKS52YWx1ZSkgfHwgMVxuXG5leHBvcnQgY29uc3Qgc2lndWllbnRlSW50ZW50byA9ICgpID0+IHtcbiAgbnVtZXJvSW50ZW50bysrXG59XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaWRkZW5JbnRlbnRvJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXZlbnQpe1xuXHRudW1lcm9JbnRlbnRvID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlKVxuXHQvKmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaWRkZW5JbnRlbnRvJykuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKSovXG59KVxuXG5leHBvcnQgbGV0IHNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhLCBzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhLCBzcmNJbWdHbG9zYVxuXG5zd2l0Y2goaWRFamVyY2ljaW8uc3Vic3RyKDIsMikpIHtcblx0Y2FzZSAnMDAnOlxuXHRcdHNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L3BhdG9zL0NvcnJlY3RfZmVlZGJhY2tfUEFUT19uaW5vLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvcGF0b3MvQ29ycmVjdF9mZWVkYmFja19QQVRPX25pbmEuc3ZnJ1xuXHRcdF1cblx0XHRzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L3BhdG9zL01pc3Rha2VfZmVlZGJhY2tfUEFUT19uaW5vLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvcGF0b3MvTWlzdGFrZV9mZWVkYmFja19QQVRPX25pbmEuc3ZnJ1xuXHRcdF1cblx0XHRzcmNJbWdHbG9zYSA9IFtcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9wYXRvcy9QYXRvX25pbmFfZ2xvc2Euc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9wYXRvcy9QYXRvX25pbm9fZ2xvc2Euc3ZnJ1xuXHRcdF1cblx0XHRicmVha1xuXHRjYXNlICcwMSc6XG5cdFx0c3JjSW1nUmVzcHVlc3RhQ29ycmVjdGEgPSBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvcGF0b3MvQ29ycmVjdF9mZWVkYmFja19QQVRPX25pbm8uc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9wYXRvcy9Db3JyZWN0X2ZlZWRiYWNrX1BBVE9fbmluYS5zdmcnXG5cdFx0XVxuXHRcdHNyY0ltZ1Jlc3B1ZXN0YUluY29ycmVjdGEgPSBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvcGF0b3MvTWlzdGFrZV9mZWVkYmFja19QQVRPX25pbm8uc3ZnJyxcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9wYXRvcy9NaXN0YWtlX2ZlZWRiYWNrX1BBVE9fbmluYS5zdmcnXG5cdFx0XVxuXHRcdHNyY0ltZ0dsb3NhID0gW1xuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L3BhdG9zL1BhdG9fbmluYV9nbG9zYS5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L3BhdG9zL1BhdG9fbmlub19nbG9zYS5zdmcnXG5cdFx0XVxuXHRcdGJyZWFrXG5cdGNhc2UgJzAyJzpcblx0XHRzcmNJbWdSZXNwdWVzdGFDb3JyZWN0YSA9IFtcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9wdW1hcy9Db3JyZWN0X2ZlZWRiYWNrX1BVTUFfbmluby5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L3B1bWFzL0NvcnJlY3RfZmVlZGJhY2tfUFVNQV9uaW5hLnN2Zydcblx0XHRdXG5cdFx0c3JjSW1nUmVzcHVlc3RhSW5jb3JyZWN0YSA9IFtcblx0XHRcdCcuLi8uLi8uLi8uLi9pbWFnZW5lc19mcm9udC9wdW1hcy9NaXN0YWtlX2ZlZWRiYWNrX1BVTUFfbmluby5zdmcnLFxuXHRcdFx0Jy4uLy4uLy4uLy4uL2ltYWdlbmVzX2Zyb250L3B1bWFzL01pc3Rha2VfZmVlZGJhY2tfUFVNQV9uaW5hLnN2Zydcblx0XHRdXG5cdFx0c3JjSW1nR2xvc2EgPSBbXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvcHVtYXMvUHVtYV9uaW5hX2dsb3NhLnN2ZycsXG5cdFx0XHQnLi4vLi4vLi4vLi4vaW1hZ2VuZXNfZnJvbnQvcHVtYXMvUHVtYV9uaW5vX2dsb3NhLnN2Zydcblx0XHRdXG5cdFx0YnJlYWtcblx0Y2FzZSAnMDMnOlxuXHRcdGJyZWFrXG5cdGNhc2UgJzA0Jzpcblx0XHRicmVha1xuXHRjYXNlICcwNSc6XG5cdFx0YnJlYWtcbn1cblxuZXhwb3J0IGxldCB0bXBQcm9ncmVzbywgdG1wVG90YWxcbmxldCBoaWRkZW5CYXJyYURhdG9zID0gd2luZG93LnBhcmVudC5wYXJlbnQuYmFycmFQcm9ncmVzb1xuaWYoaGlkZGVuQmFycmFEYXRvcykge1xuXHRsZXQgZGF0b3NCYXJyYURlUHJvZ3Jlc28gPSBKU09OLnBhcnNlKGhpZGRlbkJhcnJhRGF0b3MudmFsdWUpXG5cdHRtcFByb2dyZXNvID0gZGF0b3NCYXJyYURlUHJvZ3Jlc28udG1wUHJvZ3Jlc28gPyBcblx0XHRkYXRvc0JhcnJhRGVQcm9ncmVzby50bXBQcm9ncmVzbyA6IFtdXG5cdHRtcFRvdGFsID0gZGF0b3NCYXJyYURlUHJvZ3Jlc28udG1wVG90YWwgP1xuXHRcdE51bWJlcihkYXRvc0JhcnJhRGVQcm9ncmVzby50bXBUb3RhbCkgOiAwXG59IGVsc2Uge1xuXHR0bXBQcm9ncmVzbyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0bXBQcm9ncmVzbycpID8gXG5cdFx0SlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG1wUHJvZ3Jlc28nKSkgOiBbXVxuXHR0bXBUb3RhbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0bXBUb3RhbCcpID9cblx0XHROdW1iZXIobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RtcFRvdGFsJykpIDogMFxufSIsImV4cG9ydCBkZWZhdWx0ICh0ZXh0bywgZXNwYWNpbykgPT4ge1xuICAgIHJldHVybiB0ZXh0by5yZXBsYWNlKC9cXGR7MSx9KFxcLlxcZHsxLH0pPy9nLCBmdW5jdGlvbiAoY29pbmNpZGVuY2lhKSB7IC8vY29pbmNpZGVuY2lhID0+IDIwMDBcbiAgICAgICAgbGV0IGVudGVybyA9IGNvaW5jaWRlbmNpYS5zcGxpdCgnLicpWzBdXG4gICAgICAgIGxldCBkZWNpbWFsID0gY29pbmNpZGVuY2lhLnNwbGl0KCcuJylbMV1cbiAgICAgICAgbGV0IGVudGVyb0VzcGFjaWFkbyA9IGVudGVyby5sZW5ndGggPj0gNCA/ICcnIDogZW50ZXJvXG4gICAgICAgIGlmIChlbnRlcm8ubGVuZ3RoID49IDQpIHtcbiAgICAgICAgICAgIGxldCBlbnRlcm9SZXZlcnNlID0gZW50ZXJvLnNwbGl0KCcnKS5yZXZlcnNlKClcbiAgICAgICAgICAgIGxldCBjb3VudCA9IDFcbiAgICAgICAgICAgIGVudGVyb1JldmVyc2UuZm9yRWFjaChmdW5jdGlvbiAobnVtZXJvKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudGVyb0VzcGFjaWFkbyA9IGVzcGFjaW8gKyBudW1lcm8gKyBlbnRlcm9Fc3BhY2lhZG9cbiAgICAgICAgICAgICAgICAgICAgY291bnQgPSAxXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXJvRXNwYWNpYWRvID0gbnVtZXJvICsgZW50ZXJvRXNwYWNpYWRvXG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7ZW50ZXJvRXNwYWNpYWRvfSR7ZGVjaW1hbCA/ICcsJyA6ICcnfSR7ZGVjaW1hbCA/IGRlY2ltYWwgOiAnJ31gXG4gICAgfSlcbn0iLCJsZXQgcGFsYWJyYXMgPSB7XG4gICAgXCIwXCI6IFtcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiXSwgLy91bmlkYWQsIHByZWZpam8gdW5pZGFkLCBkZWNlbmEsIGNlbnRlbmFcbiAgICBcIjFcIjogW1widW5vXCIsIFwib25cIiwgXCJkaWV6XCIsIFwiY2llblwiXSxcbiAgICBcIjJcIjogW1wiZG9zXCIsIFwiZG9cIiwgXCJ2ZWludGVcIiwgXCJkb3NjaWVudG9zXCJdLFxuICAgIFwiM1wiOiBbXCJ0cmVzXCIsIFwidHJlXCIsIFwidHJlaW50YVwiLCBcInRyZXNjaWVudG9zXCJdLFxuICAgIFwiNFwiOiBbXCJjdWF0cm9cIiwgXCJjYXRvclwiLCBcImN1YXJlbnRhXCIsIFwiY3VhdHJvY2llbnRvc1wiXSxcbiAgICBcIjVcIjogW1wiY2luY29cIiwgXCJxdWluXCIsIFwiY2luY3VlbnRhXCIsIFwicXVpbmllbnRvc1wiXSxcbiAgICBcIjZcIjogW1wic2Vpc1wiLCBcIlwiLCBcInNlc2VudGFcIiwgXCJzZWlzY2llbnRvc1wiXSxcbiAgICBcIjdcIjogW1wic2lldGVcIiwgXCJcIiwgXCJzZXRlbnRhXCIsIFwic2V0ZWNpZW50b3NcIl0sXG4gICAgXCI4XCI6IFtcIm9jaG9cIiwgXCJcIiwgXCJvY2hlbnRhXCIsIFwib2Nob2NpZW50b3NcIl0sXG4gICAgXCI5XCI6IFtcIm51ZXZlXCIsIFwiXCIsIFwibm92ZW50YVwiLCBcIm5vdmVjaWVudG9zXCJdXG59O1xubGV0IHJlZ3VsYXJFeHByZXNzaW9uID0ge1xuICAgIFwiMFwiOiBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgXCIxXCI6IFtcInVub1wiLCBcIm9uXCIsIFwiZGllW3N6XVwiLCBcIltjc3pdaWVuXCJdLFxuICAgIFwiMlwiOiBbXCJkb1tzel1cIiwgXCJkb1wiLCBcIlt2Yl1laW50ZVwiLCBcImRvW2Nzel17MSwyfWllbnRvW3N6XVwiXSxcbiAgICBcIjNcIjogW1widHJlW3N6XVwiLCBcInRyZVwiLCBcInRyZWludGFcIiwgXCJ0cmVbc3pjXXsxLDJ9aWVudG9bc3pdXCJdLFxuICAgIFwiNFwiOiBbXCJbY2txXXVhdHJvXCIsIFwiW2NrcV1hdG9yXCIsIFwiW2NrcV11YXJlbnRhXCIsIFwiW2NrcV11YXRyb1tzemNdezEsMn1pZW50b1tzel1cIl0sXG4gICAgXCI1XCI6IFtcIltjc3pdaW5bY2tdb1wiLCBcIihxdWlufGtpbilcIiwgXCJbY3N6XWluW2Nxa111ZW50YVwiLCBcIihxdWlufGtpbilpZW50b1tzel1cIl0sXG4gICAgXCI2XCI6IFtcIltzY3pdZWlbc3pdXCIsIFwiXCIsIFwiW3Njel1lW3Njel1lbnRhXCIsIFwiW3Njel1laVtzY3pdezEsMn1pZW50b1tzel1cIl0sXG4gICAgXCI3XCI6IFtcIltzY3pdaWV0ZVwiLCBcIlwiLCBcIltzY3pdZXRlbnRhXCIsIFwiW3Njel1ldGVbc3pjXXsxLDJ9aWVudG9bc3pdXCJdLFxuICAgIFwiOFwiOiBbXCJvW3NjXWhvXCIsIFwiXCIsIFwib1tzY11oZW50YVwiLCBcIm9bc2NdaG9bc2N6XXsxLDJ9aWVudG9bc3pdXCJdLFxuICAgIFwiOVwiOiBbXCJudWVbdmJdZVwiLCBcIlwiLCBcIm5vW3ZiXWVudGFcIiwgXCJub1t2Yl1lW3Njel17MSwyfWllbnRvW3N6XVwiXVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKF93b3JkLCBudW1iZXJBcnIpID0+IHtcbiAgICBsZXQgdW1pbCA9IG51bWJlckFyclswXVxuICAgIGxldCBjZW50ZW5hID0gbnVtYmVyQXJyWzFdXG4gICAgbGV0IGRlY2VuYSA9IG51bWJlckFyclsyXVxuICAgIGxldCB1bmlkYWQgPSBudW1iZXJBcnJbM11cbiAgICBsZXQgd29yZCA9IF93b3JkLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIGxldCByZ3ggPSAnJ1xuICAgIGlmICh1bmlkYWQgPiAwKSB7XG4gICAgICAgIC8vdW5vLCBkb3MsIHRyZXMuLi5cbiAgICAgICAgaWYgKGRlY2VuYSA9PSAwKSB7XG4gICAgICAgICAgICByZ3ggPSByZWd1bGFyRXhwcmVzc2lvblt1bmlkYWRdWzBdO1xuICAgICAgICB9IGVsc2UgaWYgKGRlY2VuYSA9PSAxKSB7XG4gICAgICAgICAgICAvL29uY2UgZG9jZSwgdHJlY2UsIGNhdG9yY2UsIHF1aW5jZVxuICAgICAgICAgICAgaWYgKHVuaWRhZCA+IDAgJiYgdW5pZGFkIDwgNikge1xuICAgICAgICAgICAgICAgIHJneCA9IHJlZ3VsYXJFeHByZXNzaW9uW3VuaWRhZF1bMV0gKyBcIltzY3pdZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkaWVjaXNlaXMsIGRpZWNpc2lldGUsIGRpZWNpb2NobywgZGllY2ludWV2ZVxuICAgICAgICAgICAgZWxzZSBpZiAodW5pZGFkID49IDYpIHtcbiAgICAgICAgICAgICAgICByZ3ggPSBcImRpZVtjc3pdaVwiICsgcmVndWxhckV4cHJlc3Npb25bdW5pZGFkXVswXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vdmVpbml0dW5vLCB2ZWludGlkb3MsIHZlaW50aXRyZXMuLi4uXG4gICAgICAgIGVsc2UgaWYgKGRlY2VuYSA9PSAyKSB7XG4gICAgICAgICAgICByZ3ggPSBcIlt2Yl1laW50aVwiICsgcmVndWxhckV4cHJlc3Npb25bdW5pZGFkXVswXTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0cmVpbnRhIHkgdW5vLCBjdWFyZW50YSB5IGRvcywgY2luY3VlbnRhIHkgdHJlcy4uLlxuICAgICAgICBlbHNlIGlmIChkZWNlbmEgPiAyKSB7XG4gICAgICAgICAgICByZ3ggPSByZWd1bGFyRXhwcmVzc2lvbltkZWNlbmFdWzJdICsgXCIgeSBcIiArIHJlZ3VsYXJFeHByZXNzaW9uW3VuaWRhZF1bMF1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodW5pZGFkID09IDApIHtcbiAgICAgICAgLy92ZWludGUsIHRyZWludGEsIGN1YXJlbnRhLi4uXG4gICAgICAgIGlmIChkZWNlbmEgPiAwKSB7XG4gICAgICAgICAgICByZ3ggPSByZWd1bGFyRXhwcmVzc2lvbltkZWNlbmFdWzJdXG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9jaWVuLCBkb3NjaWVudG9zLCB0cmVzY2llbnRvcy4uLlxuICAgIGlmIChjZW50ZW5hID4gMCkge1xuICAgICAgICBpZiAoY2VudGVuYSA9PSAxKSB7XG4gICAgICAgICAgICBpZiAoZGVjZW5hID09IDAgJiYgdW5pZGFkID09IDApIHJneCA9IHJlZ3VsYXJFeHByZXNzaW9uW2NlbnRlbmFdWzNdICsgXCIgXCIgKyByZ3g7XG4gICAgICAgICAgICBpZiAoZGVjZW5hICE9IDAgfHwgdW5pZGFkICE9IDApIHJneCA9IFwiW3N6Y11pZW50byBcIiArIHJneFxuICAgICAgICB9IGVsc2UgaWYgKGNlbnRlbmEgPiAxKSB7XG4gICAgICAgICAgICByZ3ggPSByZWd1bGFyRXhwcmVzc2lvbltjZW50ZW5hXVszXSArIFwiIFwiICsgcmd4O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vbWlsLCBkb3MgbWlsLCB0cmVzIG1pbFxuICAgIGlmICh1bWlsID09IDEpIHJneCA9IFwibWlsIFwiICsgcmd4O1xuICAgIGVsc2UgaWYgKHVtaWwgPiAxKSByZ3ggPSByZWd1bGFyRXhwcmVzc2lvblt1bWlsXVswXSArIFwiIG1pbCBcIiArIHJneDtcblxuICAgIHJneCA9IHJneC50cmltKCk7XG4gICAgcmd4ID0gcmd4LnJlcGxhY2UoL14vLCAnXicpXG4gICAgcmd4ID0gcmd4ICsgJyQnXG4gICAgbGV0IG5ld1JneCA9IG5ldyBSZWdFeHAocmd4KTtcbiAgICByZXR1cm4gbmV3Umd4LnRlc3Qod29yZClcbn0iLCJpbXBvcnQgeyB0aXBvIH0gZnJvbSAnLi9WYXJpYWJsZXMnXG5cbmV4cG9ydCBjb25zdCBjb250aW51YXJFamVyY2ljaW8gPSAoKSA9PiB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG5Db250aW51YXInKS5vbmNsaWNrID0gKCkgPT4gZmFsc2VcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrJykuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmVlZGJhY2sgc3BhbicpLmlubmVySFRNTCA9ICcnXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjayBwJykuaW5uZXJIVE1MID0gJydcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrIGltZycpLnNldEF0dHJpYnV0ZSgnc3JjJywgJycpXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjaycpLmNsYXNzTGlzdC5yZW1vdmUoJ2ZlZWRiYWNrLWluY29ycmVjdG8nKVxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb290ZXInKS5zdHlsZS5kaXNwbGF5ID0gJ2dyaWQnXG4gIFxuICBpZiAodGlwbyA9PT0gJ3NlbGVjY2lvbiBtdWx0aXBsZScpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPXJhZGlvXTpjaGVja2VkJykuY2hlY2tlZCA9IGZhbHNlXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ2Fuc3dlcicpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgaW5wdXQuZGlzYWJsZWQgPSBmYWxzZVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT10ZXh0XS5pbnB1dFRleHRvLWluY29ycmVjdG8nKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlucHV0LmRpc2FibGVkID0gZmFsc2VcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ2lucHV0VGV4dG8taW5jb3JyZWN0bycpXG4gICAgICBpbnB1dC52YWx1ZSA9ICcnXG4gICAgfSlcbiAgfVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgKHRleHRvLCB2YXJpYWJsZXMsIGlzVHV0b3JpYWwpID0+IHtcbiAgICB2YXIgcmVzdWx0ID0gdGV4dG8udG9TdHJpbmcoKS5yZXBsYWNlKC9cXCRbYS16XS9nLCBmdW5jdGlvbiAoY29pbmNpZGVuY2lhKSB7IC8vY29pbmNpZGVuY2lhID0+ICckYSdcbiAgICAgICAgZm9yICh2YXIgaW5kZXhWYXIgPSAwOyBpbmRleFZhciA8IHZhcmlhYmxlcy5sZW5ndGg7IGluZGV4VmFyKyspIHtcbiAgICAgICAgICAgIGlmICh2YXJpYWJsZXNbaW5kZXhWYXJdLnZhciA9PSBjb2luY2lkZW5jaWFbMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNUdXRvcmlhbCA/IHZhcmlhYmxlc1tpbmRleFZhcl0udnQgOiB2YXJpYWJsZXNbaW5kZXhWYXJdLnZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgdGV4dCA9PiB7XG4gICAgdmFyIHJlc3VsdCA9IHRleHQucmVwbGFjZSgvXFwvXFxbLio/XFwvXFxdL2csIGZ1bmN0aW9uIChjb2luY2lkZW5jaWEpIHsgLy9jb2luY2lkZW5jaWEgPT4gJy9bZnVuY2lvbigpL10nXG4gICAgICAgIHZhciBmaW5hbCA9IGNvaW5jaWRlbmNpYS5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgZnVuY2lvbiA9IGNvaW5jaWRlbmNpYS5zdWJzdHIoMiwgZmluYWwpLnJlcGxhY2UoLyZndDsvZywgJz4nKS5yZXBsYWNlKC8mbHQ7LywgJzwnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBldmFsKGZ1bmNpb24pXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvKmNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgY29uc29sZS5sb2coZnVuY2lvbikqL1xuICAgICAgICAgICAgcmV0dXJuIGNvaW5jaWRlbmNpYTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShhKSB7XG4gICAgcmV0dXJuIGEuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKVxufSIsImltcG9ydCB7XG4gIG51bWVyb0ludGVudG8sXG4gIHNpZ3VpZW50ZUludGVudG8sXG4gIHZhbGlkYWNpb25lcyxcbiAgdGlwbyxcbiAgdG1wUHJvZ3Jlc28sXG4gIHNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhLFxuICBzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhLFxuICBzcmNJbWdHbG9zYVxufSBmcm9tIFwiLi9WYXJpYWJsZXNcIjtcbmltcG9ydCB7IHZhbGlkYVJlc3B1ZXN0YSB9IGZyb20gXCIuL1ZhbGlkYVJlc3B1ZXN0YVwiO1xuaW1wb3J0IHsgY29udGludWFyRWplcmNpY2lvIH0gZnJvbSBcIi4vQ29udGludWFyRWplcmNpY2lvXCI7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVSZXNwdWVzdGEgPSAoKSA9PiB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJmb290ZXJcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blJlc3BvbmRlclwiKS5kaXNhYmxlZCA9IHRydWU7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwiYW5zd2VyXCIpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgIGlucHV0LmRpc2FibGVkID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCB7IGZlZWRiYWNrLCBlcnJvckZyZWN1ZW50ZSB9ID0gdmFsaWRhUmVzcHVlc3RhKHZhbGlkYWNpb25lcywgdGlwbyk7XG4gIGxldCBmZWVkYmFja0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZlZWRiYWNrXCIpO1xuICBsZXQgZmVlZGJhY2tTdHJvbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZlZWRiYWNrIHNwYW5cIik7XG4gIGxldCBmZWVkYmFja1RleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZlZWRiYWNrIHBcIik7XG4gIGxldCBpbWdGZWVkYmFjayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmVlZGJhY2sgaW1nXCIpO1xuICBpZiAoIWVycm9yRnJlY3VlbnRlKSB7XG4gICAgLy9yZXNwdWVzdGEgY29ycmVjdGFcbiAgICBmZWVkYmFja0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBmZWVkYmFja0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImZlZWRiYWNrLWNvcnJlY3RvXCIpO1xuICAgIGZlZWRiYWNrU3Ryb25nLmlubmVySFRNTCA9IFwiwqFNdXkgQmllbiFcIjtcbiAgICBsZXQgcmFjaGEgPSByYWNoYUNvcnJlY3RhcygpO1xuICAgIGlmIChyYWNoYSkge1xuICAgICAgZmVlZGJhY2tUZXh0LmlubmVySFRNTCA9IGBUaWVuZXMgdW5hIHJhY2hhIGRlIDxiPiR7cmFjaGFDb3JyZWN0YXMoKX08L2I+IHJlc3B1ZXN0YXMgY29ycmVjdGFzLmA7XG4gICAgfVxuICAgIGltZ0ZlZWRiYWNrLnNldEF0dHJpYnV0ZShcbiAgICAgIFwic3JjXCIsXG4gICAgICBzcmNJbWdSZXNwdWVzdGFDb3JyZWN0YVtpbWdSYW5kb21JbmRleCh0cnVlKV1cbiAgICApO1xuICAgIG51bWVyb0ludGVudG8gPT09IDIgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5Db250aW51YXJcIikucmVtb3ZlRXZlbnRMaXN0ZW5lciAoXCJjbGlja1wiLCBjb250aW51YXJFamVyY2ljaW8pOy8vc2kgZXMgcXVlIGVzIGVsIHNlZ3VuZG8gaW50ZW50b1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuQ29udGludWFyXCIpLnNldEF0dHJpYnV0ZShcIm9uQ2xpY2tcIiwgXCJjZXJyYXJGZWVkKCk7XCIpO1xuICB9IGVsc2Uge1xuICAgIC8vcmVzcHVlc3RhIGluY29ycmVjdGFcbiAgICBpZiAobnVtZXJvSW50ZW50byA9PT0gMSkge1xuICAgICAgaW1nRmVlZGJhY2suc2V0QXR0cmlidXRlKFxuICAgICAgICBcInNyY1wiLFxuICAgICAgICBzcmNJbWdSZXNwdWVzdGFJbmNvcnJlY3RhW2ltZ1JhbmRvbUluZGV4KGZhbHNlKV1cbiAgICAgICk7XG4gICAgICBmZWVkYmFja0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGZlZWRiYWNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZmVlZGJhY2staW5jb3JyZWN0b1wiKTtcbiAgICAgIGZlZWRiYWNrU3Ryb25nLmlubmVySFRNTCA9IFwiwqFUZW4gQ3VpZGFkbyFcIjtcbiAgICAgIGZlZWRiYWNrVGV4dC5pbm5lckhUTUwgPSBmZWVkYmFjaztcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuQ29udGludWFyXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjb250aW51YXJFamVyY2ljaW8pO1xuICAgICAgc2lndWllbnRlSW50ZW50bygpO1xuICAgICAgd2luZG93Lk1hdGhKYXggJiYgTWF0aEpheC5IdWIuUXVldWUoW1wiVHlwZXNldFwiLCBNYXRoSmF4Lkh1Yl0pIC8vbXVlc3RyYSBlbCBtYXRoamF4IGVuIGxvcyBmZWVkYmFja3MgZW4gY2FzbyBkZSBxdWUgZXhpc3RhblxuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudFxuICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJpbWFnZW5HbG9zYVwiKVxuICAgICAgICAuc2V0QXR0cmlidXRlKFxuICAgICAgICAgIFwic3JjXCIsXG4gICAgICAgICAgc3JjSW1nR2xvc2FbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc3JjSW1nR2xvc2EubGVuZ3RoKV1cbiAgICAgICAgKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2xvc2FcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB9XG4gIH1cbiAgZXZhbChgZW52aWFyKCR7ZXJyb3JGcmVjdWVudGUgPT0gbnVsbH0sICR7ZXJyb3JGcmVjdWVudGUgPT0gbnVsbCA/IGVycm9yRnJlY3VlbnRlIDogJ1wiJytlcnJvckZyZWN1ZW50ZSsgJ1wiJ30pYClcbn07XG5cbmNvbnN0IGltZ1JhbmRvbUluZGV4ID0gZXNDb3JyZWN0YSA9PiB7XG4gIGlmIChlc0NvcnJlY3RhKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNyY0ltZ1Jlc3B1ZXN0YUNvcnJlY3RhLmxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNyY0ltZ1Jlc3B1ZXN0YUluY29ycmVjdGEubGVuZ3RoKTtcbiAgfVxufTtcblxuY29uc3QgcmFjaGFDb3JyZWN0YXMgPSAoKSA9PiB7XG4gIHZhciBjb3JyZWN0b3MgPSAwO1xuICBmb3IgKHZhciBpID0gdG1wUHJvZ3Jlc28ubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbiAgICBpZiAodG1wUHJvZ3Jlc29baV0uY29ycmVjdG8pIHtcbiAgICAgIGNvcnJlY3RvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvcnJlY3RvcyArIDEgPiAxID8gY29ycmVjdG9zICsgMSA6IG51bGw7XG59O1xuIiwiaW1wb3J0IEZvcm1hdGVhTnVtZXJvcyBmcm9tICcuLi91dGlscy9Gb3JtYXRlYU51bWVyb3MnXG5pbXBvcnQgVmFsaWRhTnVtZXJvRXNjcml0byBmcm9tICcuLi91dGlscy9WYWxpZGFOdW1lcm9Fc2NyaXRvJ1xuXG5leHBvcnQgY29uc3QgdmFsaWRhUmVzcHVlc3RhID0gKHZhbGlkYWNpb25lcywgdGlwbykgPT4ge1xuXHRsZXQgZmVlZGJhY2ssIGVycm9yRnJlY3VlbnRlXG5cdGlmKHRpcG8gPT09ICdzZWxlY2Npb24gbXVsdGlwbGUnKSB7XG4gICAgICAgIGxldCByZXNwdWVzdGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPXJhZGlvXTpjaGVja2VkJykudmFsdWVcblx0XHRmb3IobGV0IHZhbGlkYWNpb24gb2YgdmFsaWRhY2lvbmVzKSB7XG5cdFx0XHRpZihyZXNwdWVzdGEgPT0gdmFsaWRhY2lvbi5vcGNpb24pIHtcblx0XHRcdFx0ZmVlZGJhY2sgPSB2YWxpZGFjaW9uLmZlZWRiYWNrXG5cdFx0XHRcdGVycm9yRnJlY3VlbnRlID0gdmFsaWRhY2lvbi5lcnJvckZyZWN1ZW50ZVxuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4geyBmZWVkYmFjaywgZXJyb3JGcmVjdWVudGUgfVxuXHR9IGVsc2Uge1xuXHRcdGNvbnN0IHsgcmVzcHVlc3RhcywgZXJyRnJlY0RlZmVjdG8sIGZlZWRiYWNrRGVmZWN0byB9ID0gdmFsaWRhY2lvbmVzXG5cdFx0Zm9yIChsZXQgcmVzcHVlc3RhIG9mIHJlc3B1ZXN0YXMpIHtcblx0XHRcdGxldCBjb2luY2lkZW5Ub2RhcyA9IHRydWVcblx0XHRcdHJlc3B1ZXN0YS52YWxpZGFjaW9uZXMuZm9yRWFjaChmdW5jdGlvbih2YWwsIGluZGV4KSB7XG5cdFx0XHRcdGxldCBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHZhbC5pbnB1dElkKTtcblx0XHRcdFx0bGV0IHRpcG9JbnB1dCA9IGlucHV0LmdldEF0dHJpYnV0ZSgnZGF0YS10aXBvaW5wdXQnKVxuXHRcdFx0XHRzd2l0Y2ggKHRpcG9JbnB1dCkge1xuXHRcdFx0XHRcdGNhc2UgJ251bWVybyc6XG5cdFx0XHRcdFx0XHRpZiAoaW5wdXQudmFsdWUucmVwbGFjZSgvXFxzL2csICcnKSAhPT0gdmFsLnZhbG9yICYmIHZhbC52YWxvciAhPT0gJy1hbnktJykge1xuXHRcdFx0XHRcdFx0XHRjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkZWNpbWFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZS5yZXBsYWNlKC9cXHMvZywgJycpLnJlcGxhY2UoJywnLCcuJykgIT09IHZhbC52YWxvciAmJiB2YWwudmFsb3IgIT09ICctYW55LScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZXh0by1udW1lcmljbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtYmVyQXJyID0gdmFsLnZhbG9yLmxlbmd0aCA9PT0gMyA/ICgnMCcgKyB2YWwudmFsb3IpLnNwbGl0KCcnKSA6IHZhbC52YWxvci5zcGxpdCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShWYWxpZGFOdW1lcm9Fc2NyaXRvKGlucHV0LnZhbHVlLnRyaW0oKSwgbnVtYmVyQXJyKSkgJiYgdmFsLnZhbG9yICE9PSAnLWFueS0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29pbmNpZGVuVG9kYXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGV4dG8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoU3RyaW5nKGlucHV0LnZhbHVlKS50cmltKCkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICE9PSBTdHJpbmcodmFsLnZhbG9yKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdmFsLnZhbG9yICE9PSAnLWFueS0nKSBcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhbGZhbnVtZXJpY28nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoU3RyaW5nKGlucHV0LnZhbHVlKS50cmltKCkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICE9PSBTdHJpbmcodmFsLnZhbG9yKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdmFsLnZhbG9yICE9PSAnLWFueS0nKSBcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2luY2lkZW5Ub2RhcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBcblx0XHRcdFx0fVxuICAgICAgICAgICAgfSlcblx0XHRcdGlmIChjb2luY2lkZW5Ub2Rhcykge1xuXHRcdFx0XHRmZWVkYmFjayA9IEZvcm1hdGVhTnVtZXJvcyhyZXNwdWVzdGEuZmVlZGJhY2ssICcmbmJzcDsnKVxuXHRcdFx0XHRlcnJvckZyZWN1ZW50ZSA9IHJlc3B1ZXN0YS5lcnJGcmVjXG5cdFx0XHRcdGlmIChlcnJvckZyZWN1ZW50ZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvbG9yZWFJbnB1dHNUZXh0b1BvckNvaW5jaWRlbmNpYShyZXNwdWVzdGEpIC8vY29sb3JlYXIgaW5wdXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT0nYW5zd2VyJ11cIikuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJylcbiAgICAgICAgICAgICAgICAgICAgfSlcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFmZWVkYmFjaykge1xuXHRcdFx0ZmVlZGJhY2sgPSBGb3JtYXRlYU51bWVyb3MoZmVlZGJhY2tEZWZlY3RvLCAnJm5ic3A7Jylcblx0XHRcdGVycm9yRnJlY3VlbnRlID0gZXJyRnJlY0RlZmVjdG9cblx0XHRcdHZhciBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT0nYW5zd2VyJ11cIik7XG5cdFx0XHRmb3IgKHZhciBpbnB1dCBvZiBpbnB1dHMpIHtcblx0XHRcdCAgICBjb2xvcmVhSW5wdXRUZXh0b1BvckRlZmVjdG8oaW5wdXQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4geyBmZWVkYmFjaywgZXJyb3JGcmVjdWVudGUgfVxuXHR9XG59XG5cbmZ1bmN0aW9uIGNvbG9yZWFJbnB1dFRleHRvUG9yRGVmZWN0byhpbnB1dEVsZW1lbnQpIHtcbiAgICBsZXQgdGlwb0lucHV0ID0gaW5wdXRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10aXBvaW5wdXQnKVxuICAgIGxldCBjb3JyZWN0YXMgPSBCdWZmZXIuZnJvbShpbnB1dEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnKSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGYtOCcpXG4gICAgbGV0IG1hdGNoID0gZmFsc2UsIHJlc3A7XG4gICAgc3dpdGNoICh0aXBvSW5wdXQpIHtcbiAgICAgICAgY2FzZSAnbnVtZXJvJzpcbiAgICAgICAgICAgIHJlc3AgPSBpbnB1dEVsZW1lbnQudmFsdWUucmVwbGFjZSgvXFxzL2csICcnKVxuICAgICAgICAgICAgY29ycmVjdGFzLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwID09PSBjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpO1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2RlY2ltYWwnOlxuICAgICAgICAgICAgcmVzcCA9IGlucHV0RWxlbWVudC52YWx1ZS5yZXBsYWNlKC9cXHMvZywgJycpLnJlcGxhY2UoJywnLCAnLicpXG4gICAgICAgICAgICBjb3JyZWN0YXMuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uKGNvcnJlY3RhKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3AgPT09IGNvcnJlY3RhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJyk7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAndGV4dG8tbnVtZXJpY28nOlxuICAgICAgICAgICAgcmVzcCA9IGlucHV0RWxlbWVudC52YWx1ZVxuICAgICAgICAgICAgY29ycmVjdGFzLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgIGxldCBudW1iZXJBcnIgPSBjb3JyZWN0YS5sZW5ndGggPT09IDMgPyAoJzAnICsgY29ycmVjdGEpLnNwbGl0KCcnKSA6IGNvcnJlY3RhLnNwbGl0KCcnKVxuICAgICAgICAgICAgICAgIGlmIChWYWxpZGFOdW1lcm9Fc2NyaXRvKHJlc3AsIG51bWJlckFycikpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8tY29ycmVjdG8nKVxuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAndGV4dG8nOlxuICAgICAgICAgICAgcmVzcCA9IGlucHV0RWxlbWVudC52YWx1ZVxuICAgICAgICAgICAgY29ycmVjdGFzLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihjb3JyZWN0YSkge1xuICAgICAgICAgICAgICAgIGlmKFN0cmluZyhyZXNwKS50cmltKCkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpIFxuICAgICAgICAgICAgICAgICAgICA9PT0gU3RyaW5nKGNvcnJlY3RhKS50b0xvd2VyQ2FzZSgpLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikpIFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8tY29ycmVjdG8nKVxuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnYWxmYW51bWVyaWNvJzpcbiAgICAgICAgICAgIHJlc3AgPSBpbnB1dEVsZW1lbnQudmFsdWVcbiAgICAgICAgICAgIGNvcnJlY3Rhcy5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24oY29ycmVjdGEpIHtcbiAgICAgICAgICAgICAgICBpZihTdHJpbmcocmVzcCkudHJpbSgpLnRvTG93ZXJDYXNlKCkubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKSBcbiAgICAgICAgICAgICAgICAgICAgPT09IFN0cmluZyhjb3JyZWN0YSkudG9Mb3dlckNhc2UoKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIpKSBcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJylcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lucHV0VGV4dG8taW5jb3JyZWN0bycpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb2xvcmVhSW5wdXRzVGV4dG9Qb3JDb2luY2lkZW5jaWEoY29pbmNpZGVuY2lhKSB7IC8vIGNvbG9yZWEgaW5wdXRzIGRlIGFjdWVyZG8gYSBcbiAgICBsZXQgeyB2YWxpZGFjaW9uZXMgfSA9IGNvaW5jaWRlbmNpYVxuICAgIHZhbGlkYWNpb25lcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBsZXQgeyBjb2xvciwgaW5wdXRJZCB9ID0gdmFsXG4gICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpXG4gICAgICAgIGlmIChjb2xvciA9PT0gJ29rJykge1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1jb3JyZWN0bycpXG4gICAgICAgIH0gZWxzZSBpZiAoY29sb3IgPT09ICdiYWQnKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWluY29ycmVjdG8nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlLnJlcGxhY2UoL1xccy9nLCAnJykgPT0gY29sb3IuY29ycmVjdGEpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdpbnB1dFRleHRvLWNvcnJlY3RvJylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXRUZXh0by1pbmNvcnJlY3RvJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG59IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiaW1wb3J0IHsgdG1wVG90YWwsIHRtcFByb2dyZXNvIH0gZnJvbSAnLi9WYXJpYWJsZXMnXG5cbmV4cG9ydCBjb25zdCBiYXJyYURlUHJvZ3Jlc28gPSAoKSA9PiB7XG5cdGxldCBhbmNob0JhcnJhID0gMjUwOy8vMjU0IHBhcmEgZWwgZXNwYWNpbyBkZWwgbWFyZ2VuXG5cdGxldCBzdmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NiYXInKVxuXHRsZXQgc2VwYXJhY2lvbiA9IGFuY2hvQmFycmEgLyAodG1wVG90YWwgKyAxKVxuXHRsZXQgYm9yZGVCYXJyYSA9IGNyZWFyRWxlbWVudG8oJ3JlY3QnLCB7XG5cdFx0eDogMixcblx0XHR5OiAyLFxuXHRcdHdpZHRoOiBhbmNob0JhcnJhLFxuXHRcdGhlaWdodDogMzIsXG5cdFx0ZmlsbDogJ25vbmUnLFxuXHRcdHN0cm9rZTogJyNDQ0NCQ0InLFxuXHRcdHN0cm9rZVdpZHRoOiAnMScsXG5cdFx0cng6IDUsXG5cdFx0cnk6IDVcblx0fSlcblx0c3ZnLmFwcGVuZENoaWxkKGJvcmRlQmFycmEpXG5cblx0bGV0IGFuY2hvTGluZWEgPSBOdW1iZXIoYW5jaG9CYXJyYSAtIChzZXBhcmFjaW9uICogMikpXG5cdGxldCBsaW5lYUJhcnJhID0gY3JlYXJFbGVtZW50bygncmVjdCcsIHtcblx0XHR4OiBzZXBhcmFjaW9uLFxuXHRcdHk6IDE3LFxuXHRcdHdpZHRoOiBhbmNob0xpbmVhLFxuXHRcdGhlaWdodDogMixcblx0XHRmaWxsOiAnI0U3RTVFNScsXG5cdFx0cng6IDIsXG5cdFx0cnk6IDJcblx0fSk7XG5cdHN2Zy5hcHBlbmRDaGlsZChsaW5lYUJhcnJhKVxuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgdG1wVG90YWw7IGkrKykge1xuXHRcdGxldCBjb2xvckNpcmN1bG8sIHJDaXJjbGU7XG5cdFx0aWYgKHRtcFByb2dyZXNvLmxlbmd0aCA+IGkpIHtcblx0XHRcdHJDaXJjbGUgPSA0O1xuXHRcdFx0aWYgKHRtcFByb2dyZXNvW2ldLmNvcnJlY3RvKSB7XG5cdFx0XHRcdGNvbG9yQ2lyY3VsbyA9IHRtcFByb2dyZXNvW2ldLk5VTUVST0lOVEVOVE9TID09PSAxID8gJyMwMEFDNEQnIDogJyNFMkMwNEQnXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb2xvckNpcmN1bG8gPSAnI0UyNEI0QSdcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHRtcFByb2dyZXNvLmxlbmd0aCA9PT0gaSkge1xuXHRcdFx0ckNpcmNsZSA9IDhcblx0XHRcdGNvbG9yQ2lyY3VsbyA9ICcjMTI4MEIxJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyQ2lyY2xlID0gNFxuXHRcdFx0Y29sb3JDaXJjdWxvID0gJyNDQ0NCQ0InXG5cdFx0fVxuXHRcdGxldCBjeENpcmNsZSA9IHNlcGFyYWNpb24gKiAoaSArIDEpICsgMjtcblx0XHRsZXQgY2lyY2xlID0gY3JlYXJFbGVtZW50bygnY2lyY2xlJywge1xuXHRcdFx0Y3g6IGN4Q2lyY2xlLFxuXHRcdFx0Y3k6IDE4LFxuXHRcdFx0cjogckNpcmNsZSxcblx0XHRcdGZpbGw6IGNvbG9yQ2lyY3Vsbyxcblx0XHRcdHN0cm9rZTogJ25vbmUnXG5cdFx0fSlcblx0XHRzdmcuYXBwZW5kQ2hpbGQoY2lyY2xlKTtcblx0XHRpZiAodG1wUHJvZ3Jlc28ubGVuZ3RoID09PSBpKSB7XG5cdFx0XHRsZXQgdGV4dFBvc2ljaW9uID0gY3JlYXJFbGVtZW50bygndGV4dCcsIHtcblx0XHRcdFx0eDogY3hDaXJjbGUsXG5cdFx0XHRcdHk6IDIyLFxuXHRcdFx0XHRmb250RmFtaWx5OiAnc2Fucy1zZXJpZicsXG5cdFx0XHRcdGZvbnRTaXplOiAnMTFweCcsXG5cdFx0XHRcdHRleHRBbmNob3I6ICdtaWRkbGUnLFxuXHRcdFx0XHRmaWxsOiAnd2hpdGUnXG5cdFx0XHR9KVxuXHRcdFx0dGV4dFBvc2ljaW9uLnRleHRDb250ZW50ID0gdG1wUHJvZ3Jlc28ubGVuZ3RoICsgMVxuXHRcdFx0c3ZnLmFwcGVuZENoaWxkKHRleHRQb3NpY2lvbilcblx0XHR9XG5cdH1cbn1cblxuY29uc3QgY3JlYXJFbGVtZW50byA9IChub21icmUsIGF0cmlidXRvcykgPT4ge1xuICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgbm9tYnJlKVxuICAgIGZvciAobGV0IHAgaW4gYXRyaWJ1dG9zKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgcC5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAobSwgcCwgbywgcykge1xuICAgICAgICAgICAgcmV0dXJuIFwiLVwiICsgbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KSwgYXRyaWJ1dG9zW3BdKVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudFxufSIsImltcG9ydCB7IGJhcnJhRGVQcm9ncmVzbyB9IGZyb20gJy4vZnVuY2lvbmVzL0JhcnJhUHJvZ3Jlc28nXG5pbXBvcnQgeyBoYW5kbGVSZXNwdWVzdGEgfSBmcm9tICcuL2Z1bmNpb25lcy9IYW5kbGVSZXNwdWVzdGEnXG5cbmJhcnJhRGVQcm9ncmVzbygpXG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG5SZXNwb25kZXInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZVJlc3B1ZXN0YSkiXSwic291cmNlUm9vdCI6IiJ9