!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=14)}([function(t,e,r){"use strict";(function(t){r.d(e,"i",function(){return h}),r.d(e,"f",function(){return p}),r.d(e,"a",function(){return d}),r.d(e,"b",function(){return g}),r.d(e,"d",function(){return n}),r.d(e,"e",function(){return o}),r.d(e,"c",function(){return i}),r.d(e,"g",function(){return a}),r.d(e,"h",function(){return u});var n,o,i,a,u,s=r(5),c=r(6),f=document.body.dataset.id,l=JSON.parse(document.body.dataset.version.replace(/'/g,'"')),h=JSON.parse(Object(c.a)(Object(s.a)(t(document.body.dataset.x,"base64").toString("utf8"),l.vars,!1))),p=document.body.dataset.tipoejercicio,d=parseInt(document.getElementById("hiddenIntento").value)||1,g=function(){d++};switch(document.getElementById("hiddenIntento").addEventListener("change",function(t){d=parseInt(t.target.value)}),f.substr(2,2)){case"00":case"01":n=["../../../../imagenes_front/patos/Correct_feedback_PATO_nino.svg","../../../../imagenes_front/patos/Correct_feedback_PATO_nina.svg"],o=["../../../../imagenes_front/patos/Mistake_feedback_PATO_nino.svg","../../../../imagenes_front/patos/Mistake_feedback_PATO_nina.svg"],i=["../../../../imagenes_front/patos/Pato_nina_glosa.svg","../../../../imagenes_front/patos/Pato_nino_glosa.svg"];break;case"02":n=["../../../../imagenes_front/pumas/Correct_feedback_PUMA_nino.svg","../../../../imagenes_front/pumas/Correct_feedback_PUMA_nina.svg"],o=["../../../../imagenes_front/pumas/Mistake_feedback_PUMA_nino.svg","../../../../imagenes_front/pumas/Mistake_feedback_PUMA_nina.svg"],i=["../../../../imagenes_front/pumas/Puma_nina_glosa.svg","../../../../imagenes_front/pumas/Puma_nino_glosa.svg"]}var _=window.parent.parent.barraProgreso;if(_){var y=JSON.parse(_.value);a=y.tmpProgreso?y.tmpProgreso:[],u=y.tmpTotal?Number(y.tmpTotal):0}else a=localStorage.getItem("tmpProgreso")?JSON.parse(localStorage.getItem("tmpProgreso")):[],u=localStorage.getItem("tmpTotal")?Number(localStorage.getItem("tmpTotal")):0}).call(this,r(4).Buffer)},function(t,e,r){"use strict";e.a=function(t,e){return t.replace(/\d{1,}(\.\d{1,})?/g,function(t){var r=t.split(".")[0],n=t.split(".")[1],o=r.length>=4?"":r;if(r.length>=4){var i=r.split("").reverse(),a=1;i.forEach(function(t){3===a?(o=e+t+o,a=1):(o=t+o,a++)})}return"".concat(o).concat(n?",":"").concat(n||"")})}},function(t,e,r){"use strict";var n={0:["","","","",""],1:["uno","on","die[sz]","[csz]ien"],2:["do[sz]","do","[vb]einte","do[csz]{1,2}iento[sz]"],3:["tre[sz]","tre","treinta","tre[szc]{1,2}iento[sz]"],4:["[ckq]uatro","[ckq]ator","[ckq]uarenta","[ckq]uatro[szc]{1,2}iento[sz]"],5:["[csz]in[ck]o","(quin|kin)","[csz]in[cqk]uenta","(quin|kin)iento[sz]"],6:["[scz]ei[sz]","","[scz]e[scz]enta","[scz]ei[scz]{1,2}iento[sz]"],7:["[scz]iete","","[scz]etenta","[scz]ete[szc]{1,2}iento[sz]"],8:["o[sc]ho","","o[sc]henta","o[sc]ho[scz]{1,2}iento[sz]"],9:["nue[vb]e","","no[vb]enta","no[vb]e[scz]{1,2}iento[sz]"]};e.a=function(t,e){var r=e[0],o=e[1],i=e[2],a=e[3],u=t.toLowerCase().trim(),s="";return a>0?0==i?s=n[a][0]:1==i?a>0&&a<6?s=n[a][1]+"[scz]e":a>=6&&(s="die[csz]i"+n[a][0]):2==i?s="[vb]einti"+n[a][0]:i>2&&(s=n[i][2]+" y "+n[a][0]):0==a&&i>0&&(s=n[i][2]),o>0&&(1==o?(0==i&&0==a&&(s=n[o][3]+" "+s),0==i&&0==a||(s="[szc]iento "+s)):o>1&&(s=n[o][3]+" "+s)),1==r?s="mil "+s:r>1&&(s=n[r][0]+" mil "+s),s=(s=s.trim()).replace(/^/,"^"),s+="$",new RegExp(s).test(u)}},function(t,e,r){"use strict";r.d(e,"a",function(){return o});var n=r(0),o=function(){document.getElementById("btnContinuar").onclick=function(){return!1},document.querySelector(".feedback").style.display="none",document.querySelector(".feedback span").innerHTML="",document.querySelector(".feedback p").innerHTML="",document.querySelector(".feedback img").setAttribute("src",""),document.querySelector(".feedback").classList.remove("feedback-incorrecto"),document.querySelector("footer").style.display="grid","seleccion multiple"===n.f?(document.querySelector("input[type=radio]:checked").checked=!1,document.getElementsByName("answer").forEach(function(t){t.disabled=!1})):document.querySelectorAll("input[type=text].inputTexto-incorrecto").forEach(function(t){t.disabled=!1,t.classList.remove("inputTexto-incorrecto"),t.value=""})}},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(10),o=r(11),i=r(12);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=s.prototype:(null===t&&(t=new s(e)),t.length=e),t}function s(t,e,r){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);s.TYPED_ARRAY_SUPPORT?(t=e).__proto__=s.prototype:t=h(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!s.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),o=(t=u(t,n)).write(e,r);o!==n&&(t=t.slice(0,o));return t}(t,e,r):function(t,e){if(s.isBuffer(e)){var r=0|p(e.length);return 0===(t=u(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?u(t,0):h(t,e);if("Buffer"===e.type&&i(e.data))return h(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(f(e),t=u(t,e<0?0:0|p(e)),!s.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function h(t,e){var r=e.length<0?0:0|p(e.length);t=u(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function d(t,e){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return F(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(n)return F(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return M(this,e,r);case"utf8":case"utf-8":return T(this,e,r);case"ascii":return k(this,e,r);case"latin1":case"binary":return S(this,e,r);case"base64":return R(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function _(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=s.from(e,n)),s.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,o);if("number"==typeof e)return e&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function b(t,e,r,n,o){var i,a=1,u=t.length,s=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;a=2,u/=2,s/=2,r/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var f=-1;for(i=r;i<u;i++)if(c(t,i)===c(e,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===s)return f*a}else-1!==f&&(i-=i-f),f=-1}else for(r+s>u&&(r=u-s),i=r;i>=0;i--){for(var l=!0,h=0;h<s;h++)if(c(t,i+h)!==c(e,h)){l=!1;break}if(l)return i}return-1}function v(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var a=0;a<n;++a){var u=parseInt(e.substr(2*a,2),16);if(isNaN(u))return a;t[r+a]=u}return a}function m(t,e,r,n){return j(F(e,t.length-r),t,r,n)}function E(t,e,r,n){return j(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function w(t,e,r,n){return E(t,e,r,n)}function A(t,e,r,n){return j(q(e),t,r,n)}function P(t,e,r,n){return j(function(t,e){for(var r,n,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)r=t.charCodeAt(a),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function R(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function T(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,a,u,s,c=t[o],f=null,l=c>239?4:c>223?3:c>191?2:1;if(o+l<=r)switch(l){case 1:c<128&&(f=c);break;case 2:128==(192&(i=t[o+1]))&&(s=(31&c)<<6|63&i)>127&&(f=s);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(s=(15&c)<<12|(63&i)<<6|63&a)>2047&&(s<55296||s>57343)&&(f=s);break;case 4:i=t[o+1],a=t[o+2],u=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&u)&&(s=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&u)>65535&&s<1114112&&(f=s)}null===f?(f=65533,l=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=l}return function(t){var e=t.length;if(e<=B)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=B));return r}(n)}e.Buffer=s,e.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},e.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,e,r){return c(null,t,e,r)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,e,r){return function(t,e,r,n){return f(e),e<=0?u(t,e):void 0!==r?"string"==typeof n?u(t,e).fill(r,n):u(t,e).fill(r):u(t,e)}(null,t,e,r)},s.allocUnsafe=function(t){return l(null,t)},s.allocUnsafeSlow=function(t){return l(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,e){if(!s.isBuffer(t)||!s.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=s.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var a=t[r];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,o),o+=a.length}return n},s.byteLength=d,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)_(this,e,e+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)_(this,e,e+3),_(this,e+1,e+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)_(this,e,e+7),_(this,e+1,e+6),_(this,e+2,e+5),_(this,e+3,e+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?T(this,0,t):g.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,e,r,n,o){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),a=(r>>>=0)-(e>>>=0),u=Math.min(i,a),c=this.slice(n,o),f=t.slice(e,r),l=0;l<u;++l)if(c[l]!==f[l]){i=c[l],a=f[l];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},s.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},s.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},s.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return v(this,t,e,r);case"utf8":case"utf-8":return m(this,t,e,r);case"ascii":return E(this,t,e,r);case"latin1":case"binary":return w(this,t,e,r);case"base64":return A(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var B=4096;function k(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function S(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function M(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=N(t[i]);return o}function O(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function C(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,r,n,o,i){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function U(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function L(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255}function x(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(t,e,r,n,i){return i||x(t,0,r,4),o.write(t,e,r,n,23,4),r+4}function z(t,e,r,n,i){return i||x(t,0,r,8),o.write(t,e,r,n,52,8),r+8}s.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),s.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=s.prototype;else{var o=e-t;r=new s(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t]}return r},s.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},s.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},s.prototype.readUInt8=function(t,e){return e||C(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,e){return e||C(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,e){return e||C(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,e){return e||C(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,e){return e||C(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},s.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},s.prototype.readInt8=function(t,e){return e||C(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,e){e||C(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt16BE=function(t,e){e||C(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt32LE=function(t,e){return e||C(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,e){return e||C(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,e){return e||C(t,4,this.length),o.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,e){return e||C(t,4,this.length),o.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,e){return e||C(t,8,this.length),o.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,e){return e||C(t,8,this.length),o.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||I(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},s.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||I(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},s.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},s.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},s.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},s.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},s.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},s.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);I(this,t,e,r,o-1,-o)}var i=0,a=1,u=0;for(this[e]=255&t;++i<r&&(a*=256);)t<0&&0===u&&0!==this[e+i-1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+r},s.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);I(this,t,e,r,o-1,-o)}var i=r-1,a=1,u=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===u&&0!==this[e+i+1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+r},s.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},s.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},s.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},s.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},s.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},s.prototype.writeFloatLE=function(t,e,r){return D(this,t,e,!0,r)},s.prototype.writeFloatBE=function(t,e,r){return D(this,t,e,!1,r)},s.prototype.writeDoubleLE=function(t,e,r){return z(this,t,e,!0,r)},s.prototype.writeDoubleBE=function(t,e,r){return z(this,t,e,!1,r)},s.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},s.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!s.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var a=s.isBuffer(t)?t:F(new s(t,n).toString()),u=a.length;for(i=0;i<r-e;++i)this[i+e]=a[i%u]}return this};var Y=/[^+\/0-9A-Za-z-_]/g;function N(t){return t<16?"0"+t.toString(16):t.toString(16)}function F(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],a=0;a<n;++a){if((r=t.charCodeAt(a))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function q(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(Y,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function j(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}}).call(this,r(9))},function(t,e,r){"use strict";e.a=function(t,e,r){return t.toString().replace(/\$[a-z]/g,function(t){for(var n=0;n<e.length;n++)if(e[n].var==t[1])return r?e[n].vt:e[n].val})}},function(module,__webpack_exports__,__webpack_require__){"use strict";function capitalize(t){return t.charAt(0).toUpperCase()+t.slice(1)}__webpack_exports__.a=function(text){var result=text.replace(/\/\[.*?\/\]/g,function(coincidencia){var _final=coincidencia.length-4,funcion=coincidencia.substr(2,_final).replace(/&gt;/g,">").replace(/&lt;/,"<");try{return eval(funcion)}catch(t){return coincidencia}});return result}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return handleRespuesta});var _Variables__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(3),handleRespuesta=function handleRespuesta(){document.querySelector("footer").style.display="none",document.getElementById("btnResponder").disabled=!0,document.getElementsByName("answer").forEach(function(t){t.disabled=!0});var _validaRespuesta=Object(_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__.a)(_Variables__WEBPACK_IMPORTED_MODULE_0__.i,_Variables__WEBPACK_IMPORTED_MODULE_0__.f),feedback=_validaRespuesta.feedback,errorFrecuente=_validaRespuesta.errorFrecuente;console.log({errorFrecuente:errorFrecuente});var feedbackElement=document.querySelector(".feedback"),feedbackStrong=document.querySelector(".feedback span"),feedbackText=document.querySelector(".feedback p"),imgFeedback=document.querySelector(".feedback img");if(errorFrecuente)1===_Variables__WEBPACK_IMPORTED_MODULE_0__.a?(imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.e[imgRandomIndex(!1)]),feedbackElement.style.display="block",feedbackElement.classList.add("feedback-incorrecto"),feedbackStrong.innerHTML="¡Ten Cuidado!",feedbackText.innerHTML=feedback,document.getElementById("btnContinuar").addEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),Object(_Variables__WEBPACK_IMPORTED_MODULE_0__.b)(),window.MathJax&&MathJax.Hub.Queue(["Typeset",MathJax.Hub])):(document.getElementById("imagenGlosa").setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.c[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.c.length)]),document.getElementById("glosa").style.display="block");else{feedbackElement.style.display="block",feedbackElement.classList.add("feedback-correcto"),feedbackStrong.innerHTML="¡Muy Bien!";var racha=rachaCorrectas();racha&&(feedbackText.innerHTML="Tienes una racha de <b>".concat(rachaCorrectas(),"</b> respuestas correctas.")),imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.d[imgRandomIndex(!0)]),2===_Variables__WEBPACK_IMPORTED_MODULE_0__.a&&document.getElementById("btnContinuar").removeEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),document.getElementById("btnContinuar").setAttribute("onClick","cerrarFeed();")}eval("enviar(".concat(null==errorFrecuente,", ").concat(null==errorFrecuente?errorFrecuente:'"'+errorFrecuente+'"',")"))},imgRandomIndex=function(t){return t?Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.d.length):Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.e.length)},rachaCorrectas=function(){for(var t=0,e=_Variables__WEBPACK_IMPORTED_MODULE_0__.g.length-1;e>-1&&_Variables__WEBPACK_IMPORTED_MODULE_0__.g[e].correcto;e--)t++;return t+1>1?t+1:null}},function(t,e,r){"use strict";(function(t){r.d(e,"a",function(){return i});var n=r(1),o=r(2),i=function(t,e){var r,i;if("seleccion multiple"===e){var s=document.querySelector("input[type=radio]:checked").value,c=!0,f=!1,l=void 0;try{for(var h,p=t[Symbol.iterator]();!(c=(h=p.next()).done);c=!0){var d=h.value;if(s==d.opcion){r=d.feedback,i=d.errorFrecuente;break}}}catch(t){f=!0,l=t}finally{try{c||null==p.return||p.return()}finally{if(f)throw l}}return{feedback:r,errorFrecuente:i}}var g=t.respuestas,_=t.errFrecDefecto,y=t.feedbackDefecto,b=!0,v=!1,m=void 0;try{for(var E,w=g[Symbol.iterator]();!(b=(E=w.next()).done);b=!0){var A=E.value,P=!0;if(A.validaciones.forEach(function(t,e){var r=document.getElementById(t.inputId);switch(r.getAttribute("data-tipoinput")){case"numero":r.value.replace(/\s/g,"")!==t.valor&&"-any-"!==t.valor&&(P=!1);break;case"decimal":r.value.replace(/\s/g,"").replace(",",".")!==t.valor&&"-any-"!==t.valor&&(P=!1);break;case"texto-numerico":var n=String(t.valor).padStart(4,"0").split("");Object(o.a)(r.value.trim(),n)||"-any-"===t.valor||(P=!1);break;case"texto":case"alfanumerico":String(r.value).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")!==String(t.valor).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&"-any-"!==t.valor&&(P=!1)}}),P){r=Object(n.a)(A.feedback,"&nbsp;"),null!==(i=A.errFrec)?u(A):document.querySelectorAll("input[name='answer']").forEach(function(t){t.classList.add("inputTexto-correcto")});break}}}catch(t){v=!0,m=t}finally{try{b||null==w.return||w.return()}finally{if(v)throw m}}if(!r){r=Object(n.a)(y,"&nbsp;"),i=_;var R=document.querySelectorAll("input[name='answer']"),T=!0,B=!1,k=void 0;try{for(var S,M=R[Symbol.iterator]();!(T=(S=M.next()).done);T=!0){a(S.value)}}catch(t){B=!0,k=t}finally{try{T||null==M.return||M.return()}finally{if(B)throw k}}}return{feedback:r,errorFrecuente:i}};function a(e){var r,n=e.getAttribute("data-tipoinput"),i=t.from(e.getAttribute("data-content"),"base64").toString("utf-8"),a=!1;switch(n){case"numero":r=e.value.replace(/\s/g,""),i.split(",").forEach(function(t){r===t&&(e.classList.add("inputTexto-correcto"),a=!0)});break;case"decimal":r=e.value.replace(/\s/g,"").replace(",","."),i.split(",").forEach(function(t){r===t&&(e.classList.add("inputTexto-correcto"),a=!0)});break;case"texto-numerico":r=e.value,i.split(",").forEach(function(t){var n=3===t.length?("0"+t).split(""):t.split("");Object(o.a)(r,n)&&(e.classList.add("inputTexto-correcto"),a=!0)});break;case"texto":case"alfanumerico":r=e.value,i.split(",").forEach(function(t){String(r).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")===String(t).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&(e.classList.add("inputTexto-correcto"),a=!0)})}a||e.classList.add("inputTexto-incorrecto")}function u(t){t.validaciones.forEach(function(t){var e=t.color,r=t.inputId,n=document.getElementById(r);"ok"===e?n.classList.add("inputTexto-correcto"):"bad"===e?n.classList.add("inputTexto-incorrecto"):n.value.replace(/\s/g,"")==e.correcta?n.classList.add("inputTexto-correcto"):n.classList.add("inputTexto-incorrecto")})}}).call(this,r(4).Buffer)},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),a=n[0],u=n[1],s=new i(function(t,e,r){return 3*(e+r)/4-r}(0,a,u)),f=0,l=u>0?a-4:a;for(r=0;r<l;r+=4)e=o[t.charCodeAt(r)]<<18|o[t.charCodeAt(r+1)]<<12|o[t.charCodeAt(r+2)]<<6|o[t.charCodeAt(r+3)],s[f++]=e>>16&255,s[f++]=e>>8&255,s[f++]=255&e;2===u&&(e=o[t.charCodeAt(r)]<<2|o[t.charCodeAt(r+1)]>>4,s[f++]=255&e);1===u&&(e=o[t.charCodeAt(r)]<<10|o[t.charCodeAt(r+1)]<<4|o[t.charCodeAt(r+2)]>>2,s[f++]=e>>8&255,s[f++]=255&e);return s},e.fromByteArray=function(t){for(var e,r=t.length,o=r%3,i=[],a=0,u=r-o;a<u;a+=16383)i.push(f(t,a,a+16383>u?u:a+16383));1===o?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===o&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,s=a.length;u<s;++u)n[u]=a[u],o[a.charCodeAt(u)]=u;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,r){for(var o,i,a=[],u=e;u<r;u+=3)o=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),a.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,o){var i,a,u=8*o-n-1,s=(1<<u)-1,c=s>>1,f=-7,l=r?o-1:0,h=r?-1:1,p=t[e+l];for(l+=h,i=p&(1<<-f)-1,p>>=-f,f+=u;f>0;i=256*i+t[e+l],l+=h,f-=8);for(a=i&(1<<-f)-1,i>>=-f,f+=n;f>0;a=256*a+t[e+l],l+=h,f-=8);if(0===i)i=1-c;else{if(i===s)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,n),i-=c}return(p?-1:1)*a*Math.pow(2,i-n)},e.write=function(t,e,r,n,o,i){var a,u,s,c=8*i-o-1,f=(1<<c)-1,l=f>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,a=f):(a=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-a))<1&&(a--,s*=2),(e+=a+l>=1?h/s:h*Math.pow(2,1-l))*s>=2&&(a++,s/=2),a+l>=f?(u=0,a=f):a+l>=1?(u=(e*s-1)*Math.pow(2,o),a+=l):(u=e*Math.pow(2,l-1)*Math.pow(2,o),a=0));o>=8;t[r+p]=255&u,p+=d,u/=256,o-=8);for(a=a<<o|u,c+=o;c>0;t[r+p]=255&a,p+=d,a/=256,c-=8);t[r+p-d]|=128*g}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){},function(t,e,r){"use strict";r.r(e);var n=r(0),o=function(t,e){var r=document.createElementNS("http://www.w3.org/2000/svg",t);for(var n in e)r.setAttributeNS(null,n.replace(/[A-Z]/g,function(t,e,r,n){return"-"+t.toLowerCase()}),e[n]);return r},i=r(7);!function(){var t=document.getElementById("progressbar"),e=250/(n.h+1),r=o("rect",{x:2,y:2,width:250,height:32,fill:"none",stroke:"#CCCBCB",strokeWidth:"1",rx:5,ry:5});t.appendChild(r);var i=Number(250-2*e),a=o("rect",{x:e,y:17,width:i,height:2,fill:"#E7E5E5",rx:2,ry:2});t.appendChild(a);for(var u=0;u<n.h;u++){var s=void 0,c=void 0;n.g.length>u?(c=4,s=n.g[u].correcto?1===n.g[u].NUMEROINTENTOS?"#00AC4D":"#E2C04D":"#E24B4A"):n.g.length===u?(c=8,s="#1280B1"):(c=4,s="#CCCBCB");var f=e*(u+1)+2,l=o("circle",{cx:f,cy:18,r:c,fill:s,stroke:"none"});if(t.appendChild(l),n.g.length===u){var h=o("text",{x:f,y:22,fontFamily:"sans-serif",fontSize:"11px",textAnchor:"middle",fill:"white"});h.textContent=n.g.length+1,t.appendChild(h)}}}(),document.getElementById("btnResponder").addEventListener("click",i.a);r(13)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,