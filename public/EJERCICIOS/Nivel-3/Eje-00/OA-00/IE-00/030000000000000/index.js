!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=14)}([function(e,t,r){"use strict";(function(e){r.d(t,"l",(function(){return l})),r.d(t,"k",(function(){return _})),r.d(t,"h",(function(){return h})),r.d(t,"c",(function(){return p})),r.d(t,"d",(function(){return d})),r.d(t,"f",(function(){return n})),r.d(t,"g",(function(){return o})),r.d(t,"e",(function(){return a})),r.d(t,"i",(function(){return i})),r.d(t,"j",(function(){return s})),r.d(t,"b",(function(){return b})),r.d(t,"a",(function(){return y}));var n,o,a,i,s,c=r(1),u=r(6),f=document.body.dataset.id,l=JSON.parse(document.body.dataset.version.replace(/'/g,'"')),_=JSON.parse(Object(u.a)(Object(c.a)(e(document.body.dataset.x,"base64").toString("utf8"),l.vars,!1))),h=document.body.dataset.tipoejercicio,p=parseInt(document.getElementById("hiddenIntento").value)||1,d=function(){p++};switch(document.getElementById("hiddenIntento").addEventListener("change",(function(e){p=parseInt(e.target.value)})),f.substr(2,2)){case"00":case"01":n=["../../../../imagenes_front/Mascotas_Eje1/Eje1_CorrectFeedback_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_CorrectFeedback_Pato.svg"],o=["../../../../imagenes_front/Mascotas_Eje1/Eje1_MistakeFeedback_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_MistakeFeedback_Pato.svg"],a=["../../../../imagenes_front/Mascotas_Eje1/Eje1_Glosa_Pata.svg","../../../../imagenes_front/Mascotas_Eje1/Eje1_Glosa_Pato.svg"];break;case"02":n=["../../../../imagenes_front/Mascotas_Eje2/Eje2_CorrectFeedback_Alce.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_CorrectFeedback_Zorro.svg"],o=["../../../../imagenes_front/Mascotas_Eje2/Eje2_MistakeFeedback_Alce.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_MistakeFeedback_Zorro.svg"],a=["../../../../imagenes_front/Mascotas_Eje2/Eje2_Glosa_Zorro.svg","../../../../imagenes_front/Mascotas_Eje2/Eje2_Glosa_Alce.svg"];break;case"03":n=["../../../../imagenes_front/Mascotas_Eje3/Eje3_CorrectFeedback_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_CorrectFeedback_Tigre.svg"],o=["../../../../imagenes_front/Mascotas_Eje3/Eje3_MistakeFeedback_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_MistakeFeedback_Tigre.svg"],a=["../../../../imagenes_front/Mascotas_Eje3/Eje3_Glosa_Mandril.svg","../../../../imagenes_front/Mascotas_Eje3/Eje3_Glosa_Tigre.svg"];break;case"04":n=["../../../../imagenes_front/Mascotas_Eje4/Eje4_CorrectFeedback_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_CorrectFeedback_PandaRojo.svg"],o=["../../../../imagenes_front/Mascotas_Eje4/Eje4_MistakeFeedback_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_MistakeFeedback_PandaRojo.svg"],a=["../../../../imagenes_front/Mascotas_Eje4/Eje4_Glosa_OsoPanda.svg","../../../../imagenes_front/Mascotas_Eje4/Eje4_Glosa_PandaRojo.svg"];break;case"05":n=["../../../../imagenes_front/Mascotas_Eje5/Eje5_CorrectFeedback_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_CorrectFeedback_Tortuga.svg"],o=["../../../../imagenes_front/Mascotas_Eje5/Eje5_MistakeFeedback_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_MistakeFeedback_Tortuga.svg"],a=["../../../../imagenes_front/Mascotas_Eje5/Eje5_Glosa_Camaleon".concat(Math.floor(5*Math.random())+1,".svg"),"../../../../imagenes_front/Mascotas_Eje5/Eje5_Glosa_Tortuga.svg"]}var g=window.parent.parent.barraProgreso;if(g){var E=JSON.parse(g.value);i=E.tmpProgreso?E.tmpProgreso:[],s=E.tmpTotal?Number(E.tmpTotal):0}else i=localStorage.getItem("tmpProgreso")?JSON.parse(localStorage.getItem("tmpProgreso")):[],s=localStorage.getItem("tmpTotal")?Number(localStorage.getItem("tmpTotal")):0;var b=["¡Muy bien!","¡Lo has logrado!","¡Genial!","¡Así se hace!"],y=["¡Atención!","¡Algo anda mal!","¡Vuelve a intentarlo!","¡Ten cuidado!"]}).call(this,r(5).Buffer)},function(e,t,r){"use strict";t.a=function(e,t,r){return e.toString().replace(/\$[a-z]/g,(function(e){for(var n=0;n<t.length;n++)if(t[n].var==e[1])return r?t[n].vt:t[n].val}))}},function(e,t,r){"use strict";t.a=function(e,t){return e.replace(/\d{1,}(\.\d{1,})?/g,(function(e){var r=e.split(".")[0],n=e.split(".")[1],o=r.length>=4?"":r;if(r.length>=4){var a=r.split("").reverse(),i=1;a.forEach((function(e,r){3===i&&r+1<a.length?(o=t+e+o,i=1):(o=e+o,i++)}))}return"".concat(o).concat(n?",":"").concat(n||"")}))}},function(e,t,r){"use strict";var n={0:["","","","",""],1:["uno","on","die[sz]","[csz]ien"],2:["do[sz]","do","[vb]einte","do[csz]{1,2}iento[sz]"],3:["tre[sz]","tre","treinta","tre[szc]{1,2}iento[sz]"],4:["[ckq]uatro","[ckq]ator","[ckq]uarenta","[ckq]uatro[szc]{1,2}iento[sz]"],5:["[csz]in[ck]o","(quin|kin)","[csz]in[cqk]uenta","(quin|kin)iento[sz]"],6:["[scz]ei[sz]","","[scz]e[scz]enta","[scz]ei[scz]{1,2}iento[sz]"],7:["[scz]iete","","[scz]etenta","[scz]ete[szc]{1,2}iento[sz]"],8:["o[sc]ho","","o[sc]henta","o[sc]ho[scz]{1,2}iento[sz]"],9:["nue[vb]e","","no[vb]enta","no[vb]e[scz]{1,2}iento[sz]"]};t.a=function(e,t){var r=t[0],o=t[1],a=t[2],i=t[3],s=e.toLowerCase().trim(),c="";return i>0?0==a?c=n[i][0]:1==a?i>0&&i<6?c=n[i][1]+"[scz]e":i>=6&&(c="die[csz]i"+n[i][0]):2==a?c="[vb]einti"+n[i][0]:a>2&&(c=n[a][2]+" y "+n[i][0]):0==i&&a>0&&(c=n[a][2]),o>0&&(1==o?(0==a&&0==i&&(c=n[o][3]+" "+c),0==a&&0==i||(c="[szc]iento "+c)):o>1&&(c=n[o][3]+" "+c)),1==r?c="mil "+c:r>1&&(c=n[r][0]+" mil "+c),c=(c=c.trim()).replace(/^/,"^"),c+="$",new RegExp(c).test(s)}},function(e,t,r){"use strict";r.d(t,"a",(function(){return o}));var n=r(0),o=function(){document.getElementById("btnContinuar").onclick=function(){return!1},document.querySelector(".feedback").style.display="none",document.querySelector(".feedback span").innerHTML="",document.querySelector(".feedback p").innerHTML="",document.querySelector(".feedback img").setAttribute("src",""),document.querySelector(".feedback").classList.remove("feedback-incorrecto"),document.querySelector("footer").style.display="grid","seleccion multiple"===n.h?(document.querySelector("input[type=radio]:checked").checked=!1,document.getElementsByName("answer").forEach((function(e){e.disabled=!1}))):document.querySelectorAll("input[type=text].inputTexto-incorrecto").forEach((function(e){e.disabled=!1,e.classList.remove("inputTexto-incorrecto"),e.value=""}))}},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(10),o=r(11),a=r(12);function i(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,r){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return u(this,e,t,r)}function u(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=_(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!c.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),o=(e=s(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(c.isBuffer(t)){var r=0|h(t.length);return 0===(e=s(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):_(e,t);if("Buffer"===t.type&&a(t.data))return _(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(f(t),e=s(e,t<0?0:0|h(t)),!c.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function _(e,t){var r=t.length<0?0:0|h(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function h(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function p(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Y(e).length;default:if(n)return z(e).length;t=(""+t).toLowerCase(),n=!0}}function d(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,r);case"utf8":case"utf-8":return k(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return R(this,t,r);case"base64":return P(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function E(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,o);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function b(e,t,r,n,o){var a,i=1,s=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,s/=2,c/=2,r/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){var f=-1;for(a=r;a<s;a++)if(u(e,a)===u(t,-1===f?0:a-f)){if(-1===f&&(f=a),a-f+1===c)return f*i}else-1!==f&&(a-=a-f),f=-1}else for(r+c>s&&(r=s-c),a=r;a>=0;a--){for(var l=!0,_=0;_<c;_++)if(u(e,a+_)!==u(t,_)){l=!1;break}if(l)return a}return-1}function y(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var i=0;i<n;++i){var s=parseInt(t.substr(2*i,2),16);if(isNaN(s))return i;e[r+i]=s}return i}function v(e,t,r,n){return N(z(t,e.length-r),e,r,n)}function m(e,t,r,n){return N(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function w(e,t,r,n){return m(e,t,r,n)}function A(e,t,r,n){return N(Y(t),e,r,n)}function M(e,t,r,n){return N(function(e,t){for(var r,n,o,a=[],i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),n=r>>8,o=r%256,a.push(o),a.push(n);return a}(t,e.length-r),e,r,n)}function P(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function k(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var a,i,s,c,u=e[o],f=null,l=u>239?4:u>223?3:u>191?2:1;if(o+l<=r)switch(l){case 1:u<128&&(f=u);break;case 2:128==(192&(a=e[o+1]))&&(c=(31&u)<<6|63&a)>127&&(f=c);break;case 3:a=e[o+1],i=e[o+2],128==(192&a)&&128==(192&i)&&(c=(15&u)<<12|(63&a)<<6|63&i)>2047&&(c<55296||c>57343)&&(f=c);break;case 4:a=e[o+1],i=e[o+2],s=e[o+3],128==(192&a)&&128==(192&i)&&128==(192&s)&&(c=(15&u)<<18|(63&a)<<12|(63&i)<<6|63&s)>65535&&c<1114112&&(f=c)}null===f?(f=65533,l=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=l}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,r){return u(null,e,t,r)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,r){return function(e,t,r,n){return f(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},c.allocUnsafe=function(e){return l(null,e)},c.allocUnsafeSlow=function(e){return l(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,a=Math.min(r,n);o<a;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=c.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var i=e[r];if(!c.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?k(this,0,e):d.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,r,n,o){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),s=Math.min(a,i),u=this.slice(n,o),f=e.slice(t,r),l=0;l<s;++l)if(u[l]!==f[l]){a=u[l],i=f[l];break}return a<i?-1:i<a?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return E(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return E(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return y(this,e,t,r);case"utf8":case"utf-8":return v(this,e,t,r);case"ascii":return m(this,e,t,r);case"latin1":case"binary":return w(this,e,t,r);case"base64":return A(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function T(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function R(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function O(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",a=t;a<r;++a)o+=F(e[a]);return o}function B(e,t,r){for(var n=e.slice(t,r),o="",a=0;a<n.length;a+=2)o+=String.fromCharCode(n[a]+256*n[a+1]);return o}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function C(e,t,r,n,o,a){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function D(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,a=Math.min(e.length-r,2);o<a;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function S(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,a=Math.min(e.length-r,4);o<a;++o)e[r+o]=t>>>8*(n?o:3-o)&255}function L(e,t,r,n,o,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(e,t,r,n,a){return a||L(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function U(e,t,r,n,a){return a||L(e,0,r,8),o.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=c.prototype;else{var o=t-e;r=new c(o,void 0);for(var a=0;a<o;++a)r[a]=this[a+e]}return r},c.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n},c.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},c.prototype.readUInt8=function(e,t){return t||I(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||I(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||I(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],o=1,a=0;++a<t&&(o*=256);)n+=this[e+a]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=t,o=1,a=this[e+--n];n>0&&(o*=256);)a+=this[e+--n]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*t)),a},c.prototype.readInt8=function(e,t){return t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||I(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){t||I(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||I(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||I(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||I(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||I(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||C(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,a=0;for(this[t]=255&e;++a<r&&(o*=256);)this[t+a]=e/o&255;return t+r},c.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||C(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+r},c.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):D(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):D(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):S(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):S(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);C(this,e,t,r,o-1,-o)}var a=0,i=1,s=0;for(this[t]=255&e;++a<r&&(i*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/i>>0)-s&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);C(this,e,t,r,o-1,-o)}var a=r-1,i=1,s=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/i>>0)-s&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):D(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):D(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):S(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||C(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):S(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,r){return j(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return j(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return U(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return U(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,a=n-r;if(this===e&&r<t&&t<n)for(o=a-1;o>=0;--o)e[o+t]=this[o+r];else if(a<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var i=c.isBuffer(e)?e:z(new c(e,n).toString()),s=i.length;for(a=0;a<r-t;++a)this[a+t]=i[a%s]}return this};var x=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function z(e,t){var r;t=t||1/0;for(var n=e.length,o=null,a=[],i=0;i<n;++i){if((r=e.charCodeAt(i))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&a.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&a.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function Y(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(x,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function N(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(9))},function(module,__webpack_exports__,__webpack_require__){"use strict";function frac(e,t,r){return'<span class=\\"eq\\">'.concat(e?'<span class=\\"integer\\">'.concat(e,"</span>"):"",'<span class=\\"fraction\\"><span class=\\"fup\\">&nbsp;').concat(t,'&nbsp;</span><span class=\\"bar\\">/</span><span class=\\"fdn\\">&nbsp;').concat(r,"&nbsp;</span></span></span>")}function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}__webpack_exports__.a=function(text){var result=text.replace(/\/\[.*?\/\]/g,(function(coincidencia){var _final=coincidencia.length-4,funcion=coincidencia.substr(2,_final).replace(/&gt;/g,">").replace(/&lt;/,"<");try{return eval(funcion)}catch(e){return coincidencia}}));return result}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return handleRespuesta}));var _Variables__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(4),handleRespuesta=function handleRespuesta(){document.querySelector("footer").style.display="none",document.getElementById("btnResponder").disabled=!0,document.getElementsByName("answer").forEach((function(e){e.disabled=!0}));var _validaRespuesta=Object(_ValidaRespuesta__WEBPACK_IMPORTED_MODULE_1__.a)(_Variables__WEBPACK_IMPORTED_MODULE_0__.k,_Variables__WEBPACK_IMPORTED_MODULE_0__.h),feedback=_validaRespuesta.feedback,errorFrecuente=_validaRespuesta.errorFrecuente,feedbackElement=document.querySelector(".feedback"),feedbackStrong=document.querySelector(".feedback span"),feedbackText=document.querySelector(".feedback p"),imgFeedback=document.querySelector(".feedback img");if(errorFrecuente)1===_Variables__WEBPACK_IMPORTED_MODULE_0__.c?(imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.g[imgRandomIndex(!1)]),feedbackElement.style.display="block",feedbackElement.classList.add("feedback-incorrecto"),feedbackStrong.innerHTML=feedRandomIndex(!1),feedbackText.innerHTML=feedback,document.getElementById("btnContinuar").addEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),Object(_Variables__WEBPACK_IMPORTED_MODULE_0__.d)(),window.MathJax&&MathJax.Hub.Queue(["Typeset",MathJax.Hub])):(document.getElementById("imagenGlosa").setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.e[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.e.length)]),document.getElementById("glosa").style.display="block");else{feedbackElement.style.display="block",feedbackElement.classList.add("feedback-correcto"),feedbackStrong.innerHTML=feedRandomIndex(!0);var racha=rachaCorrectas();racha&&(feedbackText.innerHTML="Tienes una racha de <b>".concat(rachaCorrectas(),"</b> respuestas correctas.")),imgFeedback.setAttribute("src",_Variables__WEBPACK_IMPORTED_MODULE_0__.f[imgRandomIndex(!0)]),2===_Variables__WEBPACK_IMPORTED_MODULE_0__.c&&document.getElementById("btnContinuar").removeEventListener("click",_ContinuarEjercicio__WEBPACK_IMPORTED_MODULE_2__.a),document.getElementById("btnContinuar").setAttribute("onClick","cerrarFeed();")}eval("enviar(".concat(null==errorFrecuente,", ").concat(null==errorFrecuente?errorFrecuente:'"'+errorFrecuente+'"',")"))},imgRandomIndex=function(e){return e?Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.f.length):Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.g.length)},feedRandomIndex=function(e){return e?_Variables__WEBPACK_IMPORTED_MODULE_0__.b[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.b.length)]:_Variables__WEBPACK_IMPORTED_MODULE_0__.a[Math.floor(Math.random()*_Variables__WEBPACK_IMPORTED_MODULE_0__.a.length)]},rachaCorrectas=function(){for(var e=0,t=_Variables__WEBPACK_IMPORTED_MODULE_0__.i.length-1;t>-1&&_Variables__WEBPACK_IMPORTED_MODULE_0__.i[t].correcto;t--)e++;return e+1>1?e+1:null}},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(Buffer){__webpack_require__.d(__webpack_exports__,"a",(function(){return validaRespuesta}));var _utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(2),_utils_ValidaNumeroEscrito__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),_Variables__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(0),_utils_ReemplazaVariables__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1);function _createForOfIteratorHelper(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==r.return||r.return()}finally{if(s)throw a}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var validaRespuesta=function validaRespuesta(validaciones,tipo){var feedback,errorFrecuente;if("seleccion multiple"===tipo){var respuesta=document.querySelector("input[type=radio]:checked").value,_iterator=_createForOfIteratorHelper(validaciones),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var validacion=_step.value;if(respuesta==validacion.opcion){feedback=validacion.feedback,errorFrecuente=validacion.errorFrecuente;break}}}catch(e){_iterator.e(e)}finally{_iterator.f()}return{feedback:feedback,errorFrecuente:errorFrecuente}}if("respuesta breve"===tipo){var respuestas=validaciones.respuestas,errFrecDefecto=validaciones.errFrecDefecto,feedbackDefecto=validaciones.feedbackDefecto,_iterator2=_createForOfIteratorHelper(respuestas),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _respuesta=_step2.value,coincidenTodas=!0;if(_respuesta.validaciones.forEach((function(e,t){var r=document.getElementById(e.inputId);switch(r.getAttribute("data-tipoinput")){case"numero":r.value.replace(/\s/g,"")!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"decimal":r.value.replace(/\s/g,"").replace(",",".")!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"texto-numerico":var n=String(e.valor).padStart(4,"0").split("");Object(_utils_ValidaNumeroEscrito__WEBPACK_IMPORTED_MODULE_1__.a)(r.value.trim(),n)||"-any-"===e.valor||(coincidenTodas=!1);break;case"texto":case"alfanumerico":String(r.value).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")!==String(e.valor).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&"-any-"!==e.valor&&(coincidenTodas=!1);break;case"comparacion":r.value!==e.valor&&"-any-"!==e.valor&&(coincidenTodas=!1)}})),coincidenTodas){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(_respuesta.feedback,"&nbsp;"),errorFrecuente=_respuesta.errFrec,null!==errorFrecuente?coloreaInputsTextoPorCoincidencia(_respuesta):document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")}));break}}}catch(e){_iterator2.e(e)}finally{_iterator2.f()}if(!feedback){feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(feedbackDefecto,"&nbsp;"),errorFrecuente=errFrecDefecto;var inputs=document.querySelectorAll("input[name='answer']"),_iterator3=_createForOfIteratorHelper(inputs),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var input=_step3.value;coloreaInputTextoPorDefecto(input)}}catch(e){_iterator3.e(e)}finally{_iterator3.f()}}return{feedback:feedback,errorFrecuente:errorFrecuente}}var _respuestas=validaciones.respuestas,_errFrecDefecto=validaciones.errFrecDefecto,_feedbackDefecto=validaciones.feedbackDefecto,_iterator4=_createForOfIteratorHelper(_respuestas),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var resp=_step4.value,evaluacion=resp.opcion.replace(/input\d/g,(function(e){return document.getElementById(e).value.replace(",",".").replace(/\s/,"")}));if(eval(evaluacion)){feedback=resp.feedback,errorFrecuente=resp.errorFrecuente;break}}}catch(e){_iterator4.e(e)}finally{_iterator4.f()}return feedback?document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-correcto")})):(feedback=Object(_utils_FormateaNumeros__WEBPACK_IMPORTED_MODULE_0__.a)(_feedbackDefecto,"&nbsp;"),errorFrecuente=_errFrecDefecto,document.querySelectorAll("input[name='answer']").forEach((function(e){e.classList.add("inputTexto-incorrecto")}))),{feedback:feedback,errorFrecuente:errorFrecuente}};function coloreaInputTextoPorDefecto(e){var t=e.getAttribute("data-tipoinput"),r=Buffer.from(e.getAttribute("data-content"),"base64").toString("utf-8");r=Object(_utils_ReemplazaVariables__WEBPACK_IMPORTED_MODULE_3__.a)(r,_Variables__WEBPACK_IMPORTED_MODULE_2__.l.vars,!1);var n,o=!1;switch(t){case"numero":n=e.value.replace(/\s/g,""),r.split(",").forEach((function(t){n===t&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"decimal":n=e.value.replace(/\s/g,"").replace(",","."),r.split(",").forEach((function(t){n===t&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"texto-numerico":n=e.value,r.split(",").forEach((function(t){var r=3===t.length?("0"+t).split(""):t.split("");Object(_utils_ValidaNumeroEscrito__WEBPACK_IMPORTED_MODULE_1__.a)(n,r)&&(e.classList.add("inputTexto-correcto"),o=!0)}));break;case"texto":case"alfanumerico":n=e.value,r.split(",").forEach((function(t){String(n).trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")===String(t).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"")&&(e.classList.add("inputTexto-correcto"),o=!0)}))}o||e.classList.add("inputTexto-incorrecto")}function coloreaInputsTextoPorCoincidencia(e){e.validaciones.forEach((function(e){var t=e.color,r=e.inputId,n=document.getElementById(r);"ok"===t?n.classList.add("inputTexto-correcto"):"bad"===t?n.classList.add("inputTexto-incorrecto"):n.value.replace(/\s/g,"")==t.correcta?n.classList.add("inputTexto-correcto"):n.classList.add("inputTexto-incorrecto")}))}}).call(this,__webpack_require__(5).Buffer)},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";t.byteLength=function(e){var t=u(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=u(e),i=n[0],s=n[1],c=new a(function(e,t,r){return 3*(t+r)/4-r}(0,i,s)),f=0,l=s>0?i-4:i;for(r=0;r<l;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],c[f++]=t>>16&255,c[f++]=t>>8&255,c[f++]=255&t;2===s&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,c[f++]=255&t);1===s&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,c[f++]=t>>8&255,c[f++]=255&t);return c},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,a=[],i=0,s=r-o;i<s;i+=16383)a.push(f(e,i,i+16383>s?s:i+16383));1===o?(t=e[r-1],a.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],a.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return a.join("")};for(var n=[],o=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,c=i.length;s<c;++s)n[s]=i[s],o[i.charCodeAt(s)]=s;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function f(e,t,r){for(var o,a,i=[],s=t;s<r;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(n[(a=o)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return i.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,o){var a,i,s=8*o-n-1,c=(1<<s)-1,u=c>>1,f=-7,l=r?o-1:0,_=r?-1:1,h=e[t+l];for(l+=_,a=h&(1<<-f)-1,h>>=-f,f+=s;f>0;a=256*a+e[t+l],l+=_,f-=8);for(i=a&(1<<-f)-1,a>>=-f,f+=n;f>0;i=256*i+e[t+l],l+=_,f-=8);if(0===a)a=1-u;else{if(a===c)return i?NaN:1/0*(h?-1:1);i+=Math.pow(2,n),a-=u}return(h?-1:1)*i*Math.pow(2,a-n)},t.write=function(e,t,r,n,o,a){var i,s,c,u=8*a-o-1,f=(1<<u)-1,l=f>>1,_=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:a-1,p=n?1:-1,d=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,i=f):(i=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-i))<1&&(i--,c*=2),(t+=i+l>=1?_/c:_*Math.pow(2,1-l))*c>=2&&(i++,c/=2),i+l>=f?(s=0,i=f):i+l>=1?(s=(t*c-1)*Math.pow(2,o),i+=l):(s=t*Math.pow(2,l-1)*Math.pow(2,o),i=0));o>=8;e[r+h]=255&s,h+=p,s/=256,o-=8);for(i=i<<o|s,u+=o;u>0;e[r+h]=255&i,h+=p,i/=256,u-=8);e[r+h-p]|=128*d}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){},function(e,t,r){"use strict";r.r(t);var n=r(0),o=function(e,t){var r=document.createElementNS("http://www.w3.org/2000/svg",e);for(var n in t)r.setAttributeNS(null,n.replace(/[A-Z]/g,(function(e,t,r,n){return"-"+e.toLowerCase()})),t[n]);return r},a=r(7);!function(){var e=document.getElementById("progressbar"),t=250/(n.j+1),r=o("rect",{x:2,y:2,width:250,height:32,fill:"none",stroke:"#CCCBCB",strokeWidth:"1",rx:5,ry:5});e.appendChild(r);var a=Number(250-2*t),i=o("rect",{x:t,y:17,width:a,height:2,fill:"#E7E5E5",rx:2,ry:2});e.appendChild(i);for(var s=0;s<n.j;s++){var c=void 0,u=void 0;n.i.length>s?(u=4,c=n.i[s].correcto?1===n.i[s].NUMEROINTENTOS?"#00AC4D":"#E2C04D":"#E24B4A"):n.i.length===s?(u=8,c="#1280B1"):(u=4,c="#CCCBCB");var f=t*(s+1)+2,l=o("circle",{cx:f,cy:18,r:u,fill:c,stroke:"none"});if(e.appendChild(l),n.i.length===s){var _=o("text",{x:f,y:22,fontFamily:"sans-serif",fontSize:"11px",textAnchor:"middle",fill:"white"});_.textContent=n.i.length+1,e.appendChild(_)}}}(),document.getElementById("btnResponder").addEventListener("click",a.a);r(13)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,